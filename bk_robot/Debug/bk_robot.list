
bk_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005c88  08005c88  00006c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cec  08005cec  000070ac  2**0
                  CONTENTS
  4 .ARM          00000000  08005cec  08005cec  000070ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cec  08005cec  000070ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00006cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  08005cf4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200000ac  08005da0  000070ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005da0  0000744c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc5e  00000000  00000000  000070d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1a  00000000  00000000  00016d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00019b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5c  00000000  00000000  0001aa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a74c  00000000  00000000  0001b57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fb6  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009917c  00000000  00000000  00049c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  000e2e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e6ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000ac 	.word	0x200000ac
 8000200:	00000000 	.word	0x00000000
 8000204:	08005c70 	.word	0x08005c70

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b0 	.word	0x200000b0
 8000220:	08005c70 	.word	0x08005c70

08000224 <buzzer_init>:
#include "tim.h"
#include "buzzer.h"

uint8_t buzzer_duty_cycle = 0;

void buzzer_init() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000228:	2100      	movs	r1, #0
 800022a:	4802      	ldr	r0, [pc, #8]	@ (8000234 <buzzer_init+0x10>)
 800022c:	f003 f91c 	bl	8003468 <HAL_TIM_PWM_Start>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200001c8 	.word	0x200001c8

08000238 <buzzer_set_duty_cycle>:

void buzzer_set_duty_cycle(uint8_t duty_cycle) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	buzzer_duty_cycle = duty_cycle;
 8000242:	4a06      	ldr	r2, [pc, #24]	@ (800025c <buzzer_set_duty_cycle+0x24>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, buzzer_duty_cycle);
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <buzzer_set_duty_cycle+0x24>)
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b04      	ldr	r3, [pc, #16]	@ (8000260 <buzzer_set_duty_cycle+0x28>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	200000c8 	.word	0x200000c8
 8000260:	200001c8 	.word	0x200001c8

08000264 <read_encoder_data>:
uint16_t ENCODER_B_PIN[4] = {ENCODER1_B_Pin, ENCODER2_B_Pin, ENCODER3_B_Pin, ENCODER4_B_Pin};

int32_t encoder_pulse[4] = {0,0,0,0};
uint8_t state[4] = {0,0,0,0};

void read_encoder_data(){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++){
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	e2ae      	b.n	80007ce <read_encoder_data+0x56a>
		switch (state[i]) {
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	4aa9      	ldr	r2, [pc, #676]	@ (8000518 <read_encoder_data+0x2b4>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	2b03      	cmp	r3, #3
 8000278:	f200 829a 	bhi.w	80007b0 <read_encoder_data+0x54c>
 800027c:	a201      	add	r2, pc, #4	@ (adr r2, 8000284 <read_encoder_data+0x20>)
 800027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000282:	bf00      	nop
 8000284:	08000295 	.word	0x08000295
 8000288:	080003d7 	.word	0x080003d7
 800028c:	08000531 	.word	0x08000531
 8000290:	08000673 	.word	0x08000673
			case STATE_00:
				if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	4aa1      	ldr	r2, [pc, #644]	@ (800051c <read_encoder_data+0x2b8>)
 8000298:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	49a0      	ldr	r1, [pc, #640]	@ (8000520 <read_encoder_data+0x2bc>)
 80002a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002a4:	4619      	mov	r1, r3
 80002a6:	4610      	mov	r0, r2
 80002a8:	f002 fb86 	bl	80029b8 <HAL_GPIO_ReadPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d11c      	bne.n	80002ec <read_encoder_data+0x88>
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	4a9b      	ldr	r2, [pc, #620]	@ (8000524 <read_encoder_data+0x2c0>)
 80002b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	499a      	ldr	r1, [pc, #616]	@ (8000528 <read_encoder_data+0x2c4>)
 80002be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002c2:	4619      	mov	r1, r3
 80002c4:	4610      	mov	r0, r2
 80002c6:	f002 fb77 	bl	80029b8 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d00d      	beq.n	80002ec <read_encoder_data+0x88>
					encoder_pulse[i] += 1;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a96      	ldr	r2, [pc, #600]	@ (800052c <read_encoder_data+0x2c8>)
 80002d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3201      	adds	r2, #1
 80002dc:	4993      	ldr	r1, [pc, #588]	@ (800052c <read_encoder_data+0x2c8>)
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_01;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a8c      	ldr	r2, [pc, #560]	@ (8000518 <read_encoder_data+0x2b4>)
 80002e6:	2101      	movs	r1, #1
 80002e8:	54d1      	strb	r1, [r2, r3]
 80002ea:	e073      	b.n	80003d4 <read_encoder_data+0x170>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	4a8b      	ldr	r2, [pc, #556]	@ (800051c <read_encoder_data+0x2b8>)
 80002f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	498a      	ldr	r1, [pc, #552]	@ (8000520 <read_encoder_data+0x2bc>)
 80002f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002fc:	4619      	mov	r1, r3
 80002fe:	4610      	mov	r0, r2
 8000300:	f002 fb5a 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d01c      	beq.n	8000344 <read_encoder_data+0xe0>
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	4a85      	ldr	r2, [pc, #532]	@ (8000524 <read_encoder_data+0x2c0>)
 800030e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4984      	ldr	r1, [pc, #528]	@ (8000528 <read_encoder_data+0x2c4>)
 8000316:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800031a:	4619      	mov	r1, r3
 800031c:	4610      	mov	r0, r2
 800031e:	f002 fb4b 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d10d      	bne.n	8000344 <read_encoder_data+0xe0>
					encoder_pulse[i] -= 1;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4a80      	ldr	r2, [pc, #512]	@ (800052c <read_encoder_data+0x2c8>)
 800032c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	3a01      	subs	r2, #1
 8000334:	497d      	ldr	r1, [pc, #500]	@ (800052c <read_encoder_data+0x2c8>)
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_10;
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4a76      	ldr	r2, [pc, #472]	@ (8000518 <read_encoder_data+0x2b4>)
 800033e:	2103      	movs	r1, #3
 8000340:	54d1      	strb	r1, [r2, r3]
 8000342:	e047      	b.n	80003d4 <read_encoder_data+0x170>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4a75      	ldr	r2, [pc, #468]	@ (800051c <read_encoder_data+0x2b8>)
 8000348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4974      	ldr	r1, [pc, #464]	@ (8000520 <read_encoder_data+0x2bc>)
 8000350:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000354:	4619      	mov	r1, r3
 8000356:	4610      	mov	r0, r2
 8000358:	f002 fb2e 	bl	80029b8 <HAL_GPIO_ReadPin>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d013      	beq.n	800038a <read_encoder_data+0x126>
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4a6f      	ldr	r2, [pc, #444]	@ (8000524 <read_encoder_data+0x2c0>)
 8000366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	496e      	ldr	r1, [pc, #440]	@ (8000528 <read_encoder_data+0x2c4>)
 800036e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000372:	4619      	mov	r1, r3
 8000374:	4610      	mov	r0, r2
 8000376:	f002 fb1f 	bl	80029b8 <HAL_GPIO_ReadPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d004      	beq.n	800038a <read_encoder_data+0x126>
					state[i] = STATE_11;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4a65      	ldr	r2, [pc, #404]	@ (8000518 <read_encoder_data+0x2b4>)
 8000384:	2102      	movs	r1, #2
 8000386:	54d1      	strb	r1, [r2, r3]
 8000388:	e024      	b.n	80003d4 <read_encoder_data+0x170>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a63      	ldr	r2, [pc, #396]	@ (800051c <read_encoder_data+0x2b8>)
 800038e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4962      	ldr	r1, [pc, #392]	@ (8000520 <read_encoder_data+0x2bc>)
 8000396:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800039a:	4619      	mov	r1, r3
 800039c:	4610      	mov	r0, r2
 800039e:	f002 fb0b 	bl	80029b8 <HAL_GPIO_ReadPin>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 8208 	bne.w	80007ba <read_encoder_data+0x556>
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	4a5d      	ldr	r2, [pc, #372]	@ (8000524 <read_encoder_data+0x2c0>)
 80003ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	495c      	ldr	r1, [pc, #368]	@ (8000528 <read_encoder_data+0x2c4>)
 80003b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003ba:	4619      	mov	r1, r3
 80003bc:	4610      	mov	r0, r2
 80003be:	f002 fafb 	bl	80029b8 <HAL_GPIO_ReadPin>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	f040 81f8 	bne.w	80007ba <read_encoder_data+0x556>
					state[i] = STATE_00;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4a52      	ldr	r2, [pc, #328]	@ (8000518 <read_encoder_data+0x2b4>)
 80003ce:	2100      	movs	r1, #0
 80003d0:	54d1      	strb	r1, [r2, r3]
				}
				break;
 80003d2:	e1f2      	b.n	80007ba <read_encoder_data+0x556>
 80003d4:	e1f1      	b.n	80007ba <read_encoder_data+0x556>
			case STATE_01:
				if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	4a50      	ldr	r2, [pc, #320]	@ (800051c <read_encoder_data+0x2b8>)
 80003da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	494f      	ldr	r1, [pc, #316]	@ (8000520 <read_encoder_data+0x2bc>)
 80003e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003e6:	4619      	mov	r1, r3
 80003e8:	4610      	mov	r0, r2
 80003ea:	f002 fae5 	bl	80029b8 <HAL_GPIO_ReadPin>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d01c      	beq.n	800042e <read_encoder_data+0x1ca>
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000524 <read_encoder_data+0x2c0>)
 80003f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	494a      	ldr	r1, [pc, #296]	@ (8000528 <read_encoder_data+0x2c4>)
 8000400:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000404:	4619      	mov	r1, r3
 8000406:	4610      	mov	r0, r2
 8000408:	f002 fad6 	bl	80029b8 <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d00d      	beq.n	800042e <read_encoder_data+0x1ca>
					encoder_pulse[i] += 1;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a45      	ldr	r2, [pc, #276]	@ (800052c <read_encoder_data+0x2c8>)
 8000416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	3201      	adds	r2, #1
 800041e:	4943      	ldr	r1, [pc, #268]	@ (800052c <read_encoder_data+0x2c8>)
 8000420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_11;
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	4a3c      	ldr	r2, [pc, #240]	@ (8000518 <read_encoder_data+0x2b4>)
 8000428:	2102      	movs	r1, #2
 800042a:	54d1      	strb	r1, [r2, r3]
 800042c:	e073      	b.n	8000516 <read_encoder_data+0x2b2>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	4a3a      	ldr	r2, [pc, #232]	@ (800051c <read_encoder_data+0x2b8>)
 8000432:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	4939      	ldr	r1, [pc, #228]	@ (8000520 <read_encoder_data+0x2bc>)
 800043a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800043e:	4619      	mov	r1, r3
 8000440:	4610      	mov	r0, r2
 8000442:	f002 fab9 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d11c      	bne.n	8000486 <read_encoder_data+0x222>
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	4a35      	ldr	r2, [pc, #212]	@ (8000524 <read_encoder_data+0x2c0>)
 8000450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4934      	ldr	r1, [pc, #208]	@ (8000528 <read_encoder_data+0x2c4>)
 8000458:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800045c:	4619      	mov	r1, r3
 800045e:	4610      	mov	r0, r2
 8000460:	f002 faaa 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d10d      	bne.n	8000486 <read_encoder_data+0x222>
					encoder_pulse[i] -= 1;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <read_encoder_data+0x2c8>)
 800046e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3a01      	subs	r2, #1
 8000476:	492d      	ldr	r1, [pc, #180]	@ (800052c <read_encoder_data+0x2c8>)
 8000478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_00;
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4a26      	ldr	r2, [pc, #152]	@ (8000518 <read_encoder_data+0x2b4>)
 8000480:	2100      	movs	r1, #0
 8000482:	54d1      	strb	r1, [r2, r3]
 8000484:	e047      	b.n	8000516 <read_encoder_data+0x2b2>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4a24      	ldr	r2, [pc, #144]	@ (800051c <read_encoder_data+0x2b8>)
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4923      	ldr	r1, [pc, #140]	@ (8000520 <read_encoder_data+0x2bc>)
 8000492:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000496:	4619      	mov	r1, r3
 8000498:	4610      	mov	r0, r2
 800049a:	f002 fa8d 	bl	80029b8 <HAL_GPIO_ReadPin>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d013      	beq.n	80004cc <read_encoder_data+0x268>
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000524 <read_encoder_data+0x2c0>)
 80004a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	491e      	ldr	r1, [pc, #120]	@ (8000528 <read_encoder_data+0x2c4>)
 80004b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004b4:	4619      	mov	r1, r3
 80004b6:	4610      	mov	r0, r2
 80004b8:	f002 fa7e 	bl	80029b8 <HAL_GPIO_ReadPin>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d104      	bne.n	80004cc <read_encoder_data+0x268>
					state[i] = STATE_10;
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <read_encoder_data+0x2b4>)
 80004c6:	2103      	movs	r1, #3
 80004c8:	54d1      	strb	r1, [r2, r3]
 80004ca:	e024      	b.n	8000516 <read_encoder_data+0x2b2>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	4a13      	ldr	r2, [pc, #76]	@ (800051c <read_encoder_data+0x2b8>)
 80004d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4912      	ldr	r1, [pc, #72]	@ (8000520 <read_encoder_data+0x2bc>)
 80004d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004dc:	4619      	mov	r1, r3
 80004de:	4610      	mov	r0, r2
 80004e0:	f002 fa6a 	bl	80029b8 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f040 8169 	bne.w	80007be <read_encoder_data+0x55a>
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <read_encoder_data+0x2c0>)
 80004f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	490c      	ldr	r1, [pc, #48]	@ (8000528 <read_encoder_data+0x2c4>)
 80004f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4610      	mov	r0, r2
 8000500:	f002 fa5a 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	f000 8159 	beq.w	80007be <read_encoder_data+0x55a>
					state[i] = STATE_01;
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4a02      	ldr	r2, [pc, #8]	@ (8000518 <read_encoder_data+0x2b4>)
 8000510:	2101      	movs	r1, #1
 8000512:	54d1      	strb	r1, [r2, r3]
				}
				break;
 8000514:	e153      	b.n	80007be <read_encoder_data+0x55a>
 8000516:	e152      	b.n	80007be <read_encoder_data+0x55a>
 8000518:	200000dc 	.word	0x200000dc
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000018 	.word	0x20000018
 8000528:	20000028 	.word	0x20000028
 800052c:	200000cc 	.word	0x200000cc
			case STATE_11:
				if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4aab      	ldr	r2, [pc, #684]	@ (80007e0 <read_encoder_data+0x57c>)
 8000534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	49aa      	ldr	r1, [pc, #680]	@ (80007e4 <read_encoder_data+0x580>)
 800053c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000540:	4619      	mov	r1, r3
 8000542:	4610      	mov	r0, r2
 8000544:	f002 fa38 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d01c      	beq.n	8000588 <read_encoder_data+0x324>
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4aa5      	ldr	r2, [pc, #660]	@ (80007e8 <read_encoder_data+0x584>)
 8000552:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	49a4      	ldr	r1, [pc, #656]	@ (80007ec <read_encoder_data+0x588>)
 800055a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800055e:	4619      	mov	r1, r3
 8000560:	4610      	mov	r0, r2
 8000562:	f002 fa29 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d10d      	bne.n	8000588 <read_encoder_data+0x324>
					encoder_pulse[i] += 1;
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4aa0      	ldr	r2, [pc, #640]	@ (80007f0 <read_encoder_data+0x58c>)
 8000570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	3201      	adds	r2, #1
 8000578:	499d      	ldr	r1, [pc, #628]	@ (80007f0 <read_encoder_data+0x58c>)
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_10;
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4a9c      	ldr	r2, [pc, #624]	@ (80007f4 <read_encoder_data+0x590>)
 8000582:	2103      	movs	r1, #3
 8000584:	54d1      	strb	r1, [r2, r3]
 8000586:	e073      	b.n	8000670 <read_encoder_data+0x40c>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4a95      	ldr	r2, [pc, #596]	@ (80007e0 <read_encoder_data+0x57c>)
 800058c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4994      	ldr	r1, [pc, #592]	@ (80007e4 <read_encoder_data+0x580>)
 8000594:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000598:	4619      	mov	r1, r3
 800059a:	4610      	mov	r0, r2
 800059c:	f002 fa0c 	bl	80029b8 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d11c      	bne.n	80005e0 <read_encoder_data+0x37c>
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4a8f      	ldr	r2, [pc, #572]	@ (80007e8 <read_encoder_data+0x584>)
 80005aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	498e      	ldr	r1, [pc, #568]	@ (80007ec <read_encoder_data+0x588>)
 80005b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f002 f9fd 	bl	80029b8 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00d      	beq.n	80005e0 <read_encoder_data+0x37c>
					encoder_pulse[i] -= 1;
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4a8a      	ldr	r2, [pc, #552]	@ (80007f0 <read_encoder_data+0x58c>)
 80005c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	3a01      	subs	r2, #1
 80005d0:	4987      	ldr	r1, [pc, #540]	@ (80007f0 <read_encoder_data+0x58c>)
 80005d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_01;
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a86      	ldr	r2, [pc, #536]	@ (80007f4 <read_encoder_data+0x590>)
 80005da:	2101      	movs	r1, #1
 80005dc:	54d1      	strb	r1, [r2, r3]
 80005de:	e047      	b.n	8000670 <read_encoder_data+0x40c>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	4a7f      	ldr	r2, [pc, #508]	@ (80007e0 <read_encoder_data+0x57c>)
 80005e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	497e      	ldr	r1, [pc, #504]	@ (80007e4 <read_encoder_data+0x580>)
 80005ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4610      	mov	r0, r2
 80005f4:	f002 f9e0 	bl	80029b8 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d013      	beq.n	8000626 <read_encoder_data+0x3c2>
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4a79      	ldr	r2, [pc, #484]	@ (80007e8 <read_encoder_data+0x584>)
 8000602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4978      	ldr	r1, [pc, #480]	@ (80007ec <read_encoder_data+0x588>)
 800060a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800060e:	4619      	mov	r1, r3
 8000610:	4610      	mov	r0, r2
 8000612:	f002 f9d1 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <read_encoder_data+0x3c2>
					state[i] = STATE_11;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4a75      	ldr	r2, [pc, #468]	@ (80007f4 <read_encoder_data+0x590>)
 8000620:	2102      	movs	r1, #2
 8000622:	54d1      	strb	r1, [r2, r3]
 8000624:	e024      	b.n	8000670 <read_encoder_data+0x40c>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a6d      	ldr	r2, [pc, #436]	@ (80007e0 <read_encoder_data+0x57c>)
 800062a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	496c      	ldr	r1, [pc, #432]	@ (80007e4 <read_encoder_data+0x580>)
 8000632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f002 f9bd 	bl	80029b8 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	f040 80be 	bne.w	80007c2 <read_encoder_data+0x55e>
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a67      	ldr	r2, [pc, #412]	@ (80007e8 <read_encoder_data+0x584>)
 800064a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4966      	ldr	r1, [pc, #408]	@ (80007ec <read_encoder_data+0x588>)
 8000652:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000656:	4619      	mov	r1, r3
 8000658:	4610      	mov	r0, r2
 800065a:	f002 f9ad 	bl	80029b8 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	f040 80ae 	bne.w	80007c2 <read_encoder_data+0x55e>
					state[i] = STATE_00;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a62      	ldr	r2, [pc, #392]	@ (80007f4 <read_encoder_data+0x590>)
 800066a:	2100      	movs	r1, #0
 800066c:	54d1      	strb	r1, [r2, r3]
				}
				break;
 800066e:	e0a8      	b.n	80007c2 <read_encoder_data+0x55e>
 8000670:	e0a7      	b.n	80007c2 <read_encoder_data+0x55e>
			case STATE_10:
				if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a5a      	ldr	r2, [pc, #360]	@ (80007e0 <read_encoder_data+0x57c>)
 8000676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4959      	ldr	r1, [pc, #356]	@ (80007e4 <read_encoder_data+0x580>)
 800067e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 f997 	bl	80029b8 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d11c      	bne.n	80006ca <read_encoder_data+0x466>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a55      	ldr	r2, [pc, #340]	@ (80007e8 <read_encoder_data+0x584>)
 8000694:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	4954      	ldr	r1, [pc, #336]	@ (80007ec <read_encoder_data+0x588>)
 800069c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006a0:	4619      	mov	r1, r3
 80006a2:	4610      	mov	r0, r2
 80006a4:	f002 f988 	bl	80029b8 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10d      	bne.n	80006ca <read_encoder_data+0x466>
					encoder_pulse[i] += 1;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4a4f      	ldr	r2, [pc, #316]	@ (80007f0 <read_encoder_data+0x58c>)
 80006b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	3201      	adds	r2, #1
 80006ba:	494d      	ldr	r1, [pc, #308]	@ (80007f0 <read_encoder_data+0x58c>)
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_00;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a4c      	ldr	r2, [pc, #304]	@ (80007f4 <read_encoder_data+0x590>)
 80006c4:	2100      	movs	r1, #0
 80006c6:	54d1      	strb	r1, [r2, r3]
 80006c8:	e071      	b.n	80007ae <read_encoder_data+0x54a>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a44      	ldr	r2, [pc, #272]	@ (80007e0 <read_encoder_data+0x57c>)
 80006ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4943      	ldr	r1, [pc, #268]	@ (80007e4 <read_encoder_data+0x580>)
 80006d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006da:	4619      	mov	r1, r3
 80006dc:	4610      	mov	r0, r2
 80006de:	f002 f96b 	bl	80029b8 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01c      	beq.n	8000722 <read_encoder_data+0x4be>
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4a3f      	ldr	r2, [pc, #252]	@ (80007e8 <read_encoder_data+0x584>)
 80006ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	493e      	ldr	r1, [pc, #248]	@ (80007ec <read_encoder_data+0x588>)
 80006f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4610      	mov	r0, r2
 80006fc:	f002 f95c 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d00d      	beq.n	8000722 <read_encoder_data+0x4be>
					encoder_pulse[i] -= 1;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4a39      	ldr	r2, [pc, #228]	@ (80007f0 <read_encoder_data+0x58c>)
 800070a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3a01      	subs	r2, #1
 8000712:	4937      	ldr	r1, [pc, #220]	@ (80007f0 <read_encoder_data+0x58c>)
 8000714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					state[i] = STATE_11;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4a36      	ldr	r2, [pc, #216]	@ (80007f4 <read_encoder_data+0x590>)
 800071c:	2102      	movs	r1, #2
 800071e:	54d1      	strb	r1, [r2, r3]
 8000720:	e045      	b.n	80007ae <read_encoder_data+0x54a>
				}else if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && !HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a2e      	ldr	r2, [pc, #184]	@ (80007e0 <read_encoder_data+0x57c>)
 8000726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	492d      	ldr	r1, [pc, #180]	@ (80007e4 <read_encoder_data+0x580>)
 800072e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000732:	4619      	mov	r1, r3
 8000734:	4610      	mov	r0, r2
 8000736:	f002 f93f 	bl	80029b8 <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d013      	beq.n	8000768 <read_encoder_data+0x504>
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4a29      	ldr	r2, [pc, #164]	@ (80007e8 <read_encoder_data+0x584>)
 8000744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4928      	ldr	r1, [pc, #160]	@ (80007ec <read_encoder_data+0x588>)
 800074c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f002 f930 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d104      	bne.n	8000768 <read_encoder_data+0x504>
					state[i] = STATE_10;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4a24      	ldr	r2, [pc, #144]	@ (80007f4 <read_encoder_data+0x590>)
 8000762:	2103      	movs	r1, #3
 8000764:	54d1      	strb	r1, [r2, r3]
 8000766:	e022      	b.n	80007ae <read_encoder_data+0x54a>
				}else if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i]) && HAL_GPIO_ReadPin(ENCODER_B_GPIO[i], ENCODER_B_PIN[i])){
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <read_encoder_data+0x57c>)
 800076c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	491c      	ldr	r1, [pc, #112]	@ (80007e4 <read_encoder_data+0x580>)
 8000774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000778:	4619      	mov	r1, r3
 800077a:	4610      	mov	r0, r2
 800077c:	f002 f91c 	bl	80029b8 <HAL_GPIO_ReadPin>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d11f      	bne.n	80007c6 <read_encoder_data+0x562>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <read_encoder_data+0x584>)
 800078a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4916      	ldr	r1, [pc, #88]	@ (80007ec <read_encoder_data+0x588>)
 8000792:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f002 f90d 	bl	80029b8 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d010      	beq.n	80007c6 <read_encoder_data+0x562>
					state[i] = STATE_01;
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <read_encoder_data+0x590>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	54d1      	strb	r1, [r2, r3]
				}
				break;
 80007ac:	e00b      	b.n	80007c6 <read_encoder_data+0x562>
 80007ae:	e00a      	b.n	80007c6 <read_encoder_data+0x562>
			default:
				state[i]=STATE_00;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <read_encoder_data+0x590>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	54d1      	strb	r1, [r2, r3]
				break;
 80007b8:	e006      	b.n	80007c8 <read_encoder_data+0x564>
				break;
 80007ba:	bf00      	nop
 80007bc:	e004      	b.n	80007c8 <read_encoder_data+0x564>
				break;
 80007be:	bf00      	nop
 80007c0:	e002      	b.n	80007c8 <read_encoder_data+0x564>
				break;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <read_encoder_data+0x564>
				break;
 80007c6:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++){
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	3301      	adds	r3, #1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	f67f ad4d 	bls.w	8000270 <read_encoder_data+0xc>
		}
	}
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000010 	.word	0x20000010
 80007e8:	20000018 	.word	0x20000018
 80007ec:	20000028 	.word	0x20000028
 80007f0:	200000cc 	.word	0x200000cc
 80007f4:	200000dc 	.word	0x200000dc

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080c:	4b4b      	ldr	r3, [pc, #300]	@ (800093c <MX_GPIO_Init+0x144>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a4a      	ldr	r2, [pc, #296]	@ (800093c <MX_GPIO_Init+0x144>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b48      	ldr	r3, [pc, #288]	@ (800093c <MX_GPIO_Init+0x144>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000824:	4b45      	ldr	r3, [pc, #276]	@ (800093c <MX_GPIO_Init+0x144>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a44      	ldr	r2, [pc, #272]	@ (800093c <MX_GPIO_Init+0x144>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b42      	ldr	r3, [pc, #264]	@ (800093c <MX_GPIO_Init+0x144>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0320 	and.w	r3, r3, #32
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b3f      	ldr	r3, [pc, #252]	@ (800093c <MX_GPIO_Init+0x144>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a3e      	ldr	r2, [pc, #248]	@ (800093c <MX_GPIO_Init+0x144>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <MX_GPIO_Init+0x144>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000854:	4b39      	ldr	r3, [pc, #228]	@ (800093c <MX_GPIO_Init+0x144>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a38      	ldr	r2, [pc, #224]	@ (800093c <MX_GPIO_Init+0x144>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x144>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0308 	and.w	r3, r3, #8
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000872:	4833      	ldr	r0, [pc, #204]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000874:	f002 f8b7 	bl	80029e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|INPUT_LOAD_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800087e:	4831      	ldr	r0, [pc, #196]	@ (8000944 <MX_GPIO_Init+0x14c>)
 8000880:	f002 f8b1 	bl	80029e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2124      	movs	r1, #36	@ 0x24
 8000888:	482f      	ldr	r0, [pc, #188]	@ (8000948 <MX_GPIO_Init+0x150>)
 800088a:	f002 f8ac 	bl	80029e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin;
 800088e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	4826      	ldr	r0, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x148>)
 80008a8:	f001 fef2 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|INPUT_LOAD_Pin;
 80008ac:	f248 0302 	movw	r3, #32770	@ 0x8002
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	481f      	ldr	r0, [pc, #124]	@ (8000944 <MX_GPIO_Init+0x14c>)
 80008c6:	f001 fee3 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_DIR_Pin;
 80008ca:	2324      	movs	r3, #36	@ 0x24
 80008cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0310 	add.w	r3, r7, #16
 80008de:	4619      	mov	r1, r3
 80008e0:	4819      	ldr	r0, [pc, #100]	@ (8000948 <MX_GPIO_Init+0x150>)
 80008e2:	f001 fed5 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 80008e6:	f24f 2308 	movw	r3, #61960	@ 0xf208
 80008ea:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	@ (8000948 <MX_GPIO_Init+0x150>)
 80008fc:	f001 fec8 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8000900:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	480a      	ldr	r0, [pc, #40]	@ (8000940 <MX_GPIO_Init+0x148>)
 8000916:	f001 febb 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4807      	ldr	r0, [pc, #28]	@ (800094c <MX_GPIO_Init+0x154>)
 800092e:	f001 feaf 	bl	8002690 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40011000 	.word	0x40011000
 8000944:	40010800 	.word	0x40010800
 8000948:	40010c00 	.word	0x40010c00
 800094c:	40011400 	.word	0x40011400

08000950 <cal_ang>:
 *      Author: Windows
 */

#include "joystick.h"

uint16_t cal_ang(uint8_t value){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	return ((value >> 3)*15);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	b29b      	uxth	r3, r3
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <check_buffer_state>:

void check_buffer_state() {
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
	if(buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 8000978:	4b40      	ldr	r3, [pc, #256]	@ (8000a7c <check_buffer_state+0x108>)
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10d      	bne.n	800099c <check_buffer_state+0x28>
 8000980:	4b3e      	ldr	r3, [pc, #248]	@ (8000a7c <check_buffer_state+0x108>)
 8000982:	799b      	ldrb	r3, [r3, #6]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d109      	bne.n	800099c <check_buffer_state+0x28>
		move_state = STOP;
 8000988:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <check_buffer_state+0x10c>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		servo_state = SERVO_INACTIVE;
 800098e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a84 <check_buffer_state+0x110>)
 8000990:	2202      	movs	r2, #2
 8000992:	701a      	strb	r2, [r3, #0]
		sm_state = SM_INACTIVE;
 8000994:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <check_buffer_state+0x114>)
 8000996:	2202      	movs	r2, #2
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e02e      	b.n	80009fa <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == FW_DATA) {
 800099c:	4b37      	ldr	r3, [pc, #220]	@ (8000a7c <check_buffer_state+0x108>)
 800099e:	795b      	ldrb	r3, [r3, #5]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d107      	bne.n	80009b4 <check_buffer_state+0x40>
 80009a4:	4b35      	ldr	r3, [pc, #212]	@ (8000a7c <check_buffer_state+0x108>)
 80009a6:	799b      	ldrb	r3, [r3, #6]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d103      	bne.n	80009b4 <check_buffer_state+0x40>
		move_state = FORWARD;
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <check_buffer_state+0x10c>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	e022      	b.n	80009fa <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == BW_DATA) {
 80009b4:	4b31      	ldr	r3, [pc, #196]	@ (8000a7c <check_buffer_state+0x108>)
 80009b6:	795b      	ldrb	r3, [r3, #5]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d107      	bne.n	80009cc <check_buffer_state+0x58>
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <check_buffer_state+0x108>)
 80009be:	799b      	ldrb	r3, [r3, #6]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d103      	bne.n	80009cc <check_buffer_state+0x58>
		move_state = BACKWARD;
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <check_buffer_state+0x10c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e016      	b.n	80009fa <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == LT_DATA) {
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <check_buffer_state+0x108>)
 80009ce:	795b      	ldrb	r3, [r3, #5]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <check_buffer_state+0x70>
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <check_buffer_state+0x108>)
 80009d6:	799b      	ldrb	r3, [r3, #6]
 80009d8:	2b04      	cmp	r3, #4
 80009da:	d103      	bne.n	80009e4 <check_buffer_state+0x70>
		move_state = LEFT;
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <check_buffer_state+0x10c>)
 80009de:	2203      	movs	r2, #3
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e00a      	b.n	80009fa <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == RT_DATA) {
 80009e4:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <check_buffer_state+0x108>)
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d106      	bne.n	80009fa <check_buffer_state+0x86>
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <check_buffer_state+0x108>)
 80009ee:	799b      	ldrb	r3, [r3, #6]
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	d102      	bne.n	80009fa <check_buffer_state+0x86>
		move_state = RIGHT;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <check_buffer_state+0x10c>)
 80009f6:	2204      	movs	r2, #4
 80009f8:	701a      	strb	r2, [r3, #0]
	}
	if(buffer[5] == 0x04 && buffer[6] == 0x00){ // TRIANGLE
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <check_buffer_state+0x108>)
 80009fc:	795b      	ldrb	r3, [r3, #5]
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d107      	bne.n	8000a12 <check_buffer_state+0x9e>
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <check_buffer_state+0x108>)
 8000a04:	799b      	ldrb	r3, [r3, #6]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <check_buffer_state+0x9e>
		sm_state = UP_SM;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <check_buffer_state+0x114>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e02f      	b.n	8000a72 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x10 && buffer[6] == 0x00){ // X
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <check_buffer_state+0x108>)
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	d107      	bne.n	8000a2a <check_buffer_state+0xb6>
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <check_buffer_state+0x108>)
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <check_buffer_state+0xb6>
		sm_state = DOWN_SM;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <check_buffer_state+0x114>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e023      	b.n	8000a72 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x08 && buffer[6] == 0x00){ // CIRCLE
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <check_buffer_state+0x108>)
 8000a2c:	795b      	ldrb	r3, [r3, #5]
 8000a2e:	2b08      	cmp	r3, #8
 8000a30:	d107      	bne.n	8000a42 <check_buffer_state+0xce>
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <check_buffer_state+0x108>)
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d103      	bne.n	8000a42 <check_buffer_state+0xce>
		servo_state = SERVO_CLOSE;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <check_buffer_state+0x110>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
 8000a40:	e017      	b.n	8000a72 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x20 && buffer[6] == 0x00){ // SQUARE
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <check_buffer_state+0x108>)
 8000a44:	795b      	ldrb	r3, [r3, #5]
 8000a46:	2b20      	cmp	r3, #32
 8000a48:	d107      	bne.n	8000a5a <check_buffer_state+0xe6>
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <check_buffer_state+0x108>)
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <check_buffer_state+0xe6>
		servo_state = SERVO_OPEN;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <check_buffer_state+0x110>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e00b      	b.n	8000a72 <check_buffer_state+0xfe>
	}else if(buffer[5] == BZ_DATA && buffer[6] == 0x00){ //BUTTON START
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <check_buffer_state+0x108>)
 8000a5c:	795b      	ldrb	r3, [r3, #5]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d107      	bne.n	8000a72 <check_buffer_state+0xfe>
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <check_buffer_state+0x108>)
 8000a64:	799b      	ldrb	r3, [r3, #6]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <check_buffer_state+0xfe>
		move_state = BUZZER;
 8000a6a:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <check_buffer_state+0x10c>)
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000a70:	e7ff      	b.n	8000a72 <check_buffer_state+0xfe>
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	2000025c 	.word	0x2000025c
 8000a80:	20000265 	.word	0x20000265
 8000a84:	20000050 	.word	0x20000050
 8000a88:	20000051 	.word	0x20000051

08000a8c <check_buffer_state_1>:

/*
 * Joystick
 *
 */
void check_buffer_state_1() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	uint16_t ang = cal_ang(buffer[6]);
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <check_buffer_state_1+0x7c>)
 8000a94:	799b      	ldrb	r3, [r3, #6]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff5a 	bl	8000950 <cal_ang>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	80fb      	strh	r3, [r7, #6]
	if (buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <check_buffer_state_1+0x7c>)
 8000aa2:	795b      	ldrb	r3, [r3, #5]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d107      	bne.n	8000ab8 <check_buffer_state_1+0x2c>
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <check_buffer_state_1+0x7c>)
 8000aaa:	799b      	ldrb	r3, [r3, #6]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <check_buffer_state_1+0x2c>
		move_state = STOP;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <check_buffer_state_1+0x80>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e023      	b.n	8000b00 <check_buffer_state_1+0x74>
	}
	else if (ang > 45 && ang <= 135){
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	2b2d      	cmp	r3, #45	@ 0x2d
 8000abc:	d906      	bls.n	8000acc <check_buffer_state_1+0x40>
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	2b87      	cmp	r3, #135	@ 0x87
 8000ac2:	d803      	bhi.n	8000acc <check_buffer_state_1+0x40>
		move_state = FORWARD;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <check_buffer_state_1+0x80>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e019      	b.n	8000b00 <check_buffer_state_1+0x74>
	}
	else if (ang <= 225){
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	2be1      	cmp	r3, #225	@ 0xe1
 8000ad0:	d803      	bhi.n	8000ada <check_buffer_state_1+0x4e>
		move_state = LEFT;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <check_buffer_state_1+0x80>)
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	701a      	strb	r2, [r3, #0]
		move_state = BACKWARD;
	}
	else if (ang <= 45 || ang >315){
		move_state = RIGHT;
	}
}
 8000ad8:	e012      	b.n	8000b00 <check_buffer_state_1+0x74>
	else if (ang <= 315){
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8000ae0:	d203      	bcs.n	8000aea <check_buffer_state_1+0x5e>
		move_state = BACKWARD;
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <check_buffer_state_1+0x80>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	e00a      	b.n	8000b00 <check_buffer_state_1+0x74>
	else if (ang <= 45 || ang >315){
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	2b2d      	cmp	r3, #45	@ 0x2d
 8000aee:	d903      	bls.n	8000af8 <check_buffer_state_1+0x6c>
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f5b3 7f9e 	cmp.w	r3, #316	@ 0x13c
 8000af6:	d303      	bcc.n	8000b00 <check_buffer_state_1+0x74>
		move_state = RIGHT;
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <check_buffer_state_1+0x80>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	701a      	strb	r2, [r3, #0]
}
 8000afe:	e7ff      	b.n	8000b00 <check_buffer_state_1+0x74>
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000025c 	.word	0x2000025c
 8000b0c:	20000265 	.word	0x20000265

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ec      	sub	sp, #432	@ 0x1b0
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f001 fb09 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f8d9 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f7ff fe6b 	bl	80007f8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000b22:	f000 fd17 	bl	8001554 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000b26:	f000 fc6f 	bl	8001408 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b2a:	f000 fcb9 	bl	80014a0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000b2e:	f000 fe15 	bl	800175c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000b32:	f001 f9ed 	bl	8001f10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b36:	f001 fa15 	bl	8001f64 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000b3a:	f000 fd99 	bl	8001670 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000b3e:	f000 f90c 	bl	8000d5a <system_init>
  /*
   *
   * TEST DATA ENCODER
   *
   */
  uint8_t count = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
  int32_t a = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
  int32_t b = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  int32_t c = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  int32_t d = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  char wheel1[100];
  char wheel2[100];
  char wheel3[100];
  char wheel4[100];

  char x = 255;
 8000b60:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000b64:	f2a3 13a9 	subw	r3, r3, #425	@ 0x1a9
 8000b68:	22ff      	movs	r2, #255	@ 0xff
 8000b6a:	701a      	strb	r2, [r3, #0]
  char y = ':';
 8000b6c:	233a      	movs	r3, #58	@ 0x3a
 8000b6e:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  uint8_t bytes[4];

  while (1)
  {
	  if(flag_timer2 == 1){
 8000b72:	4b51      	ldr	r3, [pc, #324]	@ (8000cb8 <main+0x1a8>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d1fb      	bne.n	8000b72 <main+0x62>
		  flag_timer2 = 0;
 8000b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb8 <main+0x1a8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	801a      	strh	r2, [r3, #0]
		  count = (count + 1) % 40;
 8000b80:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	4b4d      	ldr	r3, [pc, #308]	@ (8000cbc <main+0x1ac>)
 8000b88:	fb83 1302 	smull	r1, r3, r3, r2
 8000b8c:	1119      	asrs	r1, r3, #4
 8000b8e:	17d3      	asrs	r3, r2, #31
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	460b      	mov	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1ad1      	subs	r1, r2, r3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	f887 31af 	strb.w	r3, [r7, #431]	@ 0x1af
		  if(count == 0){
 8000ba2:	f897 31af 	ldrb.w	r3, [r7, #431]	@ 0x1af
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d17e      	bne.n	8000ca8 <main+0x198>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bae:	4844      	ldr	r0, [pc, #272]	@ (8000cc0 <main+0x1b0>)
 8000bb0:	f001 ff31 	bl	8002a16 <HAL_GPIO_TogglePin>
			  HAL_UART_Transmit(&huart2, (void*)wheel1, sprintf((void*)wheel1,"%ld",abs(encoder_pulse[0])), 10);
 8000bb4:	4b43      	ldr	r3, [pc, #268]	@ (8000cc4 <main+0x1b4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bbc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bc0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8000bc4:	4940      	ldr	r1, [pc, #256]	@ (8000cc8 <main+0x1b8>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fba2 	bl	8005310 <siprintf>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	483d      	ldr	r0, [pc, #244]	@ (8000ccc <main+0x1bc>)
 8000bd8:	f003 fd71 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 8000bdc:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8000be0:	4619      	mov	r1, r3
 8000be2:	230a      	movs	r3, #10
 8000be4:	2201      	movs	r2, #1
 8000be6:	4839      	ldr	r0, [pc, #228]	@ (8000ccc <main+0x1bc>)
 8000be8:	f003 fd69 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel2, sprintf((void*)wheel2,"%ld",abs(encoder_pulse[1])), 10);
 8000bec:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <main+0x1b4>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bf4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bf8:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000bfc:	4932      	ldr	r1, [pc, #200]	@ (8000cc8 <main+0x1b8>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f004 fb86 	bl	8005310 <siprintf>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8000c0c:	230a      	movs	r3, #10
 8000c0e:	482f      	ldr	r0, [pc, #188]	@ (8000ccc <main+0x1bc>)
 8000c10:	f003 fd55 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 8000c14:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8000c18:	4619      	mov	r1, r3
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	482b      	ldr	r0, [pc, #172]	@ (8000ccc <main+0x1bc>)
 8000c20:	f003 fd4d 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel3, sprintf((void*)wheel3,"%ld",abs(encoder_pulse[2])), 10);
 8000c24:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <main+0x1b4>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c2c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c34:	4924      	ldr	r1, [pc, #144]	@ (8000cc8 <main+0x1b8>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fb6a 	bl	8005310 <siprintf>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000c44:	230a      	movs	r3, #10
 8000c46:	4821      	ldr	r0, [pc, #132]	@ (8000ccc <main+0x1bc>)
 8000c48:	f003 fd39 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 8000c4c:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8000c50:	4619      	mov	r1, r3
 8000c52:	230a      	movs	r3, #10
 8000c54:	2201      	movs	r2, #1
 8000c56:	481d      	ldr	r0, [pc, #116]	@ (8000ccc <main+0x1bc>)
 8000c58:	f003 fd31 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel4, sprintf((void*)wheel4,"%ld",abs(encoder_pulse[3])), 10);
 8000c5c:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <main+0x1b4>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c64:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4916      	ldr	r1, [pc, #88]	@ (8000cc8 <main+0x1b8>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fb4e 	bl	8005310 <siprintf>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	4813      	ldr	r0, [pc, #76]	@ (8000ccc <main+0x1bc>)
 8000c80:	f003 fd1d 	bl	80046be <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &x, 1, 10);
 8000c84:	1df9      	adds	r1, r7, #7
 8000c86:	230a      	movs	r3, #10
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4810      	ldr	r0, [pc, #64]	@ (8000ccc <main+0x1bc>)
 8000c8c:	f003 fd17 	bl	80046be <HAL_UART_Transmit>

			  encoder_pulse[0] = 0;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <main+0x1b4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
			  encoder_pulse[1] = 0;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <main+0x1b4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
			  encoder_pulse[2] = 0;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <main+0x1b4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
			  encoder_pulse[3] = 0;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <main+0x1b4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
		  }
		  move_process();
 8000ca8:	f001 f880 	bl	8001dac <move_process>
		  servo_process();
 8000cac:	f001 f8b8 	bl	8001e20 <servo_process>
		  sm_process();
 8000cb0:	f001 f8f4 	bl	8001e9c <sm_process>
	  if(flag_timer2 == 1){
 8000cb4:	e75d      	b.n	8000b72 <main+0x62>
 8000cb6:	bf00      	nop
 8000cb8:	200000e0 	.word	0x200000e0
 8000cbc:	66666667 	.word	0x66666667
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	200000cc 	.word	0x200000cc
 8000cc8:	08005c88 	.word	0x08005c88
 8000ccc:	200002b8 	.word	0x200002b8

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b090      	sub	sp, #64	@ 0x40
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	2228      	movs	r2, #40	@ 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fb36 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d04:	2302      	movs	r3, #2
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d0e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fe95 	bl	8002a48 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d24:	f000 f82d 	bl	8000d82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 f902 	bl	8002f4c <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d4e:	f000 f818 	bl	8000d82 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3740      	adds	r7, #64	@ 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
	stop();
 8000d5e:	f000 f913 	bl	8000f88 <stop>
	timer_init();
 8000d62:	f000 f9e5 	bl	8001130 <timer_init>
	servo_init(3);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f000 f97e 	bl	8001068 <servo_init>
	buzzer_init();
 8000d6c:	f7ff fa5a 	bl	8000224 <buzzer_init>
	dc_init();
 8000d70:	f000 f80e 	bl	8000d90 <dc_init>
	uart_init();
 8000d74:	f000 fedc 	bl	8001b30 <uart_init>
	set_timer2(50);
 8000d78:	2032      	movs	r0, #50	@ 0x32
 8000d7a:	f000 f9e3 	bl	8001144 <set_timer2>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d86:	b672      	cpsid	i
}
 8000d88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8a:	bf00      	nop
 8000d8c:	e7fd      	b.n	8000d8a <Error_Handler+0x8>
	...

08000d90 <dc_init>:
#define		UP			1
#define 	DOWN 		0

uint32_t dc_channel[4] = {TIM_CHANNEL_4, TIM_CHANNEL_3, TIM_CHANNEL_1, TIM_CHANNEL_2};

void dc_init(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	e00a      	b.n	8000db2 <dc_init+0x22>
		HAL_TIM_PWM_Start(&htim8, dc_channel[i]);
 8000d9c:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <dc_init+0x34>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <dc_init+0x38>)
 8000da8:	f002 fb5e 	bl	8003468 <HAL_TIM_PWM_Start>
	for(int i=0;i<4;i++){
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3301      	adds	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	ddf1      	ble.n	8000d9c <dc_init+0xc>
	}
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000030 	.word	0x20000030
 8000dc8:	20000210 	.word	0x20000210

08000dcc <setSpeed>:

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <setSpeed+0x6c>)
 8000de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d104      	bne.n	8000df4 <setSpeed+0x28>
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <setSpeed+0x70>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	79ba      	ldrb	r2, [r7, #6]
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000df2:	e01b      	b.n	8000e2c <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e38 <setSpeed+0x6c>)
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d104      	bne.n	8000e0c <setSpeed+0x40>
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <setSpeed+0x70>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	79bb      	ldrb	r3, [r7, #6]
 8000e08:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e0a:	e00f      	b.n	8000e2c <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a09      	ldr	r2, [pc, #36]	@ (8000e38 <setSpeed+0x6c>)
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d104      	bne.n	8000e24 <setSpeed+0x58>
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <setSpeed+0x70>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000e22:	e003      	b.n	8000e2c <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <setSpeed+0x70>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000030 	.word	0x20000030
 8000e3c:	20000210 	.word	0x20000210

08000e40 <dc1Move>:

void dc1Move(int duty_cycle){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e54:	480e      	ldr	r0, [pc, #56]	@ (8000e90 <dc1Move+0x50>)
 8000e56:	f001 fdc6 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff ffb3 	bl	8000dcc <setSpeed>
	}
	if(duty_cycle < 0){
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da0d      	bge.n	8000e88 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <dc1Move+0x50>)
 8000e74:	f001 fdb7 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff ffa2 	bl	8000dcc <setSpeed>
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40011000 	.word	0x40011000

08000e94 <dc2Move>:

void dc2Move(int duty_cycle){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ea8:	480e      	ldr	r0, [pc, #56]	@ (8000ee4 <dc2Move+0x50>)
 8000eaa:	f001 fd9c 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff ff89 	bl	8000dcc <setSpeed>
	}
	if(duty_cycle < 0){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da0d      	bge.n	8000edc <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <dc2Move+0x50>)
 8000ec8:	f001 fd8d 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff ff78 	bl	8000dcc <setSpeed>
	}
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40011000 	.word	0x40011000

08000ee8 <dc3Move>:

void dc3Move(int duty_cycle){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0a      	blt.n	8000f0c <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2104      	movs	r1, #4
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <dc3Move+0x4c>)
 8000efc:	f001 fd73 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff ff60 	bl	8000dcc <setSpeed>
	}
	if(duty_cycle < 0){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da0c      	bge.n	8000f2c <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2104      	movs	r1, #4
 8000f16:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <dc3Move+0x4c>)
 8000f18:	f001 fd65 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	425b      	negs	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	2003      	movs	r0, #3
 8000f28:	f7ff ff50 	bl	8000dcc <setSpeed>
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <dc4Move>:

void dc4Move(int duty_cycle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0a      	blt.n	8000f5c <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	480e      	ldr	r0, [pc, #56]	@ (8000f84 <dc4Move+0x4c>)
 8000f4c:	f001 fd4b 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4619      	mov	r1, r3
 8000f56:	2004      	movs	r0, #4
 8000f58:	f7ff ff38 	bl	8000dcc <setSpeed>
	}
	if(duty_cycle < 0){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da0c      	bge.n	8000f7c <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2102      	movs	r1, #2
 8000f66:	4807      	ldr	r0, [pc, #28]	@ (8000f84 <dc4Move+0x4c>)
 8000f68:	f001 fd3d 	bl	80029e6 <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	425b      	negs	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	2004      	movs	r0, #4
 8000f78:	f7ff ff28 	bl	8000dcc <setSpeed>
	}
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010800 	.word	0x40010800

08000f88 <stop>:


void stop(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	dc1Move(0);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff ff57 	bl	8000e40 <dc1Move>
	dc2Move(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff ff7e 	bl	8000e94 <dc2Move>
	dc3Move(0);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff ffa5 	bl	8000ee8 <dc3Move>
	dc4Move(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff ffca 	bl	8000f38 <dc4Move>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <forward>:
//         left		  ---+----     right		↻: rotateRight
//           backLeft    |  backRight
//                  backwards
//

void forward(int speed){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff45 	bl	8000e40 <dc1Move>
	dc2Move(speed);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff6c 	bl	8000e94 <dc2Move>
	dc3Move(speed);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff93 	bl	8000ee8 <dc3Move>
	dc4Move(speed);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb8 	bl	8000f38 <dc4Move>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <backwards>:

void backwards(int speed){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	425b      	negs	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff2f 	bl	8000e40 <dc1Move>
	dc2Move(-speed);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <dc2Move>
	dc3Move(-speed);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	425b      	negs	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff79 	bl	8000ee8 <dc3Move>
	dc4Move(-speed);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff9c 	bl	8000f38 <dc4Move>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <rotateLeft>:
	dc2Move(speed);
	dc3Move(speed);
	dc4Move(-speed);
}

void rotateLeft(int speed){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	425b      	negs	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff13 	bl	8000e40 <dc1Move>
	dc2Move(-speed);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	425b      	negs	r3, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff38 	bl	8000e94 <dc2Move>
	dc3Move(speed);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff5f 	bl	8000ee8 <dc3Move>
	dc4Move(speed);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff84 	bl	8000f38 <dc4Move>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <rotateRight>:

void rotateRight(int speed){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fefd 	bl	8000e40 <dc1Move>
	dc2Move(speed);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff24 	bl	8000e94 <dc2Move>
	dc3Move(-speed);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	425b      	negs	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff49 	bl	8000ee8 <dc3Move>
	dc4Move(-speed);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	425b      	negs	r3, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff6c 	bl	8000f38 <dc4Move>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <servo_init>:
void servo3_set_duty_cycle(uint16_t _duty_cycle){
	duty_cycle = _duty_cycle;
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,duty_cycle);
}

void servo_init(uint8_t id){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(&htim4, servo_channel[id]);
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <servo_init+0x24>)
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	4619      	mov	r1, r3
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <servo_init+0x28>)
 800107e:	f002 f9f3 	bl	8003468 <HAL_TIM_PWM_Start>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000040 	.word	0x20000040
 8001090:	20000180 	.word	0x20000180

08001094 <servo_set_angle>:

/*
 * the range is from 20 to 130 (0 to 180 degree)
 * id 1,2,3
 */
void servo_set_angle(uint8_t id, uint16_t angle){
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	460a      	mov	r2, r1
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	80bb      	strh	r3, [r7, #4]
	if(angle < 0 || angle > 180) return;
 80010a4:	88bb      	ldrh	r3, [r7, #4]
 80010a6:	2bb4      	cmp	r3, #180	@ 0xb4
 80010a8:	d836      	bhi.n	8001118 <servo_set_angle+0x84>
	uint16_t duty_cycle_ = (angle*110)/180 + 20;
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	226e      	movs	r2, #110	@ 0x6e
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <servo_set_angle+0x90>)
 80010b4:	fb82 1203 	smull	r1, r2, r2, r3
 80010b8:	441a      	add	r2, r3
 80010ba:	11d2      	asrs	r2, r2, #7
 80010bc:	17db      	asrs	r3, r3, #31
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3314      	adds	r3, #20
 80010c4:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[id-1], duty_cycle_);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <servo_set_angle+0x94>)
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d104      	bne.n	80010de <servo_set_angle+0x4a>
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <servo_set_angle+0x98>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	89fa      	ldrh	r2, [r7, #14]
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34
 80010dc:	e01d      	b.n	800111a <servo_set_angle+0x86>
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <servo_set_angle+0x94>)
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d104      	bne.n	80010f6 <servo_set_angle+0x62>
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <servo_set_angle+0x98>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	6393      	str	r3, [r2, #56]	@ 0x38
 80010f4:	e011      	b.n	800111a <servo_set_angle+0x86>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <servo_set_angle+0x94>)
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	2b08      	cmp	r3, #8
 8001102:	d104      	bne.n	800110e <servo_set_angle+0x7a>
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <servo_set_angle+0x98>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800110c:	e005      	b.n	800111a <servo_set_angle+0x86>
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <servo_set_angle+0x98>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	e000      	b.n	800111a <servo_set_angle+0x86>
	if(angle < 0 || angle > 180) return;
 8001118:	bf00      	nop
}
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	b60b60b7 	.word	0xb60b60b7
 8001128:	20000040 	.word	0x20000040
 800112c:	20000180 	.word	0x20000180

08001130 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <timer_init+0x10>)
 8001136:	f002 f8e7 	bl	8003308 <HAL_TIM_Base_Start_IT>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000f0 	.word	0x200000f0

08001144 <set_timer2>:

void set_timer2(uint16_t duration){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800114e:	4a07      	ldr	r2, [pc, #28]	@ (800116c <set_timer2+0x28>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <set_timer2+0x28>)
 8001156:	881a      	ldrh	r2, [r3, #0]
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <set_timer2+0x2c>)
 800115a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <set_timer2+0x30>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	200000e4 	.word	0x200000e4
 8001170:	200000e2 	.word	0x200000e2
 8001174:	200000e0 	.word	0x200000e0

08001178 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001188:	d116      	bne.n	80011b8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d010      	beq.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800119c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011b2:	801a      	strh	r2, [r3, #0]
			}
		}
		read_encoder_data();
 80011b4:	f7ff f856 	bl	8000264 <read_encoder_data>
	}
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000e2 	.word	0x200000e2
 80011c4:	200000e0 	.word	0x200000e0
 80011c8:	200000e4 	.word	0x200000e4

080011cc <move_step_motor>:
 * direction :	0	->	down
 * 			 :	1	->	up
 * cycle	 : 	10 is safe enough
 */

void move_step_motor(GPIO_PinState directtion, uint16_t cycle){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, directtion);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	461a      	mov	r2, r3
 80011e0:	2120      	movs	r1, #32
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <move_step_motor+0x44>)
 80011e4:	f001 fbff 	bl	80029e6 <HAL_GPIO_WritePin>
	spr_counter = SPR * cycle;
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	22c8      	movs	r2, #200	@ 0xc8
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <move_step_motor+0x48>)
 80011f4:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY_CYCLE);
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <move_step_motor+0x4c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2232      	movs	r2, #50	@ 0x32
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <move_step_motor+0x4c>)
 8001202:	f002 f9eb 	bl	80035dc <HAL_TIM_PWM_Start_IT>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40010c00 	.word	0x40010c00
 8001214:	200000e8 	.word	0x200000e8
 8001218:	20000138 	.word	0x20000138

0800121c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10c      	bne.n	8001248 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		spr_counter--;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	4a07      	ldr	r2, [pc, #28]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001236:	6013      	str	r3, [r2, #0]
		if(spr_counter <= 0)
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001240:	2100      	movs	r1, #0
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8001244:	f002 fad2 	bl	80037ec <HAL_TIM_PWM_Stop_IT>
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40000400 	.word	0x40000400
 8001254:	200000e8 	.word	0x200000e8
 8001258:	20000138 	.word	0x20000138

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_MspInit+0x60>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_MspInit+0x60>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <NMI_Handler+0x4>

080012c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 ff52 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f002 fb23 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000f0 	.word	0x200000f0

0800132c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <TIM3_IRQHandler+0x10>)
 8001332:	f002 fb19 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000138 	.word	0x20000138

08001340 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM4_IRQHandler+0x10>)
 8001346:	f002 fb0f 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000180 	.word	0x20000180

08001354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <USART1_IRQHandler+0x10>)
 800135a:	f003 fa59 	bl	8004810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000270 	.word	0x20000270

08001368 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <USART2_IRQHandler+0x10>)
 800136e:	f003 fa4f 	bl	8004810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200002b8 	.word	0x200002b8

0800137c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <TIM5_IRQHandler+0x10>)
 8001382:	f002 faf1 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001c8 	.word	0x200001c8

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	@ (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f003 ffce 	bl	8005360 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	@ (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000c000 	.word	0x2000c000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	20000450 	.word	0x20000450

080013fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_TIM2_Init+0x94>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <MX_TIM2_Init+0x94>)
 800142e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <MX_TIM2_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <MX_TIM2_Init+0x94>)
 800143c:	2263      	movs	r2, #99	@ 0x63
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <MX_TIM2_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <MX_TIM2_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM2_Init+0x94>)
 800144e:	f001 ff0b 	bl	8003268 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001458:	f7ff fc93 	bl	8000d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM2_Init+0x94>)
 800146a:	f002 fc47 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001474:	f7ff fc85 	bl	8000d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	463b      	mov	r3, r7
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM2_Init+0x94>)
 8001486:	f002 fffb 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001490:	f7ff fc77 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200000f0 	.word	0x200000f0

080014a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
 80014be:	615a      	str	r2, [r3, #20]
 80014c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c2:	4b22      	ldr	r3, [pc, #136]	@ (800154c <MX_TIM3_Init+0xac>)
 80014c4:	4a22      	ldr	r2, [pc, #136]	@ (8001550 <MX_TIM3_Init+0xb0>)
 80014c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <MX_TIM3_Init+0xac>)
 80014ca:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80014ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_TIM3_Init+0xac>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80014d6:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <MX_TIM3_Init+0xac>)
 80014d8:	2263      	movs	r2, #99	@ 0x63
 80014da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_TIM3_Init+0xac>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_TIM3_Init+0xac>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e8:	4818      	ldr	r0, [pc, #96]	@ (800154c <MX_TIM3_Init+0xac>)
 80014ea:	f001 ff6d 	bl	80033c8 <HAL_TIM_PWM_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80014f4:	f7ff fc45 	bl	8000d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	4619      	mov	r1, r3
 8001506:	4811      	ldr	r0, [pc, #68]	@ (800154c <MX_TIM3_Init+0xac>)
 8001508:	f002 ffba 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001512:	f7ff fc36 	bl	8000d82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001516:	2360      	movs	r3, #96	@ 0x60
 8001518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	@ (800154c <MX_TIM3_Init+0xac>)
 800152e:	f002 fb23 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001538:	f7ff fc23 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <MX_TIM3_Init+0xac>)
 800153e:	f000 fa4b 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	@ 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000138 	.word	0x20000138
 8001550:	40000400 	.word	0x40000400

08001554 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	@ 0x38
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001584:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <MX_TIM4_Init+0x114>)
 8001586:	4a39      	ldr	r2, [pc, #228]	@ (800166c <MX_TIM4_Init+0x118>)
 8001588:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800158a:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <MX_TIM4_Init+0x114>)
 800158c:	f240 529f 	movw	r2, #1439	@ 0x59f
 8001590:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <MX_TIM4_Init+0x114>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001598:	4b33      	ldr	r3, [pc, #204]	@ (8001668 <MX_TIM4_Init+0x114>)
 800159a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800159e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ac:	482e      	ldr	r0, [pc, #184]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015ae:	f001 fe5b 	bl	8003268 <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80015b8:	f7ff fbe3 	bl	8000d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4827      	ldr	r0, [pc, #156]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015ca:	f002 fb97 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80015d4:	f7ff fbd5 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015d8:	4823      	ldr	r0, [pc, #140]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015da:	f001 fef5 	bl	80033c8 <HAL_TIM_PWM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80015e4:	f7ff fbcd 	bl	8000d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4619      	mov	r1, r3
 80015f6:	481c      	ldr	r0, [pc, #112]	@ (8001668 <MX_TIM4_Init+0x114>)
 80015f8:	f002 ff42 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001602:	f7ff fbbe 	bl	8000d82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001606:	2360      	movs	r3, #96	@ 0x60
 8001608:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	4619      	mov	r1, r3
 800161c:	4812      	ldr	r0, [pc, #72]	@ (8001668 <MX_TIM4_Init+0x114>)
 800161e:	f002 faab 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001628:	f7ff fbab 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2204      	movs	r2, #4
 8001630:	4619      	mov	r1, r3
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_TIM4_Init+0x114>)
 8001634:	f002 faa0 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800163e:	f7ff fba0 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2208      	movs	r2, #8
 8001646:	4619      	mov	r1, r3
 8001648:	4807      	ldr	r0, [pc, #28]	@ (8001668 <MX_TIM4_Init+0x114>)
 800164a:	f002 fa95 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001654:	f7ff fb95 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <MX_TIM4_Init+0x114>)
 800165a:	f000 f9bd 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 800165e:	bf00      	nop
 8001660:	3738      	adds	r7, #56	@ 0x38
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000180 	.word	0x20000180
 800166c:	40000800 	.word	0x40000800

08001670 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08e      	sub	sp, #56	@ 0x38
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001758 <MX_TIM5_Init+0xe8>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016a8:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80016ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016b6:	2263      	movs	r2, #99	@ 0x63
 80016b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016c6:	4823      	ldr	r0, [pc, #140]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016c8:	f001 fdce 	bl	8003268 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80016d2:	f7ff fb56 	bl	8000d82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e0:	4619      	mov	r1, r3
 80016e2:	481c      	ldr	r0, [pc, #112]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016e4:	f002 fb0a 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80016ee:	f7ff fb48 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016f2:	4818      	ldr	r0, [pc, #96]	@ (8001754 <MX_TIM5_Init+0xe4>)
 80016f4:	f001 fe68 	bl	80033c8 <HAL_TIM_PWM_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80016fe:	f7ff fb40 	bl	8000d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800170a:	f107 0320 	add.w	r3, r7, #32
 800170e:	4619      	mov	r1, r3
 8001710:	4810      	ldr	r0, [pc, #64]	@ (8001754 <MX_TIM5_Init+0xe4>)
 8001712:	f002 feb5 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800171c:	f7ff fb31 	bl	8000d82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	@ 0x60
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <MX_TIM5_Init+0xe4>)
 8001738:	f002 fa1e 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001742:	f7ff fb1e 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001746:	4803      	ldr	r0, [pc, #12]	@ (8001754 <MX_TIM5_Init+0xe4>)
 8001748:	f000 f946 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 800174c:	bf00      	nop
 800174e:	3738      	adds	r7, #56	@ 0x38
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200001c8 	.word	0x200001c8
 8001758:	40000c00 	.word	0x40000c00

0800175c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b092      	sub	sp, #72	@ 0x48
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f003 fde2 	bl	8005350 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800178c:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <MX_TIM8_Init+0x148>)
 800178e:	4a46      	ldr	r2, [pc, #280]	@ (80018a8 <MX_TIM8_Init+0x14c>)
 8001790:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8001792:	4b44      	ldr	r3, [pc, #272]	@ (80018a4 <MX_TIM8_Init+0x148>)
 8001794:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001798:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <MX_TIM8_Init+0x148>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80017a0:	4b40      	ldr	r3, [pc, #256]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017a2:	2263      	movs	r2, #99	@ 0x63
 80017a4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b3c      	ldr	r3, [pc, #240]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017b8:	483a      	ldr	r0, [pc, #232]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017ba:	f001 fe05 	bl	80033c8 <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80017c4:	f7ff fadd 	bl	8000d82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d4:	4619      	mov	r1, r3
 80017d6:	4833      	ldr	r0, [pc, #204]	@ (80018a4 <MX_TIM8_Init+0x148>)
 80017d8:	f002 fe52 	bl	8004480 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80017e2:	f7ff face 	bl	8000d82 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e6:	2360      	movs	r3, #96	@ 0x60
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ee:	2300      	movs	r3, #0
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	2200      	movs	r2, #0
 8001808:	4619      	mov	r1, r3
 800180a:	4826      	ldr	r0, [pc, #152]	@ (80018a4 <MX_TIM8_Init+0x148>)
 800180c:	f002 f9b4 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8001816:	f7ff fab4 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181e:	2204      	movs	r2, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4820      	ldr	r0, [pc, #128]	@ (80018a4 <MX_TIM8_Init+0x148>)
 8001824:	f002 f9a8 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800182e:	f7ff faa8 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001836:	2208      	movs	r2, #8
 8001838:	4619      	mov	r1, r3
 800183a:	481a      	ldr	r0, [pc, #104]	@ (80018a4 <MX_TIM8_Init+0x148>)
 800183c:	f002 f99c 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8001846:	f7ff fa9c 	bl	8000d82 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	220c      	movs	r2, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4814      	ldr	r0, [pc, #80]	@ (80018a4 <MX_TIM8_Init+0x148>)
 8001854:	f002 f990 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800185e:	f7ff fa90 	bl	8000d82 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001876:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <MX_TIM8_Init+0x148>)
 8001886:	f002 fe67 	bl	8004558 <HAL_TIMEx_ConfigBreakDeadTime>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8001890:	f7ff fa77 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001894:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <MX_TIM8_Init+0x148>)
 8001896:	f000 f89f 	bl	80019d8 <HAL_TIM_MspPostInit>

}
 800189a:	bf00      	nop
 800189c:	3748      	adds	r7, #72	@ 0x48
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000210 	.word	0x20000210
 80018a8:	40013400 	.word	0x40013400

080018ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018bc:	d114      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018be:	4b26      	ldr	r3, [pc, #152]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	61d3      	str	r3, [r2, #28]
 80018ca:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201c      	movs	r0, #28
 80018dc:	f000 fd5f 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018e0:	201c      	movs	r0, #28
 80018e2:	f000 fd78 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80018e6:	e032      	b.n	800194e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1b      	ldr	r2, [pc, #108]	@ (800195c <HAL_TIM_Base_MspInit+0xb0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d114      	bne.n	800191c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f2:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	4a18      	ldr	r2, [pc, #96]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	61d3      	str	r3, [r2, #28]
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	201e      	movs	r0, #30
 8001910:	f000 fd45 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001914:	201e      	movs	r0, #30
 8001916:	f000 fd5e 	bl	80023d6 <HAL_NVIC_EnableIRQ>
}
 800191a:	e018      	b.n	800194e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_TIM_Base_MspInit+0xb4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d113      	bne.n	800194e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <HAL_TIM_Base_MspInit+0xac>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2032      	movs	r0, #50	@ 0x32
 8001944:	f000 fd2b 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001948:	2032      	movs	r0, #50	@ 0x32
 800194a:	f000 fd44 	bl	80023d6 <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40000800 	.word	0x40000800
 8001960:	40000c00 	.word	0x40000c00

08001964 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <HAL_TIM_PWM_MspInit+0x68>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d114      	bne.n	80019a0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a15      	ldr	r2, [pc, #84]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	61d3      	str	r3, [r2, #28]
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	201d      	movs	r0, #29
 8001994:	f000 fd03 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001998:	201d      	movs	r0, #29
 800199a:	f000 fd1c 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800199e:	e010      	b.n	80019c2 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM8)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_TIM_PWM_MspInit+0x70>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d10b      	bne.n	80019c2 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80019b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019b4:	6193      	str	r3, [r2, #24]
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_TIM_PWM_MspInit+0x6c>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013400 	.word	0x40013400

080019d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	@ 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a46      	ldr	r2, [pc, #280]	@ (8001b0c <HAL_TIM_MspPostInit+0x134>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d12a      	bne.n	8001a4e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	4b45      	ldr	r3, [pc, #276]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a44      	ldr	r2, [pc, #272]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b42      	ldr	r3, [pc, #264]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a10:	2310      	movs	r3, #16
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	483c      	ldr	r0, [pc, #240]	@ (8001b14 <HAL_TIM_MspPostInit+0x13c>)
 8001a24:	f000 fe34 	bl	8002690 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001a28:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_TIM_MspPostInit+0x140>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a38:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a46:	4a34      	ldr	r2, [pc, #208]	@ (8001b18 <HAL_TIM_MspPostInit+0x140>)
 8001a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a4c:	e05a      	b.n	8001b04 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <HAL_TIM_MspPostInit+0x144>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d119      	bne.n	8001a8c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a70:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4823      	ldr	r0, [pc, #140]	@ (8001b14 <HAL_TIM_MspPostInit+0x13c>)
 8001a86:	f000 fe03 	bl	8002690 <HAL_GPIO_Init>
}
 8001a8a:	e03b      	b.n	8001b04 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a23      	ldr	r2, [pc, #140]	@ (8001b20 <HAL_TIM_MspPostInit+0x148>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d118      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4818      	ldr	r0, [pc, #96]	@ (8001b24 <HAL_TIM_MspPostInit+0x14c>)
 8001ac2:	f000 fde5 	bl	8002690 <HAL_GPIO_Init>
}
 8001ac6:	e01d      	b.n	8001b04 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a16      	ldr	r2, [pc, #88]	@ (8001b28 <HAL_TIM_MspPostInit+0x150>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d118      	bne.n	8001b04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6193      	str	r3, [r2, #24]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <HAL_TIM_MspPostInit+0x138>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001aea:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2302      	movs	r3, #2
 8001af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <HAL_TIM_MspPostInit+0x154>)
 8001b00:	f000 fdc6 	bl	8002690 <HAL_GPIO_Init>
}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	@ 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	40000c00 	.word	0x40000c00
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40013400 	.word	0x40013400
 8001b2c:	40011000 	.word	0x40011000

08001b30 <uart_init>:
uint8_t sm_state = SM_INACTIVE;

int servo_degree = 0;
int sm_height = 0;

void uart_init() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer1, 1);
 8001b34:	2201      	movs	r2, #1
 8001b36:	490b      	ldr	r1, [pc, #44]	@ (8001b64 <uart_init+0x34>)
 8001b38:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <uart_init+0x38>)
 8001b3a:	f002 fe43 	bl	80047c4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4908      	ldr	r1, [pc, #32]	@ (8001b64 <uart_init+0x34>)
 8001b42:	480a      	ldr	r0, [pc, #40]	@ (8001b6c <uart_init+0x3c>)
 8001b44:	f002 fe3e 	bl	80047c4 <HAL_UART_Receive_IT>
	move_state = STOP;
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <uart_init+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
	servo_state = SERVO_INACTIVE;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <uart_init+0x44>)
 8001b50:	2202      	movs	r2, #2
 8001b52:	701a      	strb	r2, [r3, #0]
	sm_state = SM_INACTIVE;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <uart_init+0x48>)
 8001b56:	2202      	movs	r2, #2
 8001b58:	701a      	strb	r2, [r3, #0]
	uart_state = WAITING;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <uart_init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000258 	.word	0x20000258
 8001b68:	200002b8 	.word	0x200002b8
 8001b6c:	20000270 	.word	0x20000270
 8001b70:	20000265 	.word	0x20000265
 8001b74:	20000050 	.word	0x20000050
 8001b78:	20000051 	.word	0x20000051
 8001b7c:	20000266 	.word	0x20000266

08001b80 <clear_buffer>:

void clear_buffer() {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 8; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	e006      	b.n	8001b9a <clear_buffer+0x1a>
		buffer[i] = 0x00;
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <clear_buffer+0x30>)
 8001b90:	2100      	movs	r1, #0
 8001b92:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++) {
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	3301      	adds	r3, #1
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	d9f5      	bls.n	8001b8c <clear_buffer+0xc>
	}
	idx = 0;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <clear_buffer+0x34>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	2000025c 	.word	0x2000025c
 8001bb4:	20000264 	.word	0x20000264

08001bb8 <check_function>:

void check_function(){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	if (buffer[1] == 0x00) {
 8001bbc:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <check_function+0xe4>)
 8001bbe:	785b      	ldrb	r3, [r3, #1]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d109      	bne.n	8001bd8 <check_function+0x20>
		move_state = STOP;
 8001bc4:	4b36      	ldr	r3, [pc, #216]	@ (8001ca0 <check_function+0xe8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
		servo_state = SERVO_INACTIVE;
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <check_function+0xec>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	701a      	strb	r2, [r3, #0]
		sm_state = SM_INACTIVE;
 8001bd0:	4b35      	ldr	r3, [pc, #212]	@ (8001ca8 <check_function+0xf0>)
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	701a      	strb	r2, [r3, #0]
		}
		else {
			check_buffer_state_1();
		}
	}
}
 8001bd6:	e05f      	b.n	8001c98 <check_function+0xe0>
	else if (buffer[2] == DIGITAL_MODE){
 8001bd8:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <check_function+0xe4>)
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d102      	bne.n	8001be6 <check_function+0x2e>
		check_buffer_state();
 8001be0:	f7fe fec8 	bl	8000974 <check_buffer_state>
}
 8001be4:	e058      	b.n	8001c98 <check_function+0xe0>
	else if (buffer[2] == JOYSTICK_MODE || buffer[2] == ACCELE_MODE){
 8001be6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <check_function+0xe4>)
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d003      	beq.n	8001bf6 <check_function+0x3e>
 8001bee:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <check_function+0xe4>)
 8001bf0:	789b      	ldrb	r3, [r3, #2]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d150      	bne.n	8001c98 <check_function+0xe0>
		if(buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <check_function+0xe4>)
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <check_function+0x62>
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <check_function+0xe4>)
 8001c00:	799b      	ldrb	r3, [r3, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <check_function+0x62>
				move_state = STOP;
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <check_function+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
				servo_state = SERVO_INACTIVE;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <check_function+0xec>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
				sm_state = SM_INACTIVE;
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <check_function+0xf0>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e03e      	b.n	8001c98 <check_function+0xe0>
		else if(buffer[5] == 0x04 && buffer[6] == 0x00){ // TRIANGLE
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <check_function+0xe4>)
 8001c1c:	795b      	ldrb	r3, [r3, #5]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d107      	bne.n	8001c32 <check_function+0x7a>
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <check_function+0xe4>)
 8001c24:	799b      	ldrb	r3, [r3, #6]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <check_function+0x7a>
			sm_state = UP_SM;
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <check_function+0xf0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e032      	b.n	8001c98 <check_function+0xe0>
		else if(buffer[5] == 0x10 && buffer[6] == 0x00){ // X
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <check_function+0xe4>)
 8001c34:	795b      	ldrb	r3, [r3, #5]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d107      	bne.n	8001c4a <check_function+0x92>
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <check_function+0xe4>)
 8001c3c:	799b      	ldrb	r3, [r3, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <check_function+0x92>
			sm_state = DOWN_SM;
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <check_function+0xf0>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e026      	b.n	8001c98 <check_function+0xe0>
		else if(buffer[5] == 0x08 && buffer[6] == 0x00){ // CIRCLE
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <check_function+0xe4>)
 8001c4c:	795b      	ldrb	r3, [r3, #5]
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d107      	bne.n	8001c62 <check_function+0xaa>
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <check_function+0xe4>)
 8001c54:	799b      	ldrb	r3, [r3, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d103      	bne.n	8001c62 <check_function+0xaa>
			servo_state = SERVO_CLOSE;
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <check_function+0xec>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e01a      	b.n	8001c98 <check_function+0xe0>
		else if(buffer[5] == 0x20 && buffer[6] == 0x00){ // SQUARE
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <check_function+0xe4>)
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d107      	bne.n	8001c7a <check_function+0xc2>
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <check_function+0xe4>)
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <check_function+0xc2>
			servo_state = SERVO_OPEN;
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <check_function+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e00e      	b.n	8001c98 <check_function+0xe0>
		else if(buffer[5] == BZ_DATA && buffer[6] == 0x00) {
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <check_function+0xe4>)
 8001c7c:	795b      	ldrb	r3, [r3, #5]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <check_function+0xda>
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <check_function+0xe4>)
 8001c84:	799b      	ldrb	r3, [r3, #6]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <check_function+0xda>
			move_state = BUZZER;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <check_function+0xe8>)
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <check_function+0xe0>
			check_buffer_state_1();
 8001c92:	f7fe fefb 	bl	8000a8c <check_buffer_state_1>
}
 8001c96:	e7ff      	b.n	8001c98 <check_function+0xe0>
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000025c 	.word	0x2000025c
 8001ca0:	20000265 	.word	0x20000265
 8001ca4:	20000050 	.word	0x20000050
 8001ca8:	20000051 	.word	0x20000051

08001cac <uart_process>:

void uart_process(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	switch (uart_state) {
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <uart_process+0xb8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d041      	beq.n	8001d3c <uart_process+0x90>
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	dc4c      	bgt.n	8001d56 <uart_process+0xaa>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <uart_process+0x1a>
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d01f      	beq.n	8001d04 <uart_process+0x58>
			clear_buffer();
			uart_state = WAITING;
			break;
		}
		default: {
			break;
 8001cc4:	e047      	b.n	8001d56 <uart_process+0xaa>
			if(receive_buffer1 == 0xFF) {
 8001cc6:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <uart_process+0xbc>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2bff      	cmp	r3, #255	@ 0xff
 8001ccc:	d145      	bne.n	8001d5a <uart_process+0xae>
				idx = 0;
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <uart_process+0xc0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
				buffer[idx] = receive_buffer1;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <uart_process+0xc0>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <uart_process+0xbc>)
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <uart_process+0xc4>)
 8001ce0:	5499      	strb	r1, [r3, r2]
				idx = (idx + 1) % 8;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <uart_process+0xc0>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	425a      	negs	r2, r3
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	f002 0207 	and.w	r2, r2, #7
 8001cf2:	bf58      	it	pl
 8001cf4:	4253      	negpl	r3, r2
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <uart_process+0xc0>)
 8001cfa:	701a      	strb	r2, [r3, #0]
				uart_state = RECEIVE;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <uart_process+0xb8>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
			break;
 8001d02:	e02a      	b.n	8001d5a <uart_process+0xae>
			buffer[idx] = receive_buffer1;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <uart_process+0xc0>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <uart_process+0xbc>)
 8001d0c:	7819      	ldrb	r1, [r3, #0]
 8001d0e:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <uart_process+0xc4>)
 8001d10:	5499      	strb	r1, [r3, r2]
			idx = (idx + 1) % 8;
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <uart_process+0xc0>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	425a      	negs	r2, r3
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	f002 0207 	and.w	r2, r2, #7
 8001d22:	bf58      	it	pl
 8001d24:	4253      	negpl	r3, r2
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <uart_process+0xc0>)
 8001d2a:	701a      	strb	r2, [r3, #0]
			if(idx == 7)
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <uart_process+0xc0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b07      	cmp	r3, #7
 8001d32:	d114      	bne.n	8001d5e <uart_process+0xb2>
				uart_state = CHECK;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <uart_process+0xb8>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	701a      	strb	r2, [r3, #0]
			break;
 8001d3a:	e010      	b.n	8001d5e <uart_process+0xb2>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001d3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <uart_process+0xc8>)
 8001d42:	f000 fe68 	bl	8002a16 <HAL_GPIO_TogglePin>
			check_function();
 8001d46:	f7ff ff37 	bl	8001bb8 <check_function>
			clear_buffer();
 8001d4a:	f7ff ff19 	bl	8001b80 <clear_buffer>
			uart_state = WAITING;
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <uart_process+0xb8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
			break;
 8001d54:	e004      	b.n	8001d60 <uart_process+0xb4>
			break;
 8001d56:	bf00      	nop
 8001d58:	e002      	b.n	8001d60 <uart_process+0xb4>
			break;
 8001d5a:	bf00      	nop
 8001d5c:	e000      	b.n	8001d60 <uart_process+0xb4>
			break;
 8001d5e:	bf00      	nop
		}
	}
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000266 	.word	0x20000266
 8001d68:	20000258 	.word	0x20000258
 8001d6c:	20000264 	.word	0x20000264
 8001d70:	2000025c 	.word	0x2000025c
 8001d74:	40011000 	.word	0x40011000

08001d78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_UART_RxCpltCallback+0x28>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d106      	bne.n	8001d98 <HAL_UART_RxCpltCallback+0x20>
//		if(buffer[0] == 0xFF)
//			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		uart_process();
 8001d8a:	f7ff ff8f 	bl	8001cac <uart_process>
//		HAL_UART_Transmit(&huart2, buffer, 8, 10);
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4904      	ldr	r1, [pc, #16]	@ (8001da4 <HAL_UART_RxCpltCallback+0x2c>)
 8001d92:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <HAL_UART_RxCpltCallback+0x30>)
 8001d94:	f002 fd16 	bl	80047c4 <HAL_UART_Receive_IT>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013800 	.word	0x40013800
 8001da4:	20000258 	.word	0x20000258
 8001da8:	20000270 	.word	0x20000270

08001dac <move_process>:

void move_process() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	switch (move_state) {
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <move_process+0x70>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d82e      	bhi.n	8001e16 <move_process+0x6a>
 8001db8:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc0 <move_process+0x14>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001ddd 	.word	0x08001ddd
 8001dc4:	08001def 	.word	0x08001def
 8001dc8:	08001df7 	.word	0x08001df7
 8001dcc:	08001dff 	.word	0x08001dff
 8001dd0:	08001e07 	.word	0x08001e07
 8001dd4:	08001e0f 	.word	0x08001e0f
 8001dd8:	08001e17 	.word	0x08001e17
		case STOP: {
			stop();
 8001ddc:	f7ff f8d4 	bl	8000f88 <stop>
			buzzer_set_duty_cycle(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7fe fa29 	bl	8000238 <buzzer_set_duty_cycle>
			move_state = IDLE;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <move_process+0x70>)
 8001de8:	2206      	movs	r2, #6
 8001dea:	701a      	strb	r2, [r3, #0]
			break;
 8001dec:	e014      	b.n	8001e18 <move_process+0x6c>
		}
		case FORWARD: {
			forward(MIN_SPEED);
 8001dee:	2014      	movs	r0, #20
 8001df0:	f7ff f8da 	bl	8000fa8 <forward>
			break;
 8001df4:	e010      	b.n	8001e18 <move_process+0x6c>
		}
		case BACKWARD: {
			backwards(MIN_SPEED);
 8001df6:	2014      	movs	r0, #20
 8001df8:	f7ff f8ea 	bl	8000fd0 <backwards>
			break;
 8001dfc:	e00c      	b.n	8001e18 <move_process+0x6c>
		}
		case LEFT: {
			rotateLeft(MIN_SPEED);
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f7ff f902 	bl	8001008 <rotateLeft>
			break;
 8001e04:	e008      	b.n	8001e18 <move_process+0x6c>
		}
		case RIGHT: {
			rotateRight(MIN_SPEED);
 8001e06:	2014      	movs	r0, #20
 8001e08:	f7ff f916 	bl	8001038 <rotateRight>
			break;
 8001e0c:	e004      	b.n	8001e18 <move_process+0x6c>
		}
		case BUZZER:
			buzzer_set_duty_cycle(50);
 8001e0e:	2032      	movs	r0, #50	@ 0x32
 8001e10:	f7fe fa12 	bl	8000238 <buzzer_set_duty_cycle>
			break;
 8001e14:	e000      	b.n	8001e18 <move_process+0x6c>
		case IDLE:
			//do nothing
			break;
		default: {
			break;
 8001e16:	bf00      	nop
		}
	}
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000265 	.word	0x20000265

08001e20 <servo_process>:

void servo_process(){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	switch (servo_state) {
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <servo_process+0x74>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d02e      	beq.n	8001e8a <servo_process+0x6a>
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	dc2e      	bgt.n	8001e8e <servo_process+0x6e>
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <servo_process+0x1a>
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d014      	beq.n	8001e62 <servo_process+0x42>
			break;
		case SERVO_INACTIVE:
			//do nothing
			break;
		default:
			break;
 8001e38:	e029      	b.n	8001e8e <servo_process+0x6e>
			servo_degree += 5;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <servo_process+0x78>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3305      	adds	r3, #5
 8001e40:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <servo_process+0x78>)
 8001e42:	6013      	str	r3, [r2, #0]
			if(servo_degree >= 60)
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <servo_process+0x78>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e4a:	dd02      	ble.n	8001e52 <servo_process+0x32>
				servo_degree = 60;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <servo_process+0x78>)
 8001e4e:	223c      	movs	r2, #60	@ 0x3c
 8001e50:	601a      	str	r2, [r3, #0]
			servo_set_angle(3, servo_degree);
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <servo_process+0x78>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f7ff f91a 	bl	8001094 <servo_set_angle>
			break;
 8001e60:	e016      	b.n	8001e90 <servo_process+0x70>
			servo_degree -= 5;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <servo_process+0x78>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3b05      	subs	r3, #5
 8001e68:	4a0b      	ldr	r2, [pc, #44]	@ (8001e98 <servo_process+0x78>)
 8001e6a:	6013      	str	r3, [r2, #0]
			if(servo_degree <= 0)
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <servo_process+0x78>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dc02      	bgt.n	8001e7a <servo_process+0x5a>
				servo_degree = 0;
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <servo_process+0x78>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
			servo_set_angle(3, servo_degree);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <servo_process+0x78>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	2003      	movs	r0, #3
 8001e84:	f7ff f906 	bl	8001094 <servo_set_angle>
			break;
 8001e88:	e002      	b.n	8001e90 <servo_process+0x70>
			break;
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <servo_process+0x70>
			break;
 8001e8e:	bf00      	nop
	}
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000050 	.word	0x20000050
 8001e98:	20000268 	.word	0x20000268

08001e9c <sm_process>:

void sm_process(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	switch (sm_state) {
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <sm_process+0x6c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d02a      	beq.n	8001efe <sm_process+0x62>
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	dc2a      	bgt.n	8001f02 <sm_process+0x66>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <sm_process+0x1a>
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d012      	beq.n	8001eda <sm_process+0x3e>
			break;
		case SM_INACTIVE:
			//do nothing
			break;
		default:
			break;
 8001eb4:	e025      	b.n	8001f02 <sm_process+0x66>
			sm_height += 1;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <sm_process+0x70>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <sm_process+0x70>)
 8001ebe:	6013      	str	r3, [r2, #0]
			if(sm_height >= 35)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <sm_process+0x70>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b22      	cmp	r3, #34	@ 0x22
 8001ec6:	dd03      	ble.n	8001ed0 <sm_process+0x34>
				sm_height = 35;
 8001ec8:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <sm_process+0x70>)
 8001eca:	2223      	movs	r2, #35	@ 0x23
 8001ecc:	601a      	str	r2, [r3, #0]
			break;
 8001ece:	e019      	b.n	8001f04 <sm_process+0x68>
				move_step_motor(1, 1);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff f97a 	bl	80011cc <move_step_motor>
			break;
 8001ed8:	e014      	b.n	8001f04 <sm_process+0x68>
			sm_height -= 1;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <sm_process+0x70>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <sm_process+0x70>)
 8001ee2:	6013      	str	r3, [r2, #0]
			if(sm_height <= 0)
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <sm_process+0x70>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	dc03      	bgt.n	8001ef4 <sm_process+0x58>
				sm_height = 0;
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <sm_process+0x70>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
			break;
 8001ef2:	e007      	b.n	8001f04 <sm_process+0x68>
				move_step_motor(0, 1);
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f7ff f968 	bl	80011cc <move_step_motor>
			break;
 8001efc:	e002      	b.n	8001f04 <sm_process+0x68>
			break;
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <sm_process+0x68>
			break;
 8001f02:	bf00      	nop
	}
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000051 	.word	0x20000051
 8001f0c:	2000026c 	.word	0x2000026c

08001f10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	@ (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f1c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	@ (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f48:	f002 fb69 	bl	800461e <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f7fe ff16 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000270 	.word	0x20000270
 8001f60:	40013800 	.word	0x40013800

08001f64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f002 fb3f 	bl	800461e <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fa6:	f7fe feec 	bl	8000d82 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002b8 	.word	0x200002b8
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0318 	add.w	r3, r7, #24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80020d0 <HAL_UART_MspInit+0x118>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d13a      	bne.n	800204e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a3d      	ldr	r2, [pc, #244]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b38      	ldr	r3, [pc, #224]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a37      	ldr	r2, [pc, #220]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b35      	ldr	r3, [pc, #212]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0318 	add.w	r3, r7, #24
 800201a:	4619      	mov	r1, r3
 800201c:	482e      	ldr	r0, [pc, #184]	@ (80020d8 <HAL_UART_MspInit+0x120>)
 800201e:	f000 fb37 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0318 	add.w	r3, r7, #24
 8002034:	4619      	mov	r1, r3
 8002036:	4828      	ldr	r0, [pc, #160]	@ (80020d8 <HAL_UART_MspInit+0x120>)
 8002038:	f000 fb2a 	bl	8002690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2025      	movs	r0, #37	@ 0x25
 8002042:	f000 f9ac 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002046:	2025      	movs	r0, #37	@ 0x25
 8002048:	f000 f9c5 	bl	80023d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800204c:	e03c      	b.n	80020c8 <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a22      	ldr	r2, [pc, #136]	@ (80020dc <HAL_UART_MspInit+0x124>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d137      	bne.n	80020c8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 800205e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002062:	61d3      	str	r3, [r2, #28]
 8002064:	4b1b      	ldr	r3, [pc, #108]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_UART_MspInit+0x11c>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002088:	2304      	movs	r3, #4
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0318 	add.w	r3, r7, #24
 8002098:	4619      	mov	r1, r3
 800209a:	480f      	ldr	r0, [pc, #60]	@ (80020d8 <HAL_UART_MspInit+0x120>)
 800209c:	f000 faf8 	bl	8002690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020a0:	2308      	movs	r3, #8
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	4619      	mov	r1, r3
 80020b2:	4809      	ldr	r0, [pc, #36]	@ (80020d8 <HAL_UART_MspInit+0x120>)
 80020b4:	f000 faec 	bl	8002690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2026      	movs	r0, #38	@ 0x26
 80020be:	f000 f96e 	bl	800239e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020c2:	2026      	movs	r0, #38	@ 0x26
 80020c4:	f000 f987 	bl	80023d6 <HAL_NVIC_EnableIRQ>
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	@ 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010800 	.word	0x40010800
 80020dc:	40004400 	.word	0x40004400

080020e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e0:	f7ff f98c 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480b      	ldr	r0, [pc, #44]	@ (8002114 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020e6:	490c      	ldr	r1, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020e8:	4a0c      	ldr	r2, [pc, #48]	@ (800211c <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a09      	ldr	r2, [pc, #36]	@ (8002120 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020fc:	4c09      	ldr	r4, [pc, #36]	@ (8002124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f003 f92f 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210e:	f7fe fcff 	bl	8000b10 <main>
  bx lr
 8002112:	4770      	bx	lr
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800211c:	08005cf4 	.word	0x08005cf4
  ldr r2, =_sbss
 8002120:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002124:	2000044c 	.word	0x2000044c

08002128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_2_IRQHandler>
	...

0800212c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_Init+0x28>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_Init+0x28>)
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f923 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff f888 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f93b 	bl	80023f2 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f000 f903 	bl	800239e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	@ (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000004c 	.word	0x2000004c
 80021b0:	20000058 	.word	0x20000058
 80021b4:	20000054 	.word	0x20000054

080021b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_IncTick+0x1c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_IncTick+0x20>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a03      	ldr	r2, [pc, #12]	@ (80021d8 <HAL_IncTick+0x20>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	20000058 	.word	0x20000058
 80021d8:	20000300 	.word	0x20000300

080021dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b02      	ldr	r3, [pc, #8]	@ (80021ec <HAL_GetTick+0x10>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20000300 	.word	0x20000300

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4906      	ldr	r1, [pc, #24]	@ (8002288 <__NVIC_EnableIRQ+0x34>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	@ (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
         );
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff90 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff2d 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b0:	f7ff ff42 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7ff ff90 	bl	80022e0 <NVIC_EncodePriority>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff5f 	bl	800228c <__NVIC_SetPriority>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff35 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ffa2 	bl	8002344 <SysTick_Config>
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d008      	beq.n	8002434 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e020      	b.n	8002476 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020e 	bic.w	r2, r2, #14
 8002442:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d005      	beq.n	80024a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2204      	movs	r2, #4
 800249c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e0d6      	b.n	8002652 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 020e 	bic.w	r2, r2, #14
 80024b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b64      	ldr	r3, [pc, #400]	@ (800265c <HAL_DMA_Abort_IT+0x1dc>)
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d958      	bls.n	8002582 <HAL_DMA_Abort_IT+0x102>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a62      	ldr	r2, [pc, #392]	@ (8002660 <HAL_DMA_Abort_IT+0x1e0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d04f      	beq.n	800257a <HAL_DMA_Abort_IT+0xfa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a61      	ldr	r2, [pc, #388]	@ (8002664 <HAL_DMA_Abort_IT+0x1e4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d048      	beq.n	8002576 <HAL_DMA_Abort_IT+0xf6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002668 <HAL_DMA_Abort_IT+0x1e8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d040      	beq.n	8002570 <HAL_DMA_Abort_IT+0xf0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5e      	ldr	r2, [pc, #376]	@ (800266c <HAL_DMA_Abort_IT+0x1ec>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d038      	beq.n	800256a <HAL_DMA_Abort_IT+0xea>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002670 <HAL_DMA_Abort_IT+0x1f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d030      	beq.n	8002564 <HAL_DMA_Abort_IT+0xe4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5b      	ldr	r2, [pc, #364]	@ (8002674 <HAL_DMA_Abort_IT+0x1f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d028      	beq.n	800255e <HAL_DMA_Abort_IT+0xde>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_DMA_Abort_IT+0x1dc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d020      	beq.n	8002558 <HAL_DMA_Abort_IT+0xd8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a57      	ldr	r2, [pc, #348]	@ (8002678 <HAL_DMA_Abort_IT+0x1f8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d019      	beq.n	8002554 <HAL_DMA_Abort_IT+0xd4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a55      	ldr	r2, [pc, #340]	@ (800267c <HAL_DMA_Abort_IT+0x1fc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d012      	beq.n	8002550 <HAL_DMA_Abort_IT+0xd0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a54      	ldr	r2, [pc, #336]	@ (8002680 <HAL_DMA_Abort_IT+0x200>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00a      	beq.n	800254a <HAL_DMA_Abort_IT+0xca>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a52      	ldr	r2, [pc, #328]	@ (8002684 <HAL_DMA_Abort_IT+0x204>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d102      	bne.n	8002544 <HAL_DMA_Abort_IT+0xc4>
 800253e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002542:	e01b      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002548:	e018      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 800254a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800254e:	e015      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002550:	2310      	movs	r3, #16
 8002552:	e013      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002554:	2301      	movs	r3, #1
 8002556:	e011      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800255c:	e00e      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 800255e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002562:	e00b      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002568:	e008      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 800256a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256e:	e005      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002574:	e002      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 8002576:	2310      	movs	r3, #16
 8002578:	e000      	b.n	800257c <HAL_DMA_Abort_IT+0xfc>
 800257a:	2301      	movs	r3, #1
 800257c:	4a42      	ldr	r2, [pc, #264]	@ (8002688 <HAL_DMA_Abort_IT+0x208>)
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	e057      	b.n	8002632 <HAL_DMA_Abort_IT+0x1b2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a36      	ldr	r2, [pc, #216]	@ (8002660 <HAL_DMA_Abort_IT+0x1e0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04f      	beq.n	800262c <HAL_DMA_Abort_IT+0x1ac>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <HAL_DMA_Abort_IT+0x1e4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d048      	beq.n	8002628 <HAL_DMA_Abort_IT+0x1a8>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <HAL_DMA_Abort_IT+0x1e8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d040      	beq.n	8002622 <HAL_DMA_Abort_IT+0x1a2>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_DMA_Abort_IT+0x1ec>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d038      	beq.n	800261c <HAL_DMA_Abort_IT+0x19c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <HAL_DMA_Abort_IT+0x1f0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d030      	beq.n	8002616 <HAL_DMA_Abort_IT+0x196>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002674 <HAL_DMA_Abort_IT+0x1f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d028      	beq.n	8002610 <HAL_DMA_Abort_IT+0x190>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_DMA_Abort_IT+0x1dc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d020      	beq.n	800260a <HAL_DMA_Abort_IT+0x18a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <HAL_DMA_Abort_IT+0x1f8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_DMA_Abort_IT+0x186>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a29      	ldr	r2, [pc, #164]	@ (800267c <HAL_DMA_Abort_IT+0x1fc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d012      	beq.n	8002602 <HAL_DMA_Abort_IT+0x182>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_DMA_Abort_IT+0x200>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00a      	beq.n	80025fc <HAL_DMA_Abort_IT+0x17c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a26      	ldr	r2, [pc, #152]	@ (8002684 <HAL_DMA_Abort_IT+0x204>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d102      	bne.n	80025f6 <HAL_DMA_Abort_IT+0x176>
 80025f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f4:	e01b      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 80025f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025fa:	e018      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 80025fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002600:	e015      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002602:	2310      	movs	r3, #16
 8002604:	e013      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002606:	2301      	movs	r3, #1
 8002608:	e011      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 800260a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800260e:	e00e      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002610:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002614:	e00b      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800261a:	e008      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 800261c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002620:	e005      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002622:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002626:	e002      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 8002628:	2310      	movs	r3, #16
 800262a:	e000      	b.n	800262e <HAL_DMA_Abort_IT+0x1ae>
 800262c:	2301      	movs	r3, #1
 800262e:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_DMA_Abort_IT+0x20c>)
 8002630:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
    } 
  }
  return status;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40020080 	.word	0x40020080
 8002660:	40020008 	.word	0x40020008
 8002664:	4002001c 	.word	0x4002001c
 8002668:	40020030 	.word	0x40020030
 800266c:	40020044 	.word	0x40020044
 8002670:	40020058 	.word	0x40020058
 8002674:	4002006c 	.word	0x4002006c
 8002678:	40020408 	.word	0x40020408
 800267c:	4002041c 	.word	0x4002041c
 8002680:	40020430 	.word	0x40020430
 8002684:	40020444 	.word	0x40020444
 8002688:	40020400 	.word	0x40020400
 800268c:	40020000 	.word	0x40020000

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	@ 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e179      	b.n	8002998 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8168 	bne.w	8002992 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a96      	ldr	r2, [pc, #600]	@ (8002920 <HAL_GPIO_Init+0x290>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a94      	ldr	r2, [pc, #592]	@ (8002920 <HAL_GPIO_Init+0x290>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a94      	ldr	r2, [pc, #592]	@ (8002924 <HAL_GPIO_Init+0x294>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a92      	ldr	r2, [pc, #584]	@ (8002924 <HAL_GPIO_Init+0x294>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a92      	ldr	r2, [pc, #584]	@ (8002928 <HAL_GPIO_Init+0x298>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a90      	ldr	r2, [pc, #576]	@ (8002928 <HAL_GPIO_Init+0x298>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a90      	ldr	r2, [pc, #576]	@ (800292c <HAL_GPIO_Init+0x29c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a8e      	ldr	r2, [pc, #568]	@ (800292c <HAL_GPIO_Init+0x29c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a8e      	ldr	r2, [pc, #568]	@ (8002930 <HAL_GPIO_Init+0x2a0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002930 <HAL_GPIO_Init+0x2a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a75      	ldr	r2, [pc, #468]	@ (8002934 <HAL_GPIO_Init+0x2a4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80c1 	beq.w	8002992 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <HAL_GPIO_Init+0x2a8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a48      	ldr	r2, [pc, #288]	@ (8002938 <HAL_GPIO_Init+0x2a8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b46      	ldr	r3, [pc, #280]	@ (8002938 <HAL_GPIO_Init+0x2a8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a44      	ldr	r2, [pc, #272]	@ (800293c <HAL_GPIO_Init+0x2ac>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <HAL_GPIO_Init+0x2b0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d01f      	beq.n	8002894 <HAL_GPIO_Init+0x204>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3b      	ldr	r2, [pc, #236]	@ (8002944 <HAL_GPIO_Init+0x2b4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d019      	beq.n	8002890 <HAL_GPIO_Init+0x200>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <HAL_GPIO_Init+0x2b8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_GPIO_Init+0x1fc>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a39      	ldr	r2, [pc, #228]	@ (800294c <HAL_GPIO_Init+0x2bc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_GPIO_Init+0x1f8>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a38      	ldr	r2, [pc, #224]	@ (8002950 <HAL_GPIO_Init+0x2c0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0x1f4>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a37      	ldr	r2, [pc, #220]	@ (8002954 <HAL_GPIO_Init+0x2c4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_GPIO_Init+0x1f0>
 800287c:	2305      	movs	r3, #5
 800287e:	e00a      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002880:	2306      	movs	r3, #6
 8002882:	e008      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002884:	2304      	movs	r3, #4
 8002886:	e006      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002888:	2303      	movs	r3, #3
 800288a:	e004      	b.n	8002896 <HAL_GPIO_Init+0x206>
 800288c:	2302      	movs	r3, #2
 800288e:	e002      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_GPIO_Init+0x206>
 8002894:	2300      	movs	r3, #0
 8002896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028a6:	4925      	ldr	r1, [pc, #148]	@ (800293c <HAL_GPIO_Init+0x2ac>)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028c0:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	4924      	ldr	r1, [pc, #144]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4920      	ldr	r1, [pc, #128]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028d8:	4013      	ands	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	491a      	ldr	r1, [pc, #104]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	4916      	ldr	r1, [pc, #88]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 8002900:	4013      	ands	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d025      	beq.n	800295c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4910      	ldr	r1, [pc, #64]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e025      	b.n	800296a <HAL_GPIO_Init+0x2da>
 800291e:	bf00      	nop
 8002920:	10320000 	.word	0x10320000
 8002924:	10310000 	.word	0x10310000
 8002928:	10220000 	.word	0x10220000
 800292c:	10210000 	.word	0x10210000
 8002930:	10120000 	.word	0x10120000
 8002934:	10110000 	.word	0x10110000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010000 	.word	0x40010000
 8002940:	40010800 	.word	0x40010800
 8002944:	40010c00 	.word	0x40010c00
 8002948:	40011000 	.word	0x40011000
 800294c:	40011400 	.word	0x40011400
 8002950:	40011800 	.word	0x40011800
 8002954:	40011c00 	.word	0x40011c00
 8002958:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295c:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	43db      	mvns	r3, r3
 8002964:	4913      	ldr	r1, [pc, #76]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 8002966:	4013      	ands	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	490e      	ldr	r1, [pc, #56]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
 8002982:	e006      	b.n	8002992 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	43db      	mvns	r3, r3
 800298c:	4909      	ldr	r1, [pc, #36]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800298e:	4013      	ands	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	3301      	adds	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f47f ae7e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	372c      	adds	r7, #44	@ 0x2c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40010400 	.word	0x40010400

080029b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e001      	b.n	80029da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	807b      	strh	r3, [r7, #2]
 80029f2:	4613      	mov	r3, r2
 80029f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f6:	787b      	ldrb	r3, [r7, #1]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029fc:	887a      	ldrh	r2, [r7, #2]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a02:	e003      	b.n	8002a0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	041a      	lsls	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	611a      	str	r2, [r3, #16]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a28:	887a      	ldrh	r2, [r7, #2]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43d9      	mvns	r1, r3
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	400b      	ands	r3, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e272      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8087 	beq.w	8002b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a68:	4b92      	ldr	r3, [pc, #584]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d00c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a74:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d112      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5e>
 8002a80:	4b8c      	ldr	r3, [pc, #560]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8e:	4b89      	ldr	r3, [pc, #548]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d06c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x12c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d168      	bne.n	8002b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e24c      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x76>
 8002ab0:	4b80      	ldr	r3, [pc, #512]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e02e      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x98>
 8002ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b78      	ldr	r3, [pc, #480]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a77      	ldr	r2, [pc, #476]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e01d      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0xbc>
 8002aea:	4b72      	ldr	r3, [pc, #456]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a71      	ldr	r2, [pc, #452]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0xd4>
 8002b04:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b68      	ldr	r3, [pc, #416]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a67      	ldr	r2, [pc, #412]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7ff fb5a 	bl	80021dc <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fb56 	bl	80021dc <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e200      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0xe4>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fb46 	bl	80021dc <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fb42 	bl	80021dc <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e1ec      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b66:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x10c>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d063      	beq.n	8002c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b82:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b8e:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d11c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x18c>
 8002b9a:	4b46      	ldr	r3, [pc, #280]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCC_OscConfig+0x176>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e1c0      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4939      	ldr	r1, [pc, #228]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd2:	e03a      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bdc:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <HAL_RCC_OscConfig+0x270>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7ff fafb 	bl	80021dc <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7ff faf7 	bl	80021dc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1a1      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4927      	ldr	r1, [pc, #156]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	e015      	b.n	8002c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <HAL_RCC_OscConfig+0x270>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff fada 	bl	80021dc <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fad6 	bl	80021dc <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e180      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d03a      	beq.n	8002ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5e:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7ff faba 	bl	80021dc <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7ff fab6 	bl	80021dc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e160      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f000 face 	bl	800322c <RCC_Delay>
 8002c90:	e01c      	b.n	8002ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_RCC_OscConfig+0x274>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c98:	f7ff faa0 	bl	80021dc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9e:	e00f      	b.n	8002cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7ff fa9c 	bl	80021dc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d908      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e146      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	42420000 	.word	0x42420000
 8002cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b92      	ldr	r3, [pc, #584]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e9      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a6 	beq.w	8002e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cde:	4b8b      	ldr	r3, [pc, #556]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10d      	bne.n	8002d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	4b88      	ldr	r3, [pc, #544]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a87      	ldr	r2, [pc, #540]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	61d3      	str	r3, [r2, #28]
 8002cf6:	4b85      	ldr	r3, [pc, #532]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d02:	2301      	movs	r3, #1
 8002d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d06:	4b82      	ldr	r3, [pc, #520]	@ (8002f10 <HAL_RCC_OscConfig+0x4c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d118      	bne.n	8002d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <HAL_RCC_OscConfig+0x4c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7e      	ldr	r2, [pc, #504]	@ (8002f10 <HAL_RCC_OscConfig+0x4c8>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fa5d 	bl	80021dc <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d26:	f7ff fa59 	bl	80021dc <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b64      	cmp	r3, #100	@ 0x64
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e103      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	4b75      	ldr	r3, [pc, #468]	@ (8002f10 <HAL_RCC_OscConfig+0x4c8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x312>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a6e      	ldr	r2, [pc, #440]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e02d      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x334>
 8002d62:	4b6a      	ldr	r3, [pc, #424]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4a69      	ldr	r2, [pc, #420]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6213      	str	r3, [r2, #32]
 8002d6e:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a66      	ldr	r2, [pc, #408]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	e01c      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x356>
 8002d84:	4b61      	ldr	r3, [pc, #388]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	4a60      	ldr	r2, [pc, #384]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	6213      	str	r3, [r2, #32]
 8002d90:	4b5e      	ldr	r3, [pc, #376]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a5d      	ldr	r2, [pc, #372]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCC_OscConfig+0x36e>
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a5a      	ldr	r2, [pc, #360]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b58      	ldr	r3, [pc, #352]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a57      	ldr	r2, [pc, #348]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d015      	beq.n	8002dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fa0d 	bl	80021dc <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc6:	f7ff fa09 	bl	80021dc <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e0b1      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ee      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x37e>
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7ff f9f7 	bl	80021dc <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7ff f9f3 	bl	80021dc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e09b      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e08:	4b40      	ldr	r3, [pc, #256]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ee      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8087 	beq.w	8002f3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e30:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d061      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d146      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e44:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7ff f9c7 	bl	80021dc <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e52:	f7ff f9c3 	bl	80021dc <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e06d      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	4b29      	ldr	r3, [pc, #164]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4921      	ldr	r1, [pc, #132]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a19      	ldr	r1, [r3, #32]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	491b      	ldr	r1, [pc, #108]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7ff f997 	bl	80021dc <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7ff f993 	bl	80021dc <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e03d      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x46a>
 8002ed0:	e035      	b.n	8002f3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff f980 	bl	80021dc <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7ff f97c 	bl	80021dc <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e026      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x498>
 8002efe:	e01e      	b.n	8002f3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e019      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
 8002f14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_OscConfig+0x500>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0d0      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d910      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b67      	ldr	r3, [pc, #412]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	4965      	ldr	r1, [pc, #404]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b63      	ldr	r3, [pc, #396]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b8      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d020      	beq.n	8002fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa8:	4b59      	ldr	r3, [pc, #356]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a58      	ldr	r2, [pc, #352]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc0:	4b53      	ldr	r3, [pc, #332]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b50      	ldr	r3, [pc, #320]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	494d      	ldr	r1, [pc, #308]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d040      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b47      	ldr	r3, [pc, #284]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d115      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e07f      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b41      	ldr	r3, [pc, #260]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e073      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06b      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b39      	ldr	r3, [pc, #228]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4936      	ldr	r1, [pc, #216]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7ff f8ce 	bl	80021dc <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7ff f8ca 	bl	80021dc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e053      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b27      	ldr	r3, [pc, #156]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d210      	bcs.n	800309c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b24      	ldr	r3, [pc, #144]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0207 	bic.w	r2, r3, #7
 8003082:	4922      	ldr	r1, [pc, #136]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b20      	ldr	r3, [pc, #128]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e032      	b.n	8003102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a8:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4916      	ldr	r1, [pc, #88]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c6:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	490e      	ldr	r1, [pc, #56]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030da:	f000 f821 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 80030de:	4602      	mov	r2, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	490a      	ldr	r1, [pc, #40]	@ (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	4a09      	ldr	r2, [pc, #36]	@ (8003118 <HAL_RCC_ClockConfig+0x1cc>)
 80030f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f6:	4b09      	ldr	r3, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1d0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff f82c 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40022000 	.word	0x40022000
 8003110:	40021000 	.word	0x40021000
 8003114:	08005c8c 	.word	0x08005c8c
 8003118:	2000004c 	.word	0x2000004c
 800311c:	20000054 	.word	0x20000054

08003120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800313a:	4b1e      	ldr	r3, [pc, #120]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b04      	cmp	r3, #4
 8003148:	d002      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x30>
 800314a:	2b08      	cmp	r3, #8
 800314c:	d003      	beq.n	8003156 <HAL_RCC_GetSysClockFreq+0x36>
 800314e:	e027      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003150:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003152:	613b      	str	r3, [r7, #16]
      break;
 8003154:	e027      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	0c9b      	lsrs	r3, r3, #18
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003160:	5cd3      	ldrb	r3, [r2, r3]
 8003162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0c5b      	lsrs	r3, r3, #17
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	4a11      	ldr	r2, [pc, #68]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	fb03 f202 	mul.w	r2, r3, r2
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e004      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0c      	ldr	r2, [pc, #48]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003194:	fb02 f303 	mul.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	613b      	str	r3, [r7, #16]
      break;
 800319e:	e002      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031a2:	613b      	str	r3, [r7, #16]
      break;
 80031a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a6:	693b      	ldr	r3, [r7, #16]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	007a1200 	.word	0x007a1200
 80031bc:	08005ca4 	.word	0x08005ca4
 80031c0:	08005cb4 	.word	0x08005cb4
 80031c4:	003d0900 	.word	0x003d0900

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	2000004c 	.word	0x2000004c

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff2 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08005c9c 	.word	0x08005c9c

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffde 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08005c9c 	.word	0x08005c9c

0800322c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <RCC_Delay+0x34>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <RCC_Delay+0x38>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a5b      	lsrs	r3, r3, #9
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003248:	bf00      	nop
  }
  while (Delay --);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	60fa      	str	r2, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f9      	bne.n	8003248 <RCC_Delay+0x1c>
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	2000004c 	.word	0x2000004c
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fb0c 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fe0a 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e044      	b.n	80033aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xac>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1c      	ldr	r2, [pc, #112]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_TIM_Base_Start_IT+0xb4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a16      	ldr	r2, [pc, #88]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_Base_Start_IT+0x6c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a15      	ldr	r2, [pc, #84]	@ (80033c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d111      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b06      	cmp	r3, #6
 8003384:	d010      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e007      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40013400 	.word	0x40013400
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00

080033c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fab8 	bl	8001964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fd5a 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e072      	b.n	80035c0 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 ff8c 	bl	8004438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_TIM_PWM_Start+0x160>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_PWM_Start+0xcc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <HAL_TIM_PWM_Start+0x164>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d101      	bne.n	8003538 <HAL_TIM_PWM_Start+0xd0>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_TIM_PWM_Start+0xd2>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1d      	ldr	r2, [pc, #116]	@ (80035c8 <HAL_TIM_PWM_Start+0x160>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_TIM_PWM_Start+0x122>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1b      	ldr	r2, [pc, #108]	@ (80035cc <HAL_TIM_PWM_Start+0x164>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_TIM_PWM_Start+0x122>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356a:	d00e      	beq.n	800358a <HAL_TIM_PWM_Start+0x122>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a17      	ldr	r2, [pc, #92]	@ (80035d0 <HAL_TIM_PWM_Start+0x168>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIM_PWM_Start+0x122>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a16      	ldr	r2, [pc, #88]	@ (80035d4 <HAL_TIM_PWM_Start+0x16c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIM_PWM_Start+0x122>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <HAL_TIM_PWM_Start+0x170>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b06      	cmp	r3, #6
 800359a:	d010      	beq.n	80035be <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ac:	e007      	b.n	80035be <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0201 	orr.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00

080035dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_TIM_PWM_Start_IT+0x28>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e022      	b.n	800364a <HAL_TIM_PWM_Start_IT+0x6e>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d109      	bne.n	800361e <HAL_TIM_PWM_Start_IT+0x42>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	e015      	b.n	800364a <HAL_TIM_PWM_Start_IT+0x6e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d109      	bne.n	8003638 <HAL_TIM_PWM_Start_IT+0x5c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e008      	b.n	800364a <HAL_TIM_PWM_Start_IT+0x6e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	bf14      	ite	ne
 8003644:	2301      	movne	r3, #1
 8003646:	2300      	moveq	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0bd      	b.n	80037ce <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_TIM_PWM_Start_IT+0x86>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003660:	e013      	b.n	800368a <HAL_TIM_PWM_Start_IT+0xae>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d104      	bne.n	8003672 <HAL_TIM_PWM_Start_IT+0x96>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003670:	e00b      	b.n	800368a <HAL_TIM_PWM_Start_IT+0xae>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d104      	bne.n	8003682 <HAL_TIM_PWM_Start_IT+0xa6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003680:	e003      	b.n	800368a <HAL_TIM_PWM_Start_IT+0xae>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d841      	bhi.n	8003714 <HAL_TIM_PWM_Start_IT+0x138>
 8003690:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036cd 	.word	0x080036cd
 800369c:	08003715 	.word	0x08003715
 80036a0:	08003715 	.word	0x08003715
 80036a4:	08003715 	.word	0x08003715
 80036a8:	080036df 	.word	0x080036df
 80036ac:	08003715 	.word	0x08003715
 80036b0:	08003715 	.word	0x08003715
 80036b4:	08003715 	.word	0x08003715
 80036b8:	080036f1 	.word	0x080036f1
 80036bc:	08003715 	.word	0x08003715
 80036c0:	08003715 	.word	0x08003715
 80036c4:	08003715 	.word	0x08003715
 80036c8:	08003703 	.word	0x08003703
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0202 	orr.w	r2, r2, #2
 80036da:	60da      	str	r2, [r3, #12]
      break;
 80036dc:	e01d      	b.n	800371a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0204 	orr.w	r2, r2, #4
 80036ec:	60da      	str	r2, [r3, #12]
      break;
 80036ee:	e014      	b.n	800371a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0208 	orr.w	r2, r2, #8
 80036fe:	60da      	str	r2, [r3, #12]
      break;
 8003700:	e00b      	b.n	800371a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0210 	orr.w	r2, r2, #16
 8003710:	60da      	str	r2, [r3, #12]
      break;
 8003712:	e002      	b.n	800371a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	bf00      	nop
  }

  if (status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d155      	bne.n	80037cc <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2201      	movs	r2, #1
 8003726:	6839      	ldr	r1, [r7, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fe85 	bl	8004438 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a29      	ldr	r2, [pc, #164]	@ (80037d8 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIM_PWM_Start_IT+0x166>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <HAL_TIM_PWM_Start_IT+0x200>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_TIM_PWM_Start_IT+0x16a>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_TIM_PWM_Start_IT+0x16c>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800375a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d018      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1c      	ldr	r2, [pc, #112]	@ (80037dc <HAL_TIM_PWM_Start_IT+0x200>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d00e      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x1bc>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <HAL_TIM_PWM_Start_IT+0x204>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d009      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x1bc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_TIM_PWM_Start_IT+0x208>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_PWM_Start_IT+0x1bc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <HAL_TIM_PWM_Start_IT+0x20c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d111      	bne.n	80037bc <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d010      	beq.n	80037cc <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e007      	b.n	80037cc <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00

080037ec <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d841      	bhi.n	8003884 <HAL_TIM_PWM_Stop_IT+0x98>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800383d 	.word	0x0800383d
 800380c:	08003885 	.word	0x08003885
 8003810:	08003885 	.word	0x08003885
 8003814:	08003885 	.word	0x08003885
 8003818:	0800384f 	.word	0x0800384f
 800381c:	08003885 	.word	0x08003885
 8003820:	08003885 	.word	0x08003885
 8003824:	08003885 	.word	0x08003885
 8003828:	08003861 	.word	0x08003861
 800382c:	08003885 	.word	0x08003885
 8003830:	08003885 	.word	0x08003885
 8003834:	08003885 	.word	0x08003885
 8003838:	08003873 	.word	0x08003873
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0202 	bic.w	r2, r2, #2
 800384a:	60da      	str	r2, [r3, #12]
      break;
 800384c:	e01d      	b.n	800388a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0204 	bic.w	r2, r2, #4
 800385c:	60da      	str	r2, [r3, #12]
      break;
 800385e:	e014      	b.n	800388a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	60da      	str	r2, [r3, #12]
      break;
 8003870:	e00b      	b.n	800388a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	60da      	str	r2, [r3, #12]
      break;
 8003882:	e002      	b.n	800388a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
      break;
 8003888:	bf00      	nop
  }

  if (status == HAL_OK)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d161      	bne.n	8003954 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2200      	movs	r2, #0
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fdcd 	bl	8004438 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_TIM_PWM_Stop_IT+0x174>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_PWM_Stop_IT+0xc6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003964 <HAL_TIM_PWM_Stop_IT+0x178>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_TIM_PWM_Stop_IT+0xca>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_TIM_PWM_Stop_IT+0x100>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_TIM_PWM_Stop_IT+0x100>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10f      	bne.n	800391c <HAL_TIM_PWM_Stop_IT+0x130>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6a1a      	ldr	r2, [r3, #32]
 8003902:	f240 4344 	movw	r3, #1092	@ 0x444
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_TIM_PWM_Stop_IT+0x130>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d104      	bne.n	800392c <HAL_TIM_PWM_Stop_IT+0x140>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800392a:	e013      	b.n	8003954 <HAL_TIM_PWM_Stop_IT+0x168>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d104      	bne.n	800393c <HAL_TIM_PWM_Stop_IT+0x150>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800393a:	e00b      	b.n	8003954 <HAL_TIM_PWM_Stop_IT+0x168>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d104      	bne.n	800394c <HAL_TIM_PWM_Stop_IT+0x160>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394a:	e003      	b.n	8003954 <HAL_TIM_PWM_Stop_IT+0x168>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0202 	mvn.w	r2, #2
 8003994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa76 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa69 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fc2f 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa4c 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fa3f 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fd fc05 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0208 	mvn.w	r2, #8
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa22 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa15 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd fbdb 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2208      	movs	r2, #8
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9f8 	bl	8003e9c <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9eb 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd fbb1 	bl	800121c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0201 	mvn.w	r2, #1
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd fb46 	bl	8001178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b80      	cmp	r3, #128	@ 0x80
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fd7a 	bl	800460c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9b5 	bl	8003eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0220 	mvn.w	r2, #32
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fd45 	bl	80045fa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0ae      	b.n	8003cf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	f200 809f 	bhi.w	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003ce5 	.word	0x08003ce5
 8003bb4:	08003ce5 	.word	0x08003ce5
 8003bb8:	08003ce5 	.word	0x08003ce5
 8003bbc:	08003c21 	.word	0x08003c21
 8003bc0:	08003ce5 	.word	0x08003ce5
 8003bc4:	08003ce5 	.word	0x08003ce5
 8003bc8:	08003ce5 	.word	0x08003ce5
 8003bcc:	08003c63 	.word	0x08003c63
 8003bd0:	08003ce5 	.word	0x08003ce5
 8003bd4:	08003ce5 	.word	0x08003ce5
 8003bd8:	08003ce5 	.word	0x08003ce5
 8003bdc:	08003ca3 	.word	0x08003ca3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f9e4 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0208 	orr.w	r2, r2, #8
 8003bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699a      	ldr	r2, [r3, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0204 	bic.w	r2, r2, #4
 8003c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6999      	ldr	r1, [r3, #24]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	619a      	str	r2, [r3, #24]
      break;
 8003c1e:	e064      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fa34 	bl	8004094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6999      	ldr	r1, [r3, #24]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	021a      	lsls	r2, r3, #8
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]
      break;
 8003c60:	e043      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68b9      	ldr	r1, [r7, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 fa87 	bl	800417c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0208 	orr.w	r2, r2, #8
 8003c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0204 	bic.w	r2, r2, #4
 8003c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69d9      	ldr	r1, [r3, #28]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	61da      	str	r2, [r3, #28]
      break;
 8003ca0:	e023      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fadb 	bl	8004264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69da      	ldr	r2, [r3, #28]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69d9      	ldr	r1, [r3, #28]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	021a      	lsls	r2, r3, #8
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	61da      	str	r2, [r3, #28]
      break;
 8003ce2:	e002      	b.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b4      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x186>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_TIM_ConfigClockSource+0x172>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b70      	cmp	r3, #112	@ 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d6c:	2b70      	cmp	r3, #112	@ 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b60      	cmp	r3, #96	@ 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x11a>
 8003d74:	2b60      	cmp	r3, #96	@ 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b50      	cmp	r3, #80	@ 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d7c:	2b50      	cmp	r3, #80	@ 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x13a>
 8003d84:	2b40      	cmp	r3, #64	@ 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b30      	cmp	r3, #48	@ 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db2:	f000 fb22 	bl	80043fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04f      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de0:	f000 fb0b 	bl	80043fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 fa82 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	@ 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fad9 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 faa0 	bl	8004368 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	@ 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fac9 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fa62 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	@ 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fab9 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fab0 	bl	80043c6 <TIM_ITRx_SetConfig>
      break;
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bc80      	pop	{r7}
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a33      	ldr	r2, [pc, #204]	@ (8003fa0 <TIM_Base_SetConfig+0xe0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a32      	ldr	r2, [pc, #200]	@ (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00f      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <TIM_Base_SetConfig+0xec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a22      	ldr	r2, [pc, #136]	@ (8003fa0 <TIM_Base_SetConfig+0xe0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a21      	ldr	r2, [pc, #132]	@ (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa8 <TIM_Base_SetConfig+0xe8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <TIM_Base_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <TIM_Base_SetConfig+0xf0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a09      	ldr	r2, [pc, #36]	@ (8003fa0 <TIM_Base_SetConfig+0xe0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0xc8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <TIM_Base_SetConfig+0xe4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 0201 	bic.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a20      	ldr	r2, [pc, #128]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC1_SetConfig+0x64>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10c      	bne.n	8004032 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0308 	bic.w	r3, r3, #8
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC1_SetConfig+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400

08004094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 0210 	bic.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a21      	ldr	r2, [pc, #132]	@ (8004174 <TIM_OC2_SetConfig+0xe0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC2_SetConfig+0x68>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a20      	ldr	r2, [pc, #128]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a16      	ldr	r2, [pc, #88]	@ (8004174 <TIM_OC2_SetConfig+0xe0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC2_SetConfig+0x94>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800412e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400

0800417c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0303 	bic.w	r3, r3, #3
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a21      	ldr	r2, [pc, #132]	@ (800425c <TIM_OC3_SetConfig+0xe0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC3_SetConfig+0x66>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a20      	ldr	r2, [pc, #128]	@ (8004260 <TIM_OC3_SetConfig+0xe4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10d      	bne.n	80041fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a16      	ldr	r2, [pc, #88]	@ (800425c <TIM_OC3_SetConfig+0xe0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC3_SetConfig+0x92>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <TIM_OC3_SetConfig+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40013400 	.word	0x40013400

08004264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	031b      	lsls	r3, r3, #12
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a11      	ldr	r2, [pc, #68]	@ (8004304 <TIM_OC4_SetConfig+0xa0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC4_SetConfig+0x68>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a10      	ldr	r2, [pc, #64]	@ (8004308 <TIM_OC4_SetConfig+0xa4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	019b      	lsls	r3, r3, #6
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40013400 	.word	0x40013400

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0210 	bic.w	r2, r3, #16
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f043 0307 	orr.w	r3, r3, #7
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
 8004406:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004414:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	431a      	orrs	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	609a      	str	r2, [r3, #8]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2201      	movs	r2, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	43db      	mvns	r3, r3
 800445a:	401a      	ands	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e050      	b.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d018      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ee:	d00e      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a15      	ldr	r2, [pc, #84]	@ (800454c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a14      	ldr	r2, [pc, #80]	@ (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d10c      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4313      	orrs	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40013400 	.word	0x40013400
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00

08004558 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004570:	2302      	movs	r3, #2
 8004572:	e03d      	b.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e042      	b.n	80046b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fd fcb7 	bl	8001fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2224      	movs	r2, #36	@ 0x24
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004660:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 fdc6 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004676:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004686:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004696:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08a      	sub	sp, #40	@ 0x28
 80046c2:	af02      	add	r7, sp, #8
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	603b      	str	r3, [r7, #0]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d16d      	bne.n	80047ba <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_Transmit+0x2c>
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e066      	b.n	80047bc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	@ 0x21
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fc:	f7fd fd6e 	bl	80021dc <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	d108      	bne.n	800472a <HAL_UART_Transmit+0x6c>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e003      	b.n	8004732 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004732:	e02a      	b.n	800478a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	2180      	movs	r1, #128	@ 0x80
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fb15 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e036      	b.n	80047bc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004762:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	3302      	adds	r3, #2
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e007      	b.n	800477c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	781a      	ldrb	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1cf      	bne.n	8004734 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	2140      	movs	r1, #64	@ 0x40
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fae5 	bl	8004d6e <UART_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e006      	b.n	80047bc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e000      	b.n	80047bc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
  }
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3720      	adds	r7, #32
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d112      	bne.n	8004804 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <HAL_UART_Receive_IT+0x26>
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00b      	b.n	8004806 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	461a      	mov	r2, r3
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fb25 	bl	8004e4a <UART_Start_Receive_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	e000      	b.n	8004806 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b0ba      	sub	sp, #232	@ 0xe8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800484e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_UART_IRQHandler+0x66>
 8004862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fc01 	bl	8005076 <UART_Receive_IT>
      return;
 8004874:	e25b      	b.n	8004d2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80de 	beq.w	8004a3c <HAL_UART_IRQHandler+0x22c>
 8004880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800488c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004890:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80d1 	beq.w	8004a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_UART_IRQHandler+0xae>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f043 0201 	orr.w	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0xd2>
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f043 0202 	orr.w	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <HAL_UART_IRQHandler+0xf6>
 80048ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	f043 0204 	orr.w	r2, r3, #4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_UART_IRQHandler+0x126>
 8004912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0208 	orr.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 81f2 	beq.w	8004d24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_UART_IRQHandler+0x14e>
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fb8c 	bl	8005076 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_UART_IRQHandler+0x17a>
 8004982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04f      	beq.n	8004a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa96 	bl	8004ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d041      	beq.n	8004a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3314      	adds	r3, #20
 80049a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1d9      	bne.n	800499e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d013      	beq.n	8004a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bf0 <HAL_UART_IRQHandler+0x3e0>)
 80049f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd fd3e 	bl	8002480 <HAL_DMA_Abort_IT>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a14:	4610      	mov	r0, r2
 8004a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	e00e      	b.n	8004a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f993 	bl	8004d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a20:	e00a      	b.n	8004a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f98f 	bl	8004d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a28:	e006      	b.n	8004a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f98b 	bl	8004d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a36:	e175      	b.n	8004d24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	bf00      	nop
    return;
 8004a3a:	e173      	b.n	8004d24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 814f 	bne.w	8004ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8148 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8141 	beq.w	8004ce4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 80b6 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8145 	beq.w	8004d28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	f080 813e 	bcs.w	8004d28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ab2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	f000 8088 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004aec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1d9      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e1      	bne.n	8004b0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e3      	bne.n	8004b48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ba0:	f023 0310 	bic.w	r3, r3, #16
 8004ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fd fc1d 	bl	800240a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8b6 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bec:	e09c      	b.n	8004d28 <HAL_UART_IRQHandler+0x518>
 8004bee:	bf00      	nop
 8004bf0:	08004f81 	.word	0x08004f81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 808e 	beq.w	8004d2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8089 	beq.w	8004d2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e3      	bne.n	8004c1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	623b      	str	r3, [r7, #32]
   return(result);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3314      	adds	r3, #20
 8004c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e3      	bne.n	8004c52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0310 	bic.w	r3, r3, #16
 8004cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cbc:	61fa      	str	r2, [r7, #28]
 8004cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	69b9      	ldr	r1, [r7, #24]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e3      	bne.n	8004c98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f83b 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce2:	e023      	b.n	8004d2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_UART_IRQHandler+0x4f4>
 8004cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f953 	bl	8004fa8 <UART_Transmit_IT>
    return;
 8004d02:	e014      	b.n	8004d2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <HAL_UART_IRQHandler+0x51e>
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f992 	bl	8005046 <UART_EndTransmit_IT>
    return;
 8004d22:	e004      	b.n	8004d2e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d24:	bf00      	nop
 8004d26:	e002      	b.n	8004d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d2c:	bf00      	nop
  }
}
 8004d2e:	37e8      	adds	r7, #232	@ 0xe8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr

08004d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b090      	sub	sp, #64	@ 0x40
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	603b      	str	r3, [r7, #0]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7e:	e050      	b.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d04c      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	f7fd fa25 	bl	80021dc <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d241      	bcs.n	8004e22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	330c      	adds	r3, #12
 8004dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dbe:	637a      	str	r2, [r7, #52]	@ 0x34
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e5      	bne.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3314      	adds	r3, #20
 8004dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	613b      	str	r3, [r7, #16]
   return(result);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3314      	adds	r3, #20
 8004df0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004df2:	623a      	str	r2, [r7, #32]
 8004df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e5      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	bf0c      	ite	eq
 8004e32:	2301      	moveq	r3, #1
 8004e34:	2300      	movne	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d09f      	beq.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3740      	adds	r7, #64	@ 0x40
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	4613      	mov	r3, r2
 8004e56:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	88fa      	ldrh	r2, [r7, #6]
 8004e68:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2222      	movs	r2, #34	@ 0x22
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e8e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0220 	orr.w	r2, r2, #32
 8004eae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b095      	sub	sp, #84	@ 0x54
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ece:	e853 3f00 	ldrex	r3, [r3]
 8004ed2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ee4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	e853 3f00 	ldrex	r3, [r3]
 8004f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f20:	e841 2300 	strex	r3, r2, [r1]
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1e5      	bne.n	8004ef8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d119      	bne.n	8004f68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f023 0310 	bic.w	r3, r3, #16
 8004f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f54:	61ba      	str	r2, [r7, #24]
 8004f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	613b      	str	r3, [r7, #16]
   return(result);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f76:	bf00      	nop
 8004f78:	3754      	adds	r7, #84	@ 0x54
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f7ff fed3 	bl	8004d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b21      	cmp	r3, #33	@ 0x21
 8004fba:	d13e      	bne.n	800503a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc4:	d114      	bne.n	8004ff0 <UART_Transmit_IT+0x48>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d110      	bne.n	8004ff0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]
 8004fee:	e008      	b.n	8005002 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	1c59      	adds	r1, r3, #1
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6211      	str	r1, [r2, #32]
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29b      	uxth	r3, r3
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4619      	mov	r1, r3
 8005010:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005024:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005034:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
  }
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fe64 	bl	8004d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b08c      	sub	sp, #48	@ 0x30
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b22      	cmp	r3, #34	@ 0x22
 8005088:	f040 80ae 	bne.w	80051e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005094:	d117      	bne.n	80050c6 <UART_Receive_IT+0x50>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d113      	bne.n	80050c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80050c4:	e026      	b.n	8005114 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050d8:	d007      	beq.n	80050ea <UART_Receive_IT+0x74>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10a      	bne.n	80050f8 <UART_Receive_IT+0x82>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e008      	b.n	800510a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005104:	b2da      	uxtb	r2, r3
 8005106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005108:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4619      	mov	r1, r3
 8005122:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005124:	2b00      	cmp	r3, #0
 8005126:	d15d      	bne.n	80051e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0220 	bic.w	r2, r2, #32
 8005136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516a:	2b01      	cmp	r3, #1
 800516c:	d135      	bne.n	80051da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	613b      	str	r3, [r7, #16]
   return(result);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	627b      	str	r3, [r7, #36]	@ 0x24
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	623a      	str	r2, [r7, #32]
 8005196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	6a3a      	ldr	r2, [r7, #32]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e5      	bne.n	8005174 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d10a      	bne.n	80051cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fdc0 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
 80051d8:	e002      	b.n	80051e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc fdcc 	bl	8001d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e002      	b.n	80051ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e000      	b.n	80051ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3730      	adds	r7, #48	@ 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800522e:	f023 030c 	bic.w	r3, r3, #12
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	430b      	orrs	r3, r1
 800523a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2c      	ldr	r2, [pc, #176]	@ (8005308 <UART_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800525c:	f7fd ffd2 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	e002      	b.n	800526a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fd ffba 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 8005268:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	4a22      	ldr	r2, [pc, #136]	@ (800530c <UART_SetConfig+0x118>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	0119      	lsls	r1, r3, #4
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009a      	lsls	r2, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <UART_SetConfig+0x118>)
 80052a2:	fba3 0302 	umull	r0, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2064      	movs	r0, #100	@ 0x64
 80052aa:	fb00 f303 	mul.w	r3, r0, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	3332      	adds	r3, #50	@ 0x32
 80052b4:	4a15      	ldr	r2, [pc, #84]	@ (800530c <UART_SetConfig+0x118>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c0:	4419      	add	r1, r3
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009a      	lsls	r2, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052d8:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <UART_SetConfig+0x118>)
 80052da:	fba3 0302 	umull	r0, r3, r3, r2
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2064      	movs	r0, #100	@ 0x64
 80052e2:	fb00 f303 	mul.w	r3, r0, r3
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	3332      	adds	r3, #50	@ 0x32
 80052ec:	4a07      	ldr	r2, [pc, #28]	@ (800530c <UART_SetConfig+0x118>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	f003 020f 	and.w	r2, r3, #15
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	440a      	add	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013800 	.word	0x40013800
 800530c:	51eb851f 	.word	0x51eb851f

08005310 <siprintf>:
 8005310:	b40e      	push	{r1, r2, r3}
 8005312:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005316:	b500      	push	{lr}
 8005318:	b09c      	sub	sp, #112	@ 0x70
 800531a:	ab1d      	add	r3, sp, #116	@ 0x74
 800531c:	9002      	str	r0, [sp, #8]
 800531e:	9006      	str	r0, [sp, #24]
 8005320:	9107      	str	r1, [sp, #28]
 8005322:	9104      	str	r1, [sp, #16]
 8005324:	4808      	ldr	r0, [pc, #32]	@ (8005348 <siprintf+0x38>)
 8005326:	4909      	ldr	r1, [pc, #36]	@ (800534c <siprintf+0x3c>)
 8005328:	f853 2b04 	ldr.w	r2, [r3], #4
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	6800      	ldr	r0, [r0, #0]
 8005330:	a902      	add	r1, sp, #8
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	f000 f992 	bl	800565c <_svfiprintf_r>
 8005338:	2200      	movs	r2, #0
 800533a:	9b02      	ldr	r3, [sp, #8]
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	b01c      	add	sp, #112	@ 0x70
 8005340:	f85d eb04 	ldr.w	lr, [sp], #4
 8005344:	b003      	add	sp, #12
 8005346:	4770      	bx	lr
 8005348:	2000005c 	.word	0x2000005c
 800534c:	ffff0208 	.word	0xffff0208

08005350 <memset>:
 8005350:	4603      	mov	r3, r0
 8005352:	4402      	add	r2, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <__errno>:
 8005360:	4b01      	ldr	r3, [pc, #4]	@ (8005368 <__errno+0x8>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	2000005c 	.word	0x2000005c

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	2600      	movs	r6, #0
 8005370:	4d0c      	ldr	r5, [pc, #48]	@ (80053a4 <__libc_init_array+0x38>)
 8005372:	4c0d      	ldr	r4, [pc, #52]	@ (80053a8 <__libc_init_array+0x3c>)
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	f000 fc78 	bl	8005c70 <_init>
 8005380:	2600      	movs	r6, #0
 8005382:	4d0a      	ldr	r5, [pc, #40]	@ (80053ac <__libc_init_array+0x40>)
 8005384:	4c0a      	ldr	r4, [pc, #40]	@ (80053b0 <__libc_init_array+0x44>)
 8005386:	1b64      	subs	r4, r4, r5
 8005388:	10a4      	asrs	r4, r4, #2
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	08005cec 	.word	0x08005cec
 80053a8:	08005cec 	.word	0x08005cec
 80053ac:	08005cec 	.word	0x08005cec
 80053b0:	08005cf0 	.word	0x08005cf0

080053b4 <__retarget_lock_acquire_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <__retarget_lock_release_recursive>:
 80053b6:	4770      	bx	lr

080053b8 <_free_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4605      	mov	r5, r0
 80053bc:	2900      	cmp	r1, #0
 80053be:	d040      	beq.n	8005442 <_free_r+0x8a>
 80053c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c4:	1f0c      	subs	r4, r1, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bfb8      	it	lt
 80053ca:	18e4      	addlt	r4, r4, r3
 80053cc:	f000 f8de 	bl	800558c <__malloc_lock>
 80053d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005444 <_free_r+0x8c>)
 80053d2:	6813      	ldr	r3, [r2, #0]
 80053d4:	b933      	cbnz	r3, 80053e4 <_free_r+0x2c>
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	6014      	str	r4, [r2, #0]
 80053da:	4628      	mov	r0, r5
 80053dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e0:	f000 b8da 	b.w	8005598 <__malloc_unlock>
 80053e4:	42a3      	cmp	r3, r4
 80053e6:	d908      	bls.n	80053fa <_free_r+0x42>
 80053e8:	6820      	ldr	r0, [r4, #0]
 80053ea:	1821      	adds	r1, r4, r0
 80053ec:	428b      	cmp	r3, r1
 80053ee:	bf01      	itttt	eq
 80053f0:	6819      	ldreq	r1, [r3, #0]
 80053f2:	685b      	ldreq	r3, [r3, #4]
 80053f4:	1809      	addeq	r1, r1, r0
 80053f6:	6021      	streq	r1, [r4, #0]
 80053f8:	e7ed      	b.n	80053d6 <_free_r+0x1e>
 80053fa:	461a      	mov	r2, r3
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	b10b      	cbz	r3, 8005404 <_free_r+0x4c>
 8005400:	42a3      	cmp	r3, r4
 8005402:	d9fa      	bls.n	80053fa <_free_r+0x42>
 8005404:	6811      	ldr	r1, [r2, #0]
 8005406:	1850      	adds	r0, r2, r1
 8005408:	42a0      	cmp	r0, r4
 800540a:	d10b      	bne.n	8005424 <_free_r+0x6c>
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	4401      	add	r1, r0
 8005410:	1850      	adds	r0, r2, r1
 8005412:	4283      	cmp	r3, r0
 8005414:	6011      	str	r1, [r2, #0]
 8005416:	d1e0      	bne.n	80053da <_free_r+0x22>
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4408      	add	r0, r1
 800541e:	6010      	str	r0, [r2, #0]
 8005420:	6053      	str	r3, [r2, #4]
 8005422:	e7da      	b.n	80053da <_free_r+0x22>
 8005424:	d902      	bls.n	800542c <_free_r+0x74>
 8005426:	230c      	movs	r3, #12
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	e7d6      	b.n	80053da <_free_r+0x22>
 800542c:	6820      	ldr	r0, [r4, #0]
 800542e:	1821      	adds	r1, r4, r0
 8005430:	428b      	cmp	r3, r1
 8005432:	bf01      	itttt	eq
 8005434:	6819      	ldreq	r1, [r3, #0]
 8005436:	685b      	ldreq	r3, [r3, #4]
 8005438:	1809      	addeq	r1, r1, r0
 800543a:	6021      	streq	r1, [r4, #0]
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	6054      	str	r4, [r2, #4]
 8005440:	e7cb      	b.n	80053da <_free_r+0x22>
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000448 	.word	0x20000448

08005448 <sbrk_aligned>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4e0f      	ldr	r6, [pc, #60]	@ (8005488 <sbrk_aligned+0x40>)
 800544c:	460c      	mov	r4, r1
 800544e:	6831      	ldr	r1, [r6, #0]
 8005450:	4605      	mov	r5, r0
 8005452:	b911      	cbnz	r1, 800545a <sbrk_aligned+0x12>
 8005454:	f000 fbaa 	bl	8005bac <_sbrk_r>
 8005458:	6030      	str	r0, [r6, #0]
 800545a:	4621      	mov	r1, r4
 800545c:	4628      	mov	r0, r5
 800545e:	f000 fba5 	bl	8005bac <_sbrk_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	d103      	bne.n	800546e <sbrk_aligned+0x26>
 8005466:	f04f 34ff 	mov.w	r4, #4294967295
 800546a:	4620      	mov	r0, r4
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	1cc4      	adds	r4, r0, #3
 8005470:	f024 0403 	bic.w	r4, r4, #3
 8005474:	42a0      	cmp	r0, r4
 8005476:	d0f8      	beq.n	800546a <sbrk_aligned+0x22>
 8005478:	1a21      	subs	r1, r4, r0
 800547a:	4628      	mov	r0, r5
 800547c:	f000 fb96 	bl	8005bac <_sbrk_r>
 8005480:	3001      	adds	r0, #1
 8005482:	d1f2      	bne.n	800546a <sbrk_aligned+0x22>
 8005484:	e7ef      	b.n	8005466 <sbrk_aligned+0x1e>
 8005486:	bf00      	nop
 8005488:	20000444 	.word	0x20000444

0800548c <_malloc_r>:
 800548c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005490:	1ccd      	adds	r5, r1, #3
 8005492:	f025 0503 	bic.w	r5, r5, #3
 8005496:	3508      	adds	r5, #8
 8005498:	2d0c      	cmp	r5, #12
 800549a:	bf38      	it	cc
 800549c:	250c      	movcc	r5, #12
 800549e:	2d00      	cmp	r5, #0
 80054a0:	4606      	mov	r6, r0
 80054a2:	db01      	blt.n	80054a8 <_malloc_r+0x1c>
 80054a4:	42a9      	cmp	r1, r5
 80054a6:	d904      	bls.n	80054b2 <_malloc_r+0x26>
 80054a8:	230c      	movs	r3, #12
 80054aa:	6033      	str	r3, [r6, #0]
 80054ac:	2000      	movs	r0, #0
 80054ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005588 <_malloc_r+0xfc>
 80054b6:	f000 f869 	bl	800558c <__malloc_lock>
 80054ba:	f8d8 3000 	ldr.w	r3, [r8]
 80054be:	461c      	mov	r4, r3
 80054c0:	bb44      	cbnz	r4, 8005514 <_malloc_r+0x88>
 80054c2:	4629      	mov	r1, r5
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff ffbf 	bl	8005448 <sbrk_aligned>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	4604      	mov	r4, r0
 80054ce:	d158      	bne.n	8005582 <_malloc_r+0xf6>
 80054d0:	f8d8 4000 	ldr.w	r4, [r8]
 80054d4:	4627      	mov	r7, r4
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	d143      	bne.n	8005562 <_malloc_r+0xd6>
 80054da:	2c00      	cmp	r4, #0
 80054dc:	d04b      	beq.n	8005576 <_malloc_r+0xea>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	eb04 0903 	add.w	r9, r4, r3
 80054e8:	f000 fb60 	bl	8005bac <_sbrk_r>
 80054ec:	4581      	cmp	r9, r0
 80054ee:	d142      	bne.n	8005576 <_malloc_r+0xea>
 80054f0:	6821      	ldr	r1, [r4, #0]
 80054f2:	4630      	mov	r0, r6
 80054f4:	1a6d      	subs	r5, r5, r1
 80054f6:	4629      	mov	r1, r5
 80054f8:	f7ff ffa6 	bl	8005448 <sbrk_aligned>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d03a      	beq.n	8005576 <_malloc_r+0xea>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	442b      	add	r3, r5
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	f8d8 3000 	ldr.w	r3, [r8]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	bb62      	cbnz	r2, 8005568 <_malloc_r+0xdc>
 800550e:	f8c8 7000 	str.w	r7, [r8]
 8005512:	e00f      	b.n	8005534 <_malloc_r+0xa8>
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	1b52      	subs	r2, r2, r5
 8005518:	d420      	bmi.n	800555c <_malloc_r+0xd0>
 800551a:	2a0b      	cmp	r2, #11
 800551c:	d917      	bls.n	800554e <_malloc_r+0xc2>
 800551e:	1961      	adds	r1, r4, r5
 8005520:	42a3      	cmp	r3, r4
 8005522:	6025      	str	r5, [r4, #0]
 8005524:	bf18      	it	ne
 8005526:	6059      	strne	r1, [r3, #4]
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	bf08      	it	eq
 800552c:	f8c8 1000 	streq.w	r1, [r8]
 8005530:	5162      	str	r2, [r4, r5]
 8005532:	604b      	str	r3, [r1, #4]
 8005534:	4630      	mov	r0, r6
 8005536:	f000 f82f 	bl	8005598 <__malloc_unlock>
 800553a:	f104 000b 	add.w	r0, r4, #11
 800553e:	1d23      	adds	r3, r4, #4
 8005540:	f020 0007 	bic.w	r0, r0, #7
 8005544:	1ac2      	subs	r2, r0, r3
 8005546:	bf1c      	itt	ne
 8005548:	1a1b      	subne	r3, r3, r0
 800554a:	50a3      	strne	r3, [r4, r2]
 800554c:	e7af      	b.n	80054ae <_malloc_r+0x22>
 800554e:	6862      	ldr	r2, [r4, #4]
 8005550:	42a3      	cmp	r3, r4
 8005552:	bf0c      	ite	eq
 8005554:	f8c8 2000 	streq.w	r2, [r8]
 8005558:	605a      	strne	r2, [r3, #4]
 800555a:	e7eb      	b.n	8005534 <_malloc_r+0xa8>
 800555c:	4623      	mov	r3, r4
 800555e:	6864      	ldr	r4, [r4, #4]
 8005560:	e7ae      	b.n	80054c0 <_malloc_r+0x34>
 8005562:	463c      	mov	r4, r7
 8005564:	687f      	ldr	r7, [r7, #4]
 8005566:	e7b6      	b.n	80054d6 <_malloc_r+0x4a>
 8005568:	461a      	mov	r2, r3
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	42a3      	cmp	r3, r4
 800556e:	d1fb      	bne.n	8005568 <_malloc_r+0xdc>
 8005570:	2300      	movs	r3, #0
 8005572:	6053      	str	r3, [r2, #4]
 8005574:	e7de      	b.n	8005534 <_malloc_r+0xa8>
 8005576:	230c      	movs	r3, #12
 8005578:	4630      	mov	r0, r6
 800557a:	6033      	str	r3, [r6, #0]
 800557c:	f000 f80c 	bl	8005598 <__malloc_unlock>
 8005580:	e794      	b.n	80054ac <_malloc_r+0x20>
 8005582:	6005      	str	r5, [r0, #0]
 8005584:	e7d6      	b.n	8005534 <_malloc_r+0xa8>
 8005586:	bf00      	nop
 8005588:	20000448 	.word	0x20000448

0800558c <__malloc_lock>:
 800558c:	4801      	ldr	r0, [pc, #4]	@ (8005594 <__malloc_lock+0x8>)
 800558e:	f7ff bf11 	b.w	80053b4 <__retarget_lock_acquire_recursive>
 8005592:	bf00      	nop
 8005594:	20000440 	.word	0x20000440

08005598 <__malloc_unlock>:
 8005598:	4801      	ldr	r0, [pc, #4]	@ (80055a0 <__malloc_unlock+0x8>)
 800559a:	f7ff bf0c 	b.w	80053b6 <__retarget_lock_release_recursive>
 800559e:	bf00      	nop
 80055a0:	20000440 	.word	0x20000440

080055a4 <__ssputs_r>:
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	461f      	mov	r7, r3
 80055aa:	688e      	ldr	r6, [r1, #8]
 80055ac:	4682      	mov	sl, r0
 80055ae:	42be      	cmp	r6, r7
 80055b0:	460c      	mov	r4, r1
 80055b2:	4690      	mov	r8, r2
 80055b4:	680b      	ldr	r3, [r1, #0]
 80055b6:	d82d      	bhi.n	8005614 <__ssputs_r+0x70>
 80055b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055c0:	d026      	beq.n	8005610 <__ssputs_r+0x6c>
 80055c2:	6965      	ldr	r5, [r4, #20]
 80055c4:	6909      	ldr	r1, [r1, #16]
 80055c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ca:	eba3 0901 	sub.w	r9, r3, r1
 80055ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055d2:	1c7b      	adds	r3, r7, #1
 80055d4:	444b      	add	r3, r9
 80055d6:	106d      	asrs	r5, r5, #1
 80055d8:	429d      	cmp	r5, r3
 80055da:	bf38      	it	cc
 80055dc:	461d      	movcc	r5, r3
 80055de:	0553      	lsls	r3, r2, #21
 80055e0:	d527      	bpl.n	8005632 <__ssputs_r+0x8e>
 80055e2:	4629      	mov	r1, r5
 80055e4:	f7ff ff52 	bl	800548c <_malloc_r>
 80055e8:	4606      	mov	r6, r0
 80055ea:	b360      	cbz	r0, 8005646 <__ssputs_r+0xa2>
 80055ec:	464a      	mov	r2, r9
 80055ee:	6921      	ldr	r1, [r4, #16]
 80055f0:	f000 fafa 	bl	8005be8 <memcpy>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	6126      	str	r6, [r4, #16]
 8005602:	444e      	add	r6, r9
 8005604:	6026      	str	r6, [r4, #0]
 8005606:	463e      	mov	r6, r7
 8005608:	6165      	str	r5, [r4, #20]
 800560a:	eba5 0509 	sub.w	r5, r5, r9
 800560e:	60a5      	str	r5, [r4, #8]
 8005610:	42be      	cmp	r6, r7
 8005612:	d900      	bls.n	8005616 <__ssputs_r+0x72>
 8005614:	463e      	mov	r6, r7
 8005616:	4632      	mov	r2, r6
 8005618:	4641      	mov	r1, r8
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	f000 faac 	bl	8005b78 <memmove>
 8005620:	2000      	movs	r0, #0
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	4433      	add	r3, r6
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005632:	462a      	mov	r2, r5
 8005634:	f000 fae6 	bl	8005c04 <_realloc_r>
 8005638:	4606      	mov	r6, r0
 800563a:	2800      	cmp	r0, #0
 800563c:	d1e0      	bne.n	8005600 <__ssputs_r+0x5c>
 800563e:	4650      	mov	r0, sl
 8005640:	6921      	ldr	r1, [r4, #16]
 8005642:	f7ff feb9 	bl	80053b8 <_free_r>
 8005646:	230c      	movs	r3, #12
 8005648:	f8ca 3000 	str.w	r3, [sl]
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	e7e9      	b.n	800562e <__ssputs_r+0x8a>
	...

0800565c <_svfiprintf_r>:
 800565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005660:	4698      	mov	r8, r3
 8005662:	898b      	ldrh	r3, [r1, #12]
 8005664:	4607      	mov	r7, r0
 8005666:	061b      	lsls	r3, r3, #24
 8005668:	460d      	mov	r5, r1
 800566a:	4614      	mov	r4, r2
 800566c:	b09d      	sub	sp, #116	@ 0x74
 800566e:	d510      	bpl.n	8005692 <_svfiprintf_r+0x36>
 8005670:	690b      	ldr	r3, [r1, #16]
 8005672:	b973      	cbnz	r3, 8005692 <_svfiprintf_r+0x36>
 8005674:	2140      	movs	r1, #64	@ 0x40
 8005676:	f7ff ff09 	bl	800548c <_malloc_r>
 800567a:	6028      	str	r0, [r5, #0]
 800567c:	6128      	str	r0, [r5, #16]
 800567e:	b930      	cbnz	r0, 800568e <_svfiprintf_r+0x32>
 8005680:	230c      	movs	r3, #12
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	b01d      	add	sp, #116	@ 0x74
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568e:	2340      	movs	r3, #64	@ 0x40
 8005690:	616b      	str	r3, [r5, #20]
 8005692:	2300      	movs	r3, #0
 8005694:	9309      	str	r3, [sp, #36]	@ 0x24
 8005696:	2320      	movs	r3, #32
 8005698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800569c:	2330      	movs	r3, #48	@ 0x30
 800569e:	f04f 0901 	mov.w	r9, #1
 80056a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005840 <_svfiprintf_r+0x1e4>
 80056aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ae:	4623      	mov	r3, r4
 80056b0:	469a      	mov	sl, r3
 80056b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056b6:	b10a      	cbz	r2, 80056bc <_svfiprintf_r+0x60>
 80056b8:	2a25      	cmp	r2, #37	@ 0x25
 80056ba:	d1f9      	bne.n	80056b0 <_svfiprintf_r+0x54>
 80056bc:	ebba 0b04 	subs.w	fp, sl, r4
 80056c0:	d00b      	beq.n	80056da <_svfiprintf_r+0x7e>
 80056c2:	465b      	mov	r3, fp
 80056c4:	4622      	mov	r2, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	4638      	mov	r0, r7
 80056ca:	f7ff ff6b 	bl	80055a4 <__ssputs_r>
 80056ce:	3001      	adds	r0, #1
 80056d0:	f000 80a7 	beq.w	8005822 <_svfiprintf_r+0x1c6>
 80056d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056d6:	445a      	add	r2, fp
 80056d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80056da:	f89a 3000 	ldrb.w	r3, [sl]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 809f 	beq.w	8005822 <_svfiprintf_r+0x1c6>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f04f 32ff 	mov.w	r2, #4294967295
 80056ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056ee:	f10a 0a01 	add.w	sl, sl, #1
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80056fc:	4654      	mov	r4, sl
 80056fe:	2205      	movs	r2, #5
 8005700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005704:	484e      	ldr	r0, [pc, #312]	@ (8005840 <_svfiprintf_r+0x1e4>)
 8005706:	f000 fa61 	bl	8005bcc <memchr>
 800570a:	9a04      	ldr	r2, [sp, #16]
 800570c:	b9d8      	cbnz	r0, 8005746 <_svfiprintf_r+0xea>
 800570e:	06d0      	lsls	r0, r2, #27
 8005710:	bf44      	itt	mi
 8005712:	2320      	movmi	r3, #32
 8005714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005718:	0711      	lsls	r1, r2, #28
 800571a:	bf44      	itt	mi
 800571c:	232b      	movmi	r3, #43	@ 0x2b
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005722:	f89a 3000 	ldrb.w	r3, [sl]
 8005726:	2b2a      	cmp	r3, #42	@ 0x2a
 8005728:	d015      	beq.n	8005756 <_svfiprintf_r+0xfa>
 800572a:	4654      	mov	r4, sl
 800572c:	2000      	movs	r0, #0
 800572e:	f04f 0c0a 	mov.w	ip, #10
 8005732:	9a07      	ldr	r2, [sp, #28]
 8005734:	4621      	mov	r1, r4
 8005736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800573a:	3b30      	subs	r3, #48	@ 0x30
 800573c:	2b09      	cmp	r3, #9
 800573e:	d94b      	bls.n	80057d8 <_svfiprintf_r+0x17c>
 8005740:	b1b0      	cbz	r0, 8005770 <_svfiprintf_r+0x114>
 8005742:	9207      	str	r2, [sp, #28]
 8005744:	e014      	b.n	8005770 <_svfiprintf_r+0x114>
 8005746:	eba0 0308 	sub.w	r3, r0, r8
 800574a:	fa09 f303 	lsl.w	r3, r9, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	46a2      	mov	sl, r4
 8005752:	9304      	str	r3, [sp, #16]
 8005754:	e7d2      	b.n	80056fc <_svfiprintf_r+0xa0>
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	1d19      	adds	r1, r3, #4
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	9103      	str	r1, [sp, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfbb      	ittet	lt
 8005762:	425b      	neglt	r3, r3
 8005764:	f042 0202 	orrlt.w	r2, r2, #2
 8005768:	9307      	strge	r3, [sp, #28]
 800576a:	9307      	strlt	r3, [sp, #28]
 800576c:	bfb8      	it	lt
 800576e:	9204      	strlt	r2, [sp, #16]
 8005770:	7823      	ldrb	r3, [r4, #0]
 8005772:	2b2e      	cmp	r3, #46	@ 0x2e
 8005774:	d10a      	bne.n	800578c <_svfiprintf_r+0x130>
 8005776:	7863      	ldrb	r3, [r4, #1]
 8005778:	2b2a      	cmp	r3, #42	@ 0x2a
 800577a:	d132      	bne.n	80057e2 <_svfiprintf_r+0x186>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	3402      	adds	r4, #2
 8005780:	1d1a      	adds	r2, r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	9203      	str	r2, [sp, #12]
 8005786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800578a:	9305      	str	r3, [sp, #20]
 800578c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005844 <_svfiprintf_r+0x1e8>
 8005790:	2203      	movs	r2, #3
 8005792:	4650      	mov	r0, sl
 8005794:	7821      	ldrb	r1, [r4, #0]
 8005796:	f000 fa19 	bl	8005bcc <memchr>
 800579a:	b138      	cbz	r0, 80057ac <_svfiprintf_r+0x150>
 800579c:	2240      	movs	r2, #64	@ 0x40
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	eba0 000a 	sub.w	r0, r0, sl
 80057a4:	4082      	lsls	r2, r0
 80057a6:	4313      	orrs	r3, r2
 80057a8:	3401      	adds	r4, #1
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b0:	2206      	movs	r2, #6
 80057b2:	4825      	ldr	r0, [pc, #148]	@ (8005848 <_svfiprintf_r+0x1ec>)
 80057b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057b8:	f000 fa08 	bl	8005bcc <memchr>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d036      	beq.n	800582e <_svfiprintf_r+0x1d2>
 80057c0:	4b22      	ldr	r3, [pc, #136]	@ (800584c <_svfiprintf_r+0x1f0>)
 80057c2:	bb1b      	cbnz	r3, 800580c <_svfiprintf_r+0x1b0>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	3307      	adds	r3, #7
 80057c8:	f023 0307 	bic.w	r3, r3, #7
 80057cc:	3308      	adds	r3, #8
 80057ce:	9303      	str	r3, [sp, #12]
 80057d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d2:	4433      	add	r3, r6
 80057d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d6:	e76a      	b.n	80056ae <_svfiprintf_r+0x52>
 80057d8:	460c      	mov	r4, r1
 80057da:	2001      	movs	r0, #1
 80057dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e0:	e7a8      	b.n	8005734 <_svfiprintf_r+0xd8>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4619      	mov	r1, r3
 80057ea:	3401      	adds	r4, #1
 80057ec:	9305      	str	r3, [sp, #20]
 80057ee:	4620      	mov	r0, r4
 80057f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057f4:	3a30      	subs	r2, #48	@ 0x30
 80057f6:	2a09      	cmp	r2, #9
 80057f8:	d903      	bls.n	8005802 <_svfiprintf_r+0x1a6>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0c6      	beq.n	800578c <_svfiprintf_r+0x130>
 80057fe:	9105      	str	r1, [sp, #20]
 8005800:	e7c4      	b.n	800578c <_svfiprintf_r+0x130>
 8005802:	4604      	mov	r4, r0
 8005804:	2301      	movs	r3, #1
 8005806:	fb0c 2101 	mla	r1, ip, r1, r2
 800580a:	e7f0      	b.n	80057ee <_svfiprintf_r+0x192>
 800580c:	ab03      	add	r3, sp, #12
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	462a      	mov	r2, r5
 8005812:	4638      	mov	r0, r7
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <_svfiprintf_r+0x1f4>)
 8005816:	a904      	add	r1, sp, #16
 8005818:	f3af 8000 	nop.w
 800581c:	1c42      	adds	r2, r0, #1
 800581e:	4606      	mov	r6, r0
 8005820:	d1d6      	bne.n	80057d0 <_svfiprintf_r+0x174>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	065b      	lsls	r3, r3, #25
 8005826:	f53f af2d 	bmi.w	8005684 <_svfiprintf_r+0x28>
 800582a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800582c:	e72c      	b.n	8005688 <_svfiprintf_r+0x2c>
 800582e:	ab03      	add	r3, sp, #12
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	462a      	mov	r2, r5
 8005834:	4638      	mov	r0, r7
 8005836:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <_svfiprintf_r+0x1f4>)
 8005838:	a904      	add	r1, sp, #16
 800583a:	f000 f87d 	bl	8005938 <_printf_i>
 800583e:	e7ed      	b.n	800581c <_svfiprintf_r+0x1c0>
 8005840:	08005cb6 	.word	0x08005cb6
 8005844:	08005cbc 	.word	0x08005cbc
 8005848:	08005cc0 	.word	0x08005cc0
 800584c:	00000000 	.word	0x00000000
 8005850:	080055a5 	.word	0x080055a5

08005854 <_printf_common>:
 8005854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	4616      	mov	r6, r2
 800585a:	4698      	mov	r8, r3
 800585c:	688a      	ldr	r2, [r1, #8]
 800585e:	690b      	ldr	r3, [r1, #16]
 8005860:	4607      	mov	r7, r0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfb8      	it	lt
 8005866:	4613      	movlt	r3, r2
 8005868:	6033      	str	r3, [r6, #0]
 800586a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800586e:	460c      	mov	r4, r1
 8005870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005874:	b10a      	cbz	r2, 800587a <_printf_common+0x26>
 8005876:	3301      	adds	r3, #1
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	0699      	lsls	r1, r3, #26
 800587e:	bf42      	ittt	mi
 8005880:	6833      	ldrmi	r3, [r6, #0]
 8005882:	3302      	addmi	r3, #2
 8005884:	6033      	strmi	r3, [r6, #0]
 8005886:	6825      	ldr	r5, [r4, #0]
 8005888:	f015 0506 	ands.w	r5, r5, #6
 800588c:	d106      	bne.n	800589c <_printf_common+0x48>
 800588e:	f104 0a19 	add.w	sl, r4, #25
 8005892:	68e3      	ldr	r3, [r4, #12]
 8005894:	6832      	ldr	r2, [r6, #0]
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	42ab      	cmp	r3, r5
 800589a:	dc2b      	bgt.n	80058f4 <_printf_common+0xa0>
 800589c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058a0:	6822      	ldr	r2, [r4, #0]
 80058a2:	3b00      	subs	r3, #0
 80058a4:	bf18      	it	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	0692      	lsls	r2, r2, #26
 80058aa:	d430      	bmi.n	800590e <_printf_common+0xba>
 80058ac:	4641      	mov	r1, r8
 80058ae:	4638      	mov	r0, r7
 80058b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058b4:	47c8      	blx	r9
 80058b6:	3001      	adds	r0, #1
 80058b8:	d023      	beq.n	8005902 <_printf_common+0xae>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	f003 0306 	and.w	r3, r3, #6
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf14      	ite	ne
 80058c6:	2500      	movne	r5, #0
 80058c8:	6833      	ldreq	r3, [r6, #0]
 80058ca:	f04f 0600 	mov.w	r6, #0
 80058ce:	bf08      	it	eq
 80058d0:	68e5      	ldreq	r5, [r4, #12]
 80058d2:	f104 041a 	add.w	r4, r4, #26
 80058d6:	bf08      	it	eq
 80058d8:	1aed      	subeq	r5, r5, r3
 80058da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058de:	bf08      	it	eq
 80058e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bfc4      	itt	gt
 80058e8:	1a9b      	subgt	r3, r3, r2
 80058ea:	18ed      	addgt	r5, r5, r3
 80058ec:	42b5      	cmp	r5, r6
 80058ee:	d11a      	bne.n	8005926 <_printf_common+0xd2>
 80058f0:	2000      	movs	r0, #0
 80058f2:	e008      	b.n	8005906 <_printf_common+0xb2>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4652      	mov	r2, sl
 80058f8:	4641      	mov	r1, r8
 80058fa:	4638      	mov	r0, r7
 80058fc:	47c8      	blx	r9
 80058fe:	3001      	adds	r0, #1
 8005900:	d103      	bne.n	800590a <_printf_common+0xb6>
 8005902:	f04f 30ff 	mov.w	r0, #4294967295
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	3501      	adds	r5, #1
 800590c:	e7c1      	b.n	8005892 <_printf_common+0x3e>
 800590e:	2030      	movs	r0, #48	@ 0x30
 8005910:	18e1      	adds	r1, r4, r3
 8005912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800591c:	4422      	add	r2, r4
 800591e:	3302      	adds	r3, #2
 8005920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005924:	e7c2      	b.n	80058ac <_printf_common+0x58>
 8005926:	2301      	movs	r3, #1
 8005928:	4622      	mov	r2, r4
 800592a:	4641      	mov	r1, r8
 800592c:	4638      	mov	r0, r7
 800592e:	47c8      	blx	r9
 8005930:	3001      	adds	r0, #1
 8005932:	d0e6      	beq.n	8005902 <_printf_common+0xae>
 8005934:	3601      	adds	r6, #1
 8005936:	e7d9      	b.n	80058ec <_printf_common+0x98>

08005938 <_printf_i>:
 8005938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	7e0f      	ldrb	r7, [r1, #24]
 800593e:	4691      	mov	r9, r2
 8005940:	2f78      	cmp	r7, #120	@ 0x78
 8005942:	4680      	mov	r8, r0
 8005944:	460c      	mov	r4, r1
 8005946:	469a      	mov	sl, r3
 8005948:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800594a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800594e:	d807      	bhi.n	8005960 <_printf_i+0x28>
 8005950:	2f62      	cmp	r7, #98	@ 0x62
 8005952:	d80a      	bhi.n	800596a <_printf_i+0x32>
 8005954:	2f00      	cmp	r7, #0
 8005956:	f000 80d3 	beq.w	8005b00 <_printf_i+0x1c8>
 800595a:	2f58      	cmp	r7, #88	@ 0x58
 800595c:	f000 80ba 	beq.w	8005ad4 <_printf_i+0x19c>
 8005960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005968:	e03a      	b.n	80059e0 <_printf_i+0xa8>
 800596a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800596e:	2b15      	cmp	r3, #21
 8005970:	d8f6      	bhi.n	8005960 <_printf_i+0x28>
 8005972:	a101      	add	r1, pc, #4	@ (adr r1, 8005978 <_printf_i+0x40>)
 8005974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005961 	.word	0x08005961
 8005984:	08005961 	.word	0x08005961
 8005988:	08005961 	.word	0x08005961
 800598c:	08005961 	.word	0x08005961
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005961 	.word	0x08005961
 8005998:	08005961 	.word	0x08005961
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005961 	.word	0x08005961
 80059a4:	08005ae7 	.word	0x08005ae7
 80059a8:	08005a0f 	.word	0x08005a0f
 80059ac:	08005aa1 	.word	0x08005aa1
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005961 	.word	0x08005961
 80059b8:	08005b09 	.word	0x08005b09
 80059bc:	08005961 	.word	0x08005961
 80059c0:	08005a0f 	.word	0x08005a0f
 80059c4:	08005961 	.word	0x08005961
 80059c8:	08005961 	.word	0x08005961
 80059cc:	08005aa9 	.word	0x08005aa9
 80059d0:	6833      	ldr	r3, [r6, #0]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6032      	str	r2, [r6, #0]
 80059d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e09e      	b.n	8005b22 <_printf_i+0x1ea>
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	6820      	ldr	r0, [r4, #0]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	6031      	str	r1, [r6, #0]
 80059ec:	0606      	lsls	r6, r0, #24
 80059ee:	d501      	bpl.n	80059f4 <_printf_i+0xbc>
 80059f0:	681d      	ldr	r5, [r3, #0]
 80059f2:	e003      	b.n	80059fc <_printf_i+0xc4>
 80059f4:	0645      	lsls	r5, r0, #25
 80059f6:	d5fb      	bpl.n	80059f0 <_printf_i+0xb8>
 80059f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059fc:	2d00      	cmp	r5, #0
 80059fe:	da03      	bge.n	8005a08 <_printf_i+0xd0>
 8005a00:	232d      	movs	r3, #45	@ 0x2d
 8005a02:	426d      	negs	r5, r5
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a08:	230a      	movs	r3, #10
 8005a0a:	4859      	ldr	r0, [pc, #356]	@ (8005b70 <_printf_i+0x238>)
 8005a0c:	e011      	b.n	8005a32 <_printf_i+0xfa>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	0608      	lsls	r0, r1, #24
 8005a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a18:	d402      	bmi.n	8005a20 <_printf_i+0xe8>
 8005a1a:	0649      	lsls	r1, r1, #25
 8005a1c:	bf48      	it	mi
 8005a1e:	b2ad      	uxthmi	r5, r5
 8005a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a22:	6033      	str	r3, [r6, #0]
 8005a24:	bf14      	ite	ne
 8005a26:	230a      	movne	r3, #10
 8005a28:	2308      	moveq	r3, #8
 8005a2a:	4851      	ldr	r0, [pc, #324]	@ (8005b70 <_printf_i+0x238>)
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a32:	6866      	ldr	r6, [r4, #4]
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	bfa8      	it	ge
 8005a38:	6821      	ldrge	r1, [r4, #0]
 8005a3a:	60a6      	str	r6, [r4, #8]
 8005a3c:	bfa4      	itt	ge
 8005a3e:	f021 0104 	bicge.w	r1, r1, #4
 8005a42:	6021      	strge	r1, [r4, #0]
 8005a44:	b90d      	cbnz	r5, 8005a4a <_printf_i+0x112>
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d04b      	beq.n	8005ae2 <_printf_i+0x1aa>
 8005a4a:	4616      	mov	r6, r2
 8005a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a50:	fb03 5711 	mls	r7, r3, r1, r5
 8005a54:	5dc7      	ldrb	r7, [r0, r7]
 8005a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a5a:	462f      	mov	r7, r5
 8005a5c:	42bb      	cmp	r3, r7
 8005a5e:	460d      	mov	r5, r1
 8005a60:	d9f4      	bls.n	8005a4c <_printf_i+0x114>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d10b      	bne.n	8005a7e <_printf_i+0x146>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	07df      	lsls	r7, r3, #31
 8005a6a:	d508      	bpl.n	8005a7e <_printf_i+0x146>
 8005a6c:	6923      	ldr	r3, [r4, #16]
 8005a6e:	6861      	ldr	r1, [r4, #4]
 8005a70:	4299      	cmp	r1, r3
 8005a72:	bfde      	ittt	le
 8005a74:	2330      	movle	r3, #48	@ 0x30
 8005a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a7e:	1b92      	subs	r2, r2, r6
 8005a80:	6122      	str	r2, [r4, #16]
 8005a82:	464b      	mov	r3, r9
 8005a84:	4621      	mov	r1, r4
 8005a86:	4640      	mov	r0, r8
 8005a88:	f8cd a000 	str.w	sl, [sp]
 8005a8c:	aa03      	add	r2, sp, #12
 8005a8e:	f7ff fee1 	bl	8005854 <_printf_common>
 8005a92:	3001      	adds	r0, #1
 8005a94:	d14a      	bne.n	8005b2c <_printf_i+0x1f4>
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	b004      	add	sp, #16
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f043 0320 	orr.w	r3, r3, #32
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	2778      	movs	r7, #120	@ 0x78
 8005aaa:	4832      	ldr	r0, [pc, #200]	@ (8005b74 <_printf_i+0x23c>)
 8005aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	6831      	ldr	r1, [r6, #0]
 8005ab4:	061f      	lsls	r7, r3, #24
 8005ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aba:	d402      	bmi.n	8005ac2 <_printf_i+0x18a>
 8005abc:	065f      	lsls	r7, r3, #25
 8005abe:	bf48      	it	mi
 8005ac0:	b2ad      	uxthmi	r5, r5
 8005ac2:	6031      	str	r1, [r6, #0]
 8005ac4:	07d9      	lsls	r1, r3, #31
 8005ac6:	bf44      	itt	mi
 8005ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8005acc:	6023      	strmi	r3, [r4, #0]
 8005ace:	b11d      	cbz	r5, 8005ad8 <_printf_i+0x1a0>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	e7ab      	b.n	8005a2c <_printf_i+0xf4>
 8005ad4:	4826      	ldr	r0, [pc, #152]	@ (8005b70 <_printf_i+0x238>)
 8005ad6:	e7e9      	b.n	8005aac <_printf_i+0x174>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	f023 0320 	bic.w	r3, r3, #32
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	e7f6      	b.n	8005ad0 <_printf_i+0x198>
 8005ae2:	4616      	mov	r6, r2
 8005ae4:	e7bd      	b.n	8005a62 <_printf_i+0x12a>
 8005ae6:	6833      	ldr	r3, [r6, #0]
 8005ae8:	6825      	ldr	r5, [r4, #0]
 8005aea:	1d18      	adds	r0, r3, #4
 8005aec:	6961      	ldr	r1, [r4, #20]
 8005aee:	6030      	str	r0, [r6, #0]
 8005af0:	062e      	lsls	r6, r5, #24
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	d501      	bpl.n	8005afa <_printf_i+0x1c2>
 8005af6:	6019      	str	r1, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <_printf_i+0x1c8>
 8005afa:	0668      	lsls	r0, r5, #25
 8005afc:	d5fb      	bpl.n	8005af6 <_printf_i+0x1be>
 8005afe:	8019      	strh	r1, [r3, #0]
 8005b00:	2300      	movs	r3, #0
 8005b02:	4616      	mov	r6, r2
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	e7bc      	b.n	8005a82 <_printf_i+0x14a>
 8005b08:	6833      	ldr	r3, [r6, #0]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	6032      	str	r2, [r6, #0]
 8005b10:	681e      	ldr	r6, [r3, #0]
 8005b12:	6862      	ldr	r2, [r4, #4]
 8005b14:	4630      	mov	r0, r6
 8005b16:	f000 f859 	bl	8005bcc <memchr>
 8005b1a:	b108      	cbz	r0, 8005b20 <_printf_i+0x1e8>
 8005b1c:	1b80      	subs	r0, r0, r6
 8005b1e:	6060      	str	r0, [r4, #4]
 8005b20:	6863      	ldr	r3, [r4, #4]
 8005b22:	6123      	str	r3, [r4, #16]
 8005b24:	2300      	movs	r3, #0
 8005b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b2a:	e7aa      	b.n	8005a82 <_printf_i+0x14a>
 8005b2c:	4632      	mov	r2, r6
 8005b2e:	4649      	mov	r1, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	47d0      	blx	sl
 8005b36:	3001      	adds	r0, #1
 8005b38:	d0ad      	beq.n	8005a96 <_printf_i+0x15e>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	079b      	lsls	r3, r3, #30
 8005b3e:	d413      	bmi.n	8005b68 <_printf_i+0x230>
 8005b40:	68e0      	ldr	r0, [r4, #12]
 8005b42:	9b03      	ldr	r3, [sp, #12]
 8005b44:	4298      	cmp	r0, r3
 8005b46:	bfb8      	it	lt
 8005b48:	4618      	movlt	r0, r3
 8005b4a:	e7a6      	b.n	8005a9a <_printf_i+0x162>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	4632      	mov	r2, r6
 8005b50:	4649      	mov	r1, r9
 8005b52:	4640      	mov	r0, r8
 8005b54:	47d0      	blx	sl
 8005b56:	3001      	adds	r0, #1
 8005b58:	d09d      	beq.n	8005a96 <_printf_i+0x15e>
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	9903      	ldr	r1, [sp, #12]
 8005b60:	1a5b      	subs	r3, r3, r1
 8005b62:	42ab      	cmp	r3, r5
 8005b64:	dcf2      	bgt.n	8005b4c <_printf_i+0x214>
 8005b66:	e7eb      	b.n	8005b40 <_printf_i+0x208>
 8005b68:	2500      	movs	r5, #0
 8005b6a:	f104 0619 	add.w	r6, r4, #25
 8005b6e:	e7f5      	b.n	8005b5c <_printf_i+0x224>
 8005b70:	08005cc7 	.word	0x08005cc7
 8005b74:	08005cd8 	.word	0x08005cd8

08005b78 <memmove>:
 8005b78:	4288      	cmp	r0, r1
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	eb01 0402 	add.w	r4, r1, r2
 8005b80:	d902      	bls.n	8005b88 <memmove+0x10>
 8005b82:	4284      	cmp	r4, r0
 8005b84:	4623      	mov	r3, r4
 8005b86:	d807      	bhi.n	8005b98 <memmove+0x20>
 8005b88:	1e43      	subs	r3, r0, #1
 8005b8a:	42a1      	cmp	r1, r4
 8005b8c:	d008      	beq.n	8005ba0 <memmove+0x28>
 8005b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b96:	e7f8      	b.n	8005b8a <memmove+0x12>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4402      	add	r2, r0
 8005b9c:	428a      	cmp	r2, r1
 8005b9e:	d100      	bne.n	8005ba2 <memmove+0x2a>
 8005ba0:	bd10      	pop	{r4, pc}
 8005ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005baa:	e7f7      	b.n	8005b9c <memmove+0x24>

08005bac <_sbrk_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4d05      	ldr	r5, [pc, #20]	@ (8005bc8 <_sbrk_r+0x1c>)
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	f7fb fbea 	bl	8001390 <_sbrk>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_sbrk_r+0x1a>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_sbrk_r+0x1a>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	2000043c 	.word	0x2000043c

08005bcc <memchr>:
 8005bcc:	4603      	mov	r3, r0
 8005bce:	b510      	push	{r4, lr}
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	4402      	add	r2, r0
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	d101      	bne.n	8005bde <memchr+0x12>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e003      	b.n	8005be6 <memchr+0x1a>
 8005bde:	7804      	ldrb	r4, [r0, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	428c      	cmp	r4, r1
 8005be4:	d1f6      	bne.n	8005bd4 <memchr+0x8>
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <memcpy>:
 8005be8:	440a      	add	r2, r1
 8005bea:	4291      	cmp	r1, r2
 8005bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf0:	d100      	bne.n	8005bf4 <memcpy+0xc>
 8005bf2:	4770      	bx	lr
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c00:	d1f9      	bne.n	8005bf6 <memcpy+0xe>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <_realloc_r>:
 8005c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4615      	mov	r5, r2
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	b921      	cbnz	r1, 8005c1a <_realloc_r+0x16>
 8005c10:	4611      	mov	r1, r2
 8005c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	f7ff bc39 	b.w	800548c <_malloc_r>
 8005c1a:	b92a      	cbnz	r2, 8005c28 <_realloc_r+0x24>
 8005c1c:	f7ff fbcc 	bl	80053b8 <_free_r>
 8005c20:	2400      	movs	r4, #0
 8005c22:	4620      	mov	r0, r4
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	f000 f81a 	bl	8005c60 <_malloc_usable_size_r>
 8005c2c:	4285      	cmp	r5, r0
 8005c2e:	4606      	mov	r6, r0
 8005c30:	d802      	bhi.n	8005c38 <_realloc_r+0x34>
 8005c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c36:	d8f4      	bhi.n	8005c22 <_realloc_r+0x1e>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f7ff fc26 	bl	800548c <_malloc_r>
 8005c40:	4607      	mov	r7, r0
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d0ec      	beq.n	8005c20 <_realloc_r+0x1c>
 8005c46:	42b5      	cmp	r5, r6
 8005c48:	462a      	mov	r2, r5
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	bf28      	it	cs
 8005c4e:	4632      	movcs	r2, r6
 8005c50:	f7ff ffca 	bl	8005be8 <memcpy>
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fbae 	bl	80053b8 <_free_r>
 8005c5c:	463c      	mov	r4, r7
 8005c5e:	e7e0      	b.n	8005c22 <_realloc_r+0x1e>

08005c60 <_malloc_usable_size_r>:
 8005c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c64:	1f18      	subs	r0, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bfbc      	itt	lt
 8005c6a:	580b      	ldrlt	r3, [r1, r0]
 8005c6c:	18c0      	addlt	r0, r0, r3
 8005c6e:	4770      	bx	lr

08005c70 <_init>:
 8005c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c72:	bf00      	nop
 8005c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c76:	bc08      	pop	{r3}
 8005c78:	469e      	mov	lr, r3
 8005c7a:	4770      	bx	lr

08005c7c <_fini>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr
