
bk_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005804  08005804  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005804  08005804  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005804  08005804  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800580c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000094  080058a0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080058a0  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc51  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e08  00000000  00000000  0002fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00032b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5c  00000000  00000000  00033a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a738  00000000  00000000  0003458c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014143  00000000  00000000  0004ecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009914a  00000000  00000000  00062e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f98  00000000  00000000  000fbf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ffeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000094 	.word	0x20000094
 8000200:	00000000 	.word	0x00000000
 8000204:	08005788 	.word	0x08005788

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000098 	.word	0x20000098
 8000220:	08005788 	.word	0x08005788

08000224 <buzzer_init>:
#include "tim.h"
#include "buzzer.h"

uint8_t buzzer_duty_cycle = 0;

void buzzer_init() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000228:	2100      	movs	r1, #0
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <buzzer_init+0x10>)
 800022c:	f002 fea6 	bl	8002f7c <HAL_TIM_PWM_Start>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	200001b0 	.word	0x200001b0

08000238 <buzzer_set_duty_cycle>:

void buzzer_set_duty_cycle(uint8_t duty_cycle) {
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	buzzer_duty_cycle = duty_cycle;
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <buzzer_set_duty_cycle+0x24>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, buzzer_duty_cycle);
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <buzzer_set_duty_cycle+0x24>)
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <buzzer_set_duty_cycle+0x28>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	200000b0 	.word	0x200000b0
 8000260:	200001b0 	.word	0x200001b0

08000264 <read_encoder_data>:
uint16_t ENCODER_B_PIN[4] = {ENCODER1_B_Pin, ENCODER2_B_Pin, ENCODER3_B_Pin, ENCODER4_B_Pin};

int32_t encoder_pulse[4] = {0,0,0,0};
uint8_t state[4] = {0,0,0,0};

void read_encoder_data(){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++){
 800026a:	2300      	movs	r3, #0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	e042      	b.n	80002f6 <read_encoder_data+0x92>
		switch (state[i]) {
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	4a25      	ldr	r2, [pc, #148]	; (8000308 <read_encoder_data+0xa4>)
 8000274:	5cd3      	ldrb	r3, [r2, r3]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d002      	beq.n	8000280 <read_encoder_data+0x1c>
 800027a:	2b01      	cmp	r3, #1
 800027c:	d020      	beq.n	80002c0 <read_encoder_data+0x5c>
 800027e:	e037      	b.n	80002f0 <read_encoder_data+0x8c>
//				break;
//			default:
//				state[i]=STATE_00;
//				break;
			case 0:
				if(HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i])) {
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4a22      	ldr	r2, [pc, #136]	; (800030c <read_encoder_data+0xa8>)
 8000284:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4921      	ldr	r1, [pc, #132]	; (8000310 <read_encoder_data+0xac>)
 800028c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000290:	4619      	mov	r1, r3
 8000292:	4610      	mov	r0, r2
 8000294:	f002 f91a 	bl	80024cc <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d00c      	beq.n	80002b8 <read_encoder_data+0x54>
					state[i] = 1;
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a19      	ldr	r2, [pc, #100]	; (8000308 <read_encoder_data+0xa4>)
 80002a2:	2101      	movs	r1, #1
 80002a4:	54d1      	strb	r1, [r2, r3]
					encoder_pulse[i]++;
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <read_encoder_data+0xb0>)
 80002aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ae:	3201      	adds	r2, #1
 80002b0:	4918      	ldr	r1, [pc, #96]	; (8000314 <read_encoder_data+0xb0>)
 80002b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80002b6:	e003      	b.n	80002c0 <read_encoder_data+0x5c>
				}
				else {
					state[i] = 0;
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4a13      	ldr	r2, [pc, #76]	; (8000308 <read_encoder_data+0xa4>)
 80002bc:	2100      	movs	r1, #0
 80002be:	54d1      	strb	r1, [r2, r3]
				}
			case 1:
				if(!HAL_GPIO_ReadPin(ENCODER_A_GPIO[i], ENCODER_A_PIN[i])) {
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <read_encoder_data+0xa8>)
 80002c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	4911      	ldr	r1, [pc, #68]	; (8000310 <read_encoder_data+0xac>)
 80002cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80002d0:	4619      	mov	r1, r3
 80002d2:	4610      	mov	r0, r2
 80002d4:	f002 f8fa 	bl	80024cc <HAL_GPIO_ReadPin>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d104      	bne.n	80002e8 <read_encoder_data+0x84>
					state[i] = 0;
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4a09      	ldr	r2, [pc, #36]	; (8000308 <read_encoder_data+0xa4>)
 80002e2:	2100      	movs	r1, #0
 80002e4:	54d1      	strb	r1, [r2, r3]
 80002e6:	e003      	b.n	80002f0 <read_encoder_data+0x8c>
				}
				else {
					state[i] = 1;
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	4a07      	ldr	r2, [pc, #28]	; (8000308 <read_encoder_data+0xa4>)
 80002ec:	2101      	movs	r1, #1
 80002ee:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++){
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	3301      	adds	r3, #1
 80002f4:	71fb      	strb	r3, [r7, #7]
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d9b9      	bls.n	8000270 <read_encoder_data+0xc>
				}
		}
	}
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200000c4 	.word	0x200000c4
 800030c:	20000000 	.word	0x20000000
 8000310:	20000010 	.word	0x20000010
 8000314:	200000b4 	.word	0x200000b4

08000318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	4b4b      	ldr	r3, [pc, #300]	; (800045c <MX_GPIO_Init+0x144>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a4a      	ldr	r2, [pc, #296]	; (800045c <MX_GPIO_Init+0x144>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b48      	ldr	r3, [pc, #288]	; (800045c <MX_GPIO_Init+0x144>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b45      	ldr	r3, [pc, #276]	; (800045c <MX_GPIO_Init+0x144>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a44      	ldr	r2, [pc, #272]	; (800045c <MX_GPIO_Init+0x144>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b42      	ldr	r3, [pc, #264]	; (800045c <MX_GPIO_Init+0x144>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b3f      	ldr	r3, [pc, #252]	; (800045c <MX_GPIO_Init+0x144>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a3e      	ldr	r2, [pc, #248]	; (800045c <MX_GPIO_Init+0x144>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b3c      	ldr	r3, [pc, #240]	; (800045c <MX_GPIO_Init+0x144>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b39      	ldr	r3, [pc, #228]	; (800045c <MX_GPIO_Init+0x144>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a38      	ldr	r2, [pc, #224]	; (800045c <MX_GPIO_Init+0x144>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b36      	ldr	r3, [pc, #216]	; (800045c <MX_GPIO_Init+0x144>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000392:	4833      	ldr	r0, [pc, #204]	; (8000460 <MX_GPIO_Init+0x148>)
 8000394:	f002 f8b1 	bl	80024fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M4_DIR_Pin|INPUT_LOAD_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f248 0102 	movw	r1, #32770	; 0x8002
 800039e:	4831      	ldr	r0, [pc, #196]	; (8000464 <MX_GPIO_Init+0x14c>)
 80003a0:	f002 f8ab 	bl	80024fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|SM_DIR_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2124      	movs	r1, #36	; 0x24
 80003a8:	482f      	ldr	r0, [pc, #188]	; (8000468 <MX_GPIO_Init+0x150>)
 80003aa:	f002 f8a6 	bl	80024fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = M1_DIR_Pin|M2_DIR_Pin|DEBUG_LED_Pin;
 80003ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80003b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	4826      	ldr	r0, [pc, #152]	; (8000460 <MX_GPIO_Init+0x148>)
 80003c8:	f001 feec 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M4_DIR_Pin|INPUT_LOAD_Pin;
 80003cc:	f248 0302 	movw	r3, #32770	; 0x8002
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	481f      	ldr	r0, [pc, #124]	; (8000464 <MX_GPIO_Init+0x14c>)
 80003e6:	f001 fedd 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|SM_DIR_Pin;
 80003ea:	2324      	movs	r3, #36	; 0x24
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <MX_GPIO_Init+0x150>)
 8000402:	f001 fecf 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER3_B_Pin|ENCODER3_A_Pin|ENCODER4_B_Pin|ENCODER4_A_Pin
 8000406:	f24f 2308 	movw	r3, #61960	; 0xf208
 800040a:	613b      	str	r3, [r7, #16]
                          |SM_FAULT_Pin|ENCODER1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4813      	ldr	r0, [pc, #76]	; (8000468 <MX_GPIO_Init+0x150>)
 800041c:	f001 fec2 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENCODER2_A_Pin|ENCODER2_B_Pin;
 8000420:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <MX_GPIO_Init+0x148>)
 8000436:	f001 feb5 	bl	80021a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER1_B_Pin;
 800043a:	2304      	movs	r3, #4
 800043c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043e:	2300      	movs	r3, #0
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENCODER1_B_GPIO_Port, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <MX_GPIO_Init+0x154>)
 800044e:	f001 fea9 	bl	80021a4 <HAL_GPIO_Init>

}
 8000452:	bf00      	nop
 8000454:	3720      	adds	r7, #32
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000
 8000464:	40010800 	.word	0x40010800
 8000468:	40010c00 	.word	0x40010c00
 800046c:	40011400 	.word	0x40011400

08000470 <cal_ang>:
 *      Author: Windows
 */

#include "joystick.h"

uint16_t cal_ang(uint8_t value){
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	return ((value >> 3)*15);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	08db      	lsrs	r3, r3, #3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	b29b      	uxth	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	0112      	lsls	r2, r2, #4
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	b29b      	uxth	r3, r3
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <check_buffer_state>:

void check_buffer_state() {
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
	if(buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 8000498:	4b40      	ldr	r3, [pc, #256]	; (800059c <check_buffer_state+0x108>)
 800049a:	795b      	ldrb	r3, [r3, #5]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10d      	bne.n	80004bc <check_buffer_state+0x28>
 80004a0:	4b3e      	ldr	r3, [pc, #248]	; (800059c <check_buffer_state+0x108>)
 80004a2:	799b      	ldrb	r3, [r3, #6]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d109      	bne.n	80004bc <check_buffer_state+0x28>
		move_state = STOP;
 80004a8:	4b3d      	ldr	r3, [pc, #244]	; (80005a0 <check_buffer_state+0x10c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
		servo_state = SERVO_INACTIVE;
 80004ae:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <check_buffer_state+0x110>)
 80004b0:	2202      	movs	r2, #2
 80004b2:	701a      	strb	r2, [r3, #0]
		sm_state = SM_INACTIVE;
 80004b4:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <check_buffer_state+0x114>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e02e      	b.n	800051a <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == FW_DATA) {
 80004bc:	4b37      	ldr	r3, [pc, #220]	; (800059c <check_buffer_state+0x108>)
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d107      	bne.n	80004d4 <check_buffer_state+0x40>
 80004c4:	4b35      	ldr	r3, [pc, #212]	; (800059c <check_buffer_state+0x108>)
 80004c6:	799b      	ldrb	r3, [r3, #6]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d103      	bne.n	80004d4 <check_buffer_state+0x40>
		move_state = FORWARD;
 80004cc:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <check_buffer_state+0x10c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	e022      	b.n	800051a <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == BW_DATA) {
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <check_buffer_state+0x108>)
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d107      	bne.n	80004ec <check_buffer_state+0x58>
 80004dc:	4b2f      	ldr	r3, [pc, #188]	; (800059c <check_buffer_state+0x108>)
 80004de:	799b      	ldrb	r3, [r3, #6]
 80004e0:	2b02      	cmp	r3, #2
 80004e2:	d103      	bne.n	80004ec <check_buffer_state+0x58>
		move_state = BACKWARD;
 80004e4:	4b2e      	ldr	r3, [pc, #184]	; (80005a0 <check_buffer_state+0x10c>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e016      	b.n	800051a <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == LT_DATA) {
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <check_buffer_state+0x108>)
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d107      	bne.n	8000504 <check_buffer_state+0x70>
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <check_buffer_state+0x108>)
 80004f6:	799b      	ldrb	r3, [r3, #6]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d103      	bne.n	8000504 <check_buffer_state+0x70>
		move_state = LEFT;
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <check_buffer_state+0x10c>)
 80004fe:	2203      	movs	r2, #3
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	e00a      	b.n	800051a <check_buffer_state+0x86>
	}
	else if(buffer[5] == 0x00 && buffer[6] == RT_DATA) {
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <check_buffer_state+0x108>)
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d106      	bne.n	800051a <check_buffer_state+0x86>
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <check_buffer_state+0x108>)
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d102      	bne.n	800051a <check_buffer_state+0x86>
		move_state = RIGHT;
 8000514:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <check_buffer_state+0x10c>)
 8000516:	2204      	movs	r2, #4
 8000518:	701a      	strb	r2, [r3, #0]
	}
	if(buffer[5] == 0x04 && buffer[6] == 0x00){ // TRIANGLE
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <check_buffer_state+0x108>)
 800051c:	795b      	ldrb	r3, [r3, #5]
 800051e:	2b04      	cmp	r3, #4
 8000520:	d107      	bne.n	8000532 <check_buffer_state+0x9e>
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <check_buffer_state+0x108>)
 8000524:	799b      	ldrb	r3, [r3, #6]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d103      	bne.n	8000532 <check_buffer_state+0x9e>
		sm_state = UP_SM;
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <check_buffer_state+0x114>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	e02f      	b.n	8000592 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x10 && buffer[6] == 0x00){ // X
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <check_buffer_state+0x108>)
 8000534:	795b      	ldrb	r3, [r3, #5]
 8000536:	2b10      	cmp	r3, #16
 8000538:	d107      	bne.n	800054a <check_buffer_state+0xb6>
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <check_buffer_state+0x108>)
 800053c:	799b      	ldrb	r3, [r3, #6]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <check_buffer_state+0xb6>
		sm_state = DOWN_SM;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <check_buffer_state+0x114>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e023      	b.n	8000592 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x08 && buffer[6] == 0x00){ // CIRCLE
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <check_buffer_state+0x108>)
 800054c:	795b      	ldrb	r3, [r3, #5]
 800054e:	2b08      	cmp	r3, #8
 8000550:	d107      	bne.n	8000562 <check_buffer_state+0xce>
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <check_buffer_state+0x108>)
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d103      	bne.n	8000562 <check_buffer_state+0xce>
		servo_state = SERVO_CLOSE;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <check_buffer_state+0x110>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	e017      	b.n	8000592 <check_buffer_state+0xfe>
	}
	else if(buffer[5] == 0x20 && buffer[6] == 0x00){ // SQUARE
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <check_buffer_state+0x108>)
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b20      	cmp	r3, #32
 8000568:	d107      	bne.n	800057a <check_buffer_state+0xe6>
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <check_buffer_state+0x108>)
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d103      	bne.n	800057a <check_buffer_state+0xe6>
		servo_state = SERVO_OPEN;
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <check_buffer_state+0x110>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	e00b      	b.n	8000592 <check_buffer_state+0xfe>
	}else if(buffer[5] == BZ_DATA && buffer[6] == 0x00){ //BUTTON START
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <check_buffer_state+0x108>)
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d107      	bne.n	8000592 <check_buffer_state+0xfe>
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <check_buffer_state+0x108>)
 8000584:	799b      	ldrb	r3, [r3, #6]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d103      	bne.n	8000592 <check_buffer_state+0xfe>
		move_state = BUZZER;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <check_buffer_state+0x10c>)
 800058c:	2205      	movs	r2, #5
 800058e:	701a      	strb	r2, [r3, #0]
	}
}
 8000590:	e7ff      	b.n	8000592 <check_buffer_state+0xfe>
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000244 	.word	0x20000244
 80005a0:	2000024d 	.word	0x2000024d
 80005a4:	20000038 	.word	0x20000038
 80005a8:	20000039 	.word	0x20000039

080005ac <check_buffer_state_1>:

/*
 * Joystick
 *
 */
void check_buffer_state_1() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	uint16_t ang = cal_ang(buffer[6]);
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <check_buffer_state_1+0x7c>)
 80005b4:	799b      	ldrb	r3, [r3, #6]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff5a 	bl	8000470 <cal_ang>
 80005bc:	4603      	mov	r3, r0
 80005be:	80fb      	strh	r3, [r7, #6]
	if (buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <check_buffer_state_1+0x7c>)
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d107      	bne.n	80005d8 <check_buffer_state_1+0x2c>
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <check_buffer_state_1+0x7c>)
 80005ca:	799b      	ldrb	r3, [r3, #6]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d103      	bne.n	80005d8 <check_buffer_state_1+0x2c>
		move_state = STOP;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <check_buffer_state_1+0x80>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e023      	b.n	8000620 <check_buffer_state_1+0x74>
	}
	else if (ang > 45 && ang <= 135){
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	2b2d      	cmp	r3, #45	; 0x2d
 80005dc:	d906      	bls.n	80005ec <check_buffer_state_1+0x40>
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	2b87      	cmp	r3, #135	; 0x87
 80005e2:	d803      	bhi.n	80005ec <check_buffer_state_1+0x40>
		move_state = FORWARD;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <check_buffer_state_1+0x80>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	e019      	b.n	8000620 <check_buffer_state_1+0x74>
	}
	else if (ang <= 225){
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	2be1      	cmp	r3, #225	; 0xe1
 80005f0:	d803      	bhi.n	80005fa <check_buffer_state_1+0x4e>
		move_state = LEFT;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <check_buffer_state_1+0x80>)
 80005f4:	2203      	movs	r2, #3
 80005f6:	701a      	strb	r2, [r3, #0]
		move_state = BACKWARD;
	}
	else if (ang <= 45 || ang >315){
		move_state = RIGHT;
	}
}
 80005f8:	e012      	b.n	8000620 <check_buffer_state_1+0x74>
	else if (ang <= 315){
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8000600:	d203      	bcs.n	800060a <check_buffer_state_1+0x5e>
		move_state = BACKWARD;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <check_buffer_state_1+0x80>)
 8000604:	2202      	movs	r2, #2
 8000606:	701a      	strb	r2, [r3, #0]
}
 8000608:	e00a      	b.n	8000620 <check_buffer_state_1+0x74>
	else if (ang <= 45 || ang >315){
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b2d      	cmp	r3, #45	; 0x2d
 800060e:	d903      	bls.n	8000618 <check_buffer_state_1+0x6c>
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8000616:	d303      	bcc.n	8000620 <check_buffer_state_1+0x74>
		move_state = RIGHT;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <check_buffer_state_1+0x80>)
 800061a:	2204      	movs	r2, #4
 800061c:	701a      	strb	r2, [r3, #0]
}
 800061e:	e7ff      	b.n	8000620 <check_buffer_state_1+0x74>
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000244 	.word	0x20000244
 800062c:	2000024d 	.word	0x2000024d

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0ec      	sub	sp, #432	; 0x1b0
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f001 fb03 	bl	8001c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f8d9 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f7ff fe6b 	bl	8000318 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000642:	f000 fd11 	bl	8001068 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000646:	f000 fc69 	bl	8000f1c <MX_TIM2_Init>
  MX_TIM3_Init();
 800064a:	f000 fcb3 	bl	8000fb4 <MX_TIM3_Init>
  MX_TIM8_Init();
 800064e:	f000 fe0f 	bl	8001270 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000652:	f001 f9e7 	bl	8001a24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000656:	f001 fa0f 	bl	8001a78 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800065a:	f000 fd93 	bl	8001184 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800065e:	f000 f90c 	bl	800087a <system_init>
  /*
   *
   * TEST DATA ENCODER
   *
   */
  uint8_t count = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
  int32_t a = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  int32_t b = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  int32_t c = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  int32_t d = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  char wheel1[100];
  char wheel2[100];
  char wheel3[100];
  char wheel4[100];

  char x = 255;
 8000680:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000684:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 8000688:	22ff      	movs	r2, #255	; 0xff
 800068a:	701a      	strb	r2, [r3, #0]
  char y = ':';
 800068c:	233a      	movs	r3, #58	; 0x3a
 800068e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b

  uint8_t bytes[4];

  while (1)
  {
	  if(flag_timer2 == 1){
 8000692:	4b51      	ldr	r3, [pc, #324]	; (80007d8 <main+0x1a8>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d1fb      	bne.n	8000692 <main+0x62>
		  flag_timer2 = 0;
 800069a:	4b4f      	ldr	r3, [pc, #316]	; (80007d8 <main+0x1a8>)
 800069c:	2200      	movs	r2, #0
 800069e:	801a      	strh	r2, [r3, #0]
		  count = (count + 1) % 20;
 80006a0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <main+0x1ac>)
 80006a8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ac:	10d9      	asrs	r1, r3, #3
 80006ae:	17d3      	asrs	r3, r2, #31
 80006b0:	1ac9      	subs	r1, r1, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	440b      	add	r3, r1
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	1ad1      	subs	r1, r2, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
		  if(count == 0){
 80006c2:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d17e      	bne.n	80007c8 <main+0x198>
			  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4844      	ldr	r0, [pc, #272]	; (80007e0 <main+0x1b0>)
 80006d0:	f001 ff2b 	bl	800252a <HAL_GPIO_TogglePin>
			  HAL_UART_Transmit(&huart2, (void*)wheel1, sprintf((void*)wheel1,"%ld",abs(encoder_pulse[0])), 10);
 80006d4:	4b43      	ldr	r3, [pc, #268]	; (80007e4 <main+0x1b4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80006dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80006e0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80006e4:	4940      	ldr	r1, [pc, #256]	; (80007e8 <main+0x1b8>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fb9c 	bl	8004e24 <siprintf>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80006f4:	230a      	movs	r3, #10
 80006f6:	483d      	ldr	r0, [pc, #244]	; (80007ec <main+0x1bc>)
 80006f8:	f003 fd6b 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 80006fc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000700:	4619      	mov	r1, r3
 8000702:	230a      	movs	r3, #10
 8000704:	2201      	movs	r2, #1
 8000706:	4839      	ldr	r0, [pc, #228]	; (80007ec <main+0x1bc>)
 8000708:	f003 fd63 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel2, sprintf((void*)wheel2,"%ld",abs(encoder_pulse[1])), 10);
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <main+0x1b4>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000714:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000718:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800071c:	4932      	ldr	r1, [pc, #200]	; (80007e8 <main+0x1b8>)
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fb80 	bl	8004e24 <siprintf>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800072c:	230a      	movs	r3, #10
 800072e:	482f      	ldr	r0, [pc, #188]	; (80007ec <main+0x1bc>)
 8000730:	f003 fd4f 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 8000734:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000738:	4619      	mov	r1, r3
 800073a:	230a      	movs	r3, #10
 800073c:	2201      	movs	r2, #1
 800073e:	482b      	ldr	r0, [pc, #172]	; (80007ec <main+0x1bc>)
 8000740:	f003 fd47 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel3, sprintf((void*)wheel3,"%ld",abs(encoder_pulse[2])), 10);
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <main+0x1b4>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800074c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000750:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000754:	4924      	ldr	r1, [pc, #144]	; (80007e8 <main+0x1b8>)
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fb64 	bl	8004e24 <siprintf>
 800075c:	4603      	mov	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000764:	230a      	movs	r3, #10
 8000766:	4821      	ldr	r0, [pc, #132]	; (80007ec <main+0x1bc>)
 8000768:	f003 fd33 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, y, 1, 10);
 800076c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8000770:	4619      	mov	r1, r3
 8000772:	230a      	movs	r3, #10
 8000774:	2201      	movs	r2, #1
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <main+0x1bc>)
 8000778:	f003 fd2b 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, (void*)wheel4, sprintf((void*)wheel4,"%ld",abs(encoder_pulse[3])), 10);
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <main+0x1b4>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000784:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4916      	ldr	r1, [pc, #88]	; (80007e8 <main+0x1b8>)
 800078e:	4618      	mov	r0, r3
 8000790:	f004 fb48 	bl	8004e24 <siprintf>
 8000794:	4603      	mov	r3, r0
 8000796:	b29a      	uxth	r2, r3
 8000798:	f107 0108 	add.w	r1, r7, #8
 800079c:	230a      	movs	r3, #10
 800079e:	4813      	ldr	r0, [pc, #76]	; (80007ec <main+0x1bc>)
 80007a0:	f003 fd17 	bl	80041d2 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, &x, 1, 10);
 80007a4:	1df9      	adds	r1, r7, #7
 80007a6:	230a      	movs	r3, #10
 80007a8:	2201      	movs	r2, #1
 80007aa:	4810      	ldr	r0, [pc, #64]	; (80007ec <main+0x1bc>)
 80007ac:	f003 fd11 	bl	80041d2 <HAL_UART_Transmit>

			  encoder_pulse[0] = 0;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <main+0x1b4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			  encoder_pulse[1] = 0;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x1b4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
			  encoder_pulse[2] = 0;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <main+0x1b4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
			  encoder_pulse[3] = 0;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <main+0x1b4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
		  }
		  move_process();
 80007c8:	f001 f87a 	bl	80018c0 <move_process>
		  servo_process();
 80007cc:	f001 f8b2 	bl	8001934 <servo_process>
		  sm_process();
 80007d0:	f001 f8ee 	bl	80019b0 <sm_process>
	  if(flag_timer2 == 1){
 80007d4:	e75d      	b.n	8000692 <main+0x62>
 80007d6:	bf00      	nop
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	66666667 	.word	0x66666667
 80007e0:	40011000 	.word	0x40011000
 80007e4:	200000b4 	.word	0x200000b4
 80007e8:	080057a0 	.word	0x080057a0
 80007ec:	200002a0 	.word	0x200002a0

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b090      	sub	sp, #64	; 0x40
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0318 	add.w	r3, r7, #24
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fb30 	bl	8004e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800082e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fe8f 	bl	800255c <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000844:	f000 f82d 	bl	80008a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2102      	movs	r1, #2
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f8fc 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800086e:	f000 f818 	bl	80008a2 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3740      	adds	r7, #64	; 0x40
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
	stop();
 800087e:	f000 f911 	bl	8000aa4 <stop>
	timer_init();
 8000882:	f000 f9e3 	bl	8000c4c <timer_init>
	servo_init(3);
 8000886:	2003      	movs	r0, #3
 8000888:	f000 f97c 	bl	8000b84 <servo_init>
	buzzer_init();
 800088c:	f7ff fcca 	bl	8000224 <buzzer_init>
	dc_init();
 8000890:	f000 f80c 	bl	80008ac <dc_init>
	uart_init();
 8000894:	f000 fed6 	bl	8001644 <uart_init>
	set_timer2(50);
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f000 f9e1 	bl	8000c60 <set_timer2>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a6:	b672      	cpsid	i
}
 80008a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	e7fe      	b.n	80008aa <Error_Handler+0x8>

080008ac <dc_init>:
#define		UP			1
#define 	DOWN 		0

uint32_t dc_channel[4] = {TIM_CHANNEL_4, TIM_CHANNEL_3, TIM_CHANNEL_1, TIM_CHANNEL_2};

void dc_init(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	for(int i=0;i<4;i++){
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	e00a      	b.n	80008ce <dc_init+0x22>
		HAL_TIM_PWM_Start(&htim8, dc_channel[i]);
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <dc_init+0x34>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <dc_init+0x38>)
 80008c4:	f002 fb5a 	bl	8002f7c <HAL_TIM_PWM_Start>
	for(int i=0;i<4;i++){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	ddf1      	ble.n	80008b8 <dc_init+0xc>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000018 	.word	0x20000018
 80008e4:	200001f8 	.word	0x200001f8

080008e8 <setSpeed>:

void setSpeed(uint8_t dc, uint8_t duty_cycle) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	460a      	mov	r2, r1
 80008f2:	71fb      	strb	r3, [r7, #7]
 80008f4:	4613      	mov	r3, r2
 80008f6:	71bb      	strb	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <setSpeed+0x6c>)
 80008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <setSpeed+0x28>
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <setSpeed+0x70>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79ba      	ldrb	r2, [r7, #6]
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800090e:	e01b      	b.n	8000948 <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3b01      	subs	r3, #1
 8000914:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <setSpeed+0x6c>)
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	2b04      	cmp	r3, #4
 800091c:	d104      	bne.n	8000928 <setSpeed+0x40>
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <setSpeed+0x70>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000926:	e00f      	b.n	8000948 <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	3b01      	subs	r3, #1
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <setSpeed+0x6c>)
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	2b08      	cmp	r3, #8
 8000934:	d104      	bne.n	8000940 <setSpeed+0x58>
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <setSpeed+0x70>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	79bb      	ldrb	r3, [r7, #6]
 800093c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800093e:	e003      	b.n	8000948 <setSpeed+0x60>
	__HAL_TIM_SET_COMPARE(&htim8, dc_channel[dc-1], duty_cycle);
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <setSpeed+0x70>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20000018 	.word	0x20000018
 8000958:	200001f8 	.word	0x200001f8

0800095c <dc1Move>:

void dc1Move(int duty_cycle){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <dc1Move+0x26>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, UP);
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	480e      	ldr	r0, [pc, #56]	; (80009ac <dc1Move+0x50>)
 8000972:	f001 fdc2 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ffb3 	bl	80008e8 <setSpeed>
	}
	if(duty_cycle < 0){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da0d      	bge.n	80009a4 <dc1Move+0x48>
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, DOWN);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <dc1Move+0x50>)
 8000990:	f001 fdb3 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(1, duty_cycle*-1);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	425b      	negs	r3, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	4619      	mov	r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff ffa2 	bl	80008e8 <setSpeed>
	}
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40011000 	.word	0x40011000

080009b0 <dc2Move>:

void dc2Move(int duty_cycle){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db0b      	blt.n	80009d6 <dc2Move+0x26>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, UP);
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c4:	480e      	ldr	r0, [pc, #56]	; (8000a00 <dc2Move+0x50>)
 80009c6:	f001 fd98 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff ff89 	bl	80008e8 <setSpeed>
	}
	if(duty_cycle < 0){
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	da0d      	bge.n	80009f8 <dc2Move+0x48>
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, DOWN);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <dc2Move+0x50>)
 80009e4:	f001 fd89 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(2, duty_cycle*-1);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	425b      	negs	r3, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff ff78 	bl	80008e8 <setSpeed>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40011000 	.word	0x40011000

08000a04 <dc3Move>:

void dc3Move(int duty_cycle){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0a      	blt.n	8000a28 <dc3Move+0x24>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, DOWN);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2104      	movs	r1, #4
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <dc3Move+0x4c>)
 8000a18:	f001 fd6f 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	2003      	movs	r0, #3
 8000a24:	f7ff ff60 	bl	80008e8 <setSpeed>
	}
	if(duty_cycle < 0){
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	da0c      	bge.n	8000a48 <dc3Move+0x44>
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, UP);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2104      	movs	r1, #4
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <dc3Move+0x4c>)
 8000a34:	f001 fd61 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(3, duty_cycle*-1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4619      	mov	r1, r3
 8000a42:	2003      	movs	r0, #3
 8000a44:	f7ff ff50 	bl	80008e8 <setSpeed>
	}
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <dc4Move>:

void dc4Move(int duty_cycle){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	if(duty_cycle >= 0){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0a      	blt.n	8000a78 <dc4Move+0x24>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, DOWN);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2102      	movs	r1, #2
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <dc4Move+0x4c>)
 8000a68:	f001 fd47 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	2004      	movs	r0, #4
 8000a74:	f7ff ff38 	bl	80008e8 <setSpeed>
	}
	if(duty_cycle < 0){
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	da0c      	bge.n	8000a98 <dc4Move+0x44>
		HAL_GPIO_WritePin(M4_DIR_GPIO_Port, M4_DIR_Pin, UP);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <dc4Move+0x4c>)
 8000a84:	f001 fd39 	bl	80024fa <HAL_GPIO_WritePin>
		setSpeed(4, duty_cycle*-1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	425b      	negs	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	4619      	mov	r1, r3
 8000a92:	2004      	movs	r0, #4
 8000a94:	f7ff ff28 	bl	80008e8 <setSpeed>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <stop>:


void stop(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	dc1Move(0);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff ff57 	bl	800095c <dc1Move>
	dc2Move(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff7e 	bl	80009b0 <dc2Move>
	dc3Move(0);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff ffa5 	bl	8000a04 <dc3Move>
	dc4Move(0);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ffca 	bl	8000a54 <dc4Move>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <forward>:
//         left		  ---+----     right		↻: rotateRight
//           backLeft    |  backRight
//                  backwards
//

void forward(int speed){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff45 	bl	800095c <dc1Move>
	dc2Move(speed);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff6c 	bl	80009b0 <dc2Move>
	dc3Move(speed);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff93 	bl	8000a04 <dc3Move>
	dc4Move(speed);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffb8 	bl	8000a54 <dc4Move>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <backwards>:

void backwards(int speed){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	425b      	negs	r3, r3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff2f 	bl	800095c <dc1Move>
	dc2Move(-speed);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	425b      	negs	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff54 	bl	80009b0 <dc2Move>
	dc3Move(-speed);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff79 	bl	8000a04 <dc3Move>
	dc4Move(-speed);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	425b      	negs	r3, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff9c 	bl	8000a54 <dc4Move>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <rotateLeft>:
	dc2Move(speed);
	dc3Move(speed);
	dc4Move(-speed);
}

void rotateLeft(int speed){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
	dc1Move(-speed);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	425b      	negs	r3, r3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff13 	bl	800095c <dc1Move>
	dc2Move(-speed);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	425b      	negs	r3, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff38 	bl	80009b0 <dc2Move>
	dc3Move(speed);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff5f 	bl	8000a04 <dc3Move>
	dc4Move(speed);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff84 	bl	8000a54 <dc4Move>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <rotateRight>:

void rotateRight(int speed){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	dc1Move(speed);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fefd 	bl	800095c <dc1Move>
	dc2Move(speed);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff24 	bl	80009b0 <dc2Move>
	dc3Move(-speed);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff49 	bl	8000a04 <dc3Move>
	dc4Move(-speed);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	425b      	negs	r3, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff6c 	bl	8000a54 <dc4Move>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <servo_init>:
void servo3_set_duty_cycle(uint16_t _duty_cycle){
	duty_cycle = _duty_cycle;
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,duty_cycle);
}

void servo_init(uint8_t id){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(&htim4, servo_channel[id]);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <servo_init+0x24>)
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <servo_init+0x28>)
 8000b9a:	f002 f9ef 	bl	8002f7c <HAL_TIM_PWM_Start>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	20000168 	.word	0x20000168

08000bb0 <servo_set_angle>:

/*
 * the range is from 20 to 130 (0 to 180 degree)
 * id 1,2,3
 */
void servo_set_angle(uint8_t id, uint16_t angle){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	460a      	mov	r2, r1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	80bb      	strh	r3, [r7, #4]
	if(angle < 0 || angle > 180) return;
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	2bb4      	cmp	r3, #180	; 0xb4
 8000bc4:	d836      	bhi.n	8000c34 <servo_set_angle+0x84>
	uint16_t duty_cycle_ = (angle*110)/180 + 20;
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	226e      	movs	r2, #110	; 0x6e
 8000bca:	fb02 f303 	mul.w	r3, r2, r3
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <servo_set_angle+0x90>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	441a      	add	r2, r3
 8000bd6:	11d2      	asrs	r2, r2, #7
 8000bd8:	17db      	asrs	r3, r3, #31
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3314      	adds	r3, #20
 8000be0:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim4, servo_channel[id-1], duty_cycle_);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <servo_set_angle+0x94>)
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d104      	bne.n	8000bfa <servo_set_angle+0x4a>
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <servo_set_angle+0x98>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	89fa      	ldrh	r2, [r7, #14]
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf8:	e01d      	b.n	8000c36 <servo_set_angle+0x86>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <servo_set_angle+0x94>)
 8000c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d104      	bne.n	8000c12 <servo_set_angle+0x62>
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <servo_set_angle+0x98>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	6393      	str	r3, [r2, #56]	; 0x38
 8000c10:	e011      	b.n	8000c36 <servo_set_angle+0x86>
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	3b01      	subs	r3, #1
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <servo_set_angle+0x94>)
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d104      	bne.n	8000c2a <servo_set_angle+0x7a>
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <servo_set_angle+0x98>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c28:	e005      	b.n	8000c36 <servo_set_angle+0x86>
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <servo_set_angle+0x98>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	e000      	b.n	8000c36 <servo_set_angle+0x86>
	if(angle < 0 || angle > 180) return;
 8000c34:	bf00      	nop
}
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	b60b60b7 	.word	0xb60b60b7
 8000c44:	20000028 	.word	0x20000028
 8000c48:	20000168 	.word	0x20000168

08000c4c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <timer_init+0x10>)
 8000c52:	f002 f8e3 	bl	8002e1c <HAL_TIM_Base_Start_IT>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000d8 	.word	0x200000d8

08000c60 <set_timer2>:

void set_timer2(uint16_t duration){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <set_timer2+0x28>)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <set_timer2+0x28>)
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <set_timer2+0x2c>)
 8000c76:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <set_timer2+0x30>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	801a      	strh	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	200000cc 	.word	0x200000cc
 8000c8c:	200000ca 	.word	0x200000ca
 8000c90:	200000c8 	.word	0x200000c8

08000c94 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca4:	d116      	bne.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d010      	beq.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cb8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d106      	bne.n	8000cd0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cca:	881a      	ldrh	r2, [r3, #0]
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cce:	801a      	strh	r2, [r3, #0]
			}
		}
		read_encoder_data();
 8000cd0:	f7ff fac8 	bl	8000264 <read_encoder_data>
	}
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000ca 	.word	0x200000ca
 8000ce0:	200000c8 	.word	0x200000c8
 8000ce4:	200000cc 	.word	0x200000cc

08000ce8 <move_step_motor>:
 * direction :	0	->	down
 * 			 :	1	->	up
 * cycle	 : 	10 is safe enough
 */

void move_step_motor(GPIO_PinState directtion, uint16_t cycle){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SM_DIR_GPIO_Port, SM_DIR_Pin, directtion);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <move_step_motor+0x44>)
 8000d00:	f001 fbfb 	bl	80024fa <HAL_GPIO_WritePin>
	spr_counter = SPR * cycle;
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	22c8      	movs	r2, #200	; 0xc8
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <move_step_motor+0x48>)
 8000d10:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, DUTY_CYCLE);
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <move_step_motor+0x4c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2232      	movs	r2, #50	; 0x32
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <move_step_motor+0x4c>)
 8000d1e:	f002 f9e7 	bl	80030f0 <HAL_TIM_PWM_Start_IT>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010c00 	.word	0x40010c00
 8000d30:	200000d0 	.word	0x200000d0
 8000d34:	20000120 	.word	0x20000120

08000d38 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10c      	bne.n	8000d64 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		spr_counter--;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000d52:	6013      	str	r3, [r2, #0]
		if(spr_counter <= 0)
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 8000d60:	f002 face 	bl	8003300 <HAL_TIM_PWM_Stop_IT>
	}
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	200000d0 	.word	0x200000d0
 8000d74:	20000120 	.word	0x20000120

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_MspInit+0x5c>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_MspInit+0x60>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_MspInit+0x60>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010000 	.word	0x40010000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e22:	f000 ff53 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM2_IRQHandler+0x10>)
 8000e32:	f002 fb23 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200000d8 	.word	0x200000d8

08000e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM3_IRQHandler+0x10>)
 8000e46:	f002 fb19 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000120 	.word	0x20000120

08000e54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM4_IRQHandler+0x10>)
 8000e5a:	f002 fb0f 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000168 	.word	0x20000168

08000e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <USART1_IRQHandler+0x10>)
 8000e6e:	f003 fa59 	bl	8004324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000258 	.word	0x20000258

08000e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <USART2_IRQHandler+0x10>)
 8000e82:	f003 fa4f 	bl	8004324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002a0 	.word	0x200002a0

08000e90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM5_IRQHandler+0x10>)
 8000e96:	f002 faf1 	bl	800347c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b0 	.word	0x200001b0

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f003 ffce 	bl	8004e74 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000c000 	.word	0x2000c000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	200000d4 	.word	0x200000d4
 8000f0c:	20000438 	.word	0x20000438

08000f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f50:	2263      	movs	r2, #99	; 0x63
 8000f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f62:	f001 ff0b 	bl	8002d7c <HAL_TIM_Base_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f6c:	f7ff fc99 	bl	80008a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f7e:	f002 fc47 	bl	8003810 <HAL_TIM_ConfigClockSource>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f88:	f7ff fc8b 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_TIM2_Init+0x94>)
 8000f9a:	f002 fffb 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f7ff fc7d 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000d8 	.word	0x200000d8

08000fb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_TIM3_Init+0xac>)
 8000fd8:	4a22      	ldr	r2, [pc, #136]	; (8001064 <MX_TIM3_Init+0xb0>)
 8000fda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_TIM3_Init+0xac>)
 8000fde:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM3_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_TIM3_Init+0xac>)
 8000fec:	2263      	movs	r2, #99	; 0x63
 8000fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_TIM3_Init+0xac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM3_Init+0xac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <MX_TIM3_Init+0xac>)
 8000ffe:	f001 ff6d 	bl	8002edc <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001008:	f7ff fc4b 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_TIM3_Init+0xac>)
 800101c:	f002 ffba 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001026:	f7ff fc3c 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <MX_TIM3_Init+0xac>)
 8001042:	f002 fb23 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800104c:	f7ff fc29 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <MX_TIM3_Init+0xac>)
 8001052:	f000 fa4b 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000120 	.word	0x20000120
 8001064:	40000400 	.word	0x40000400

08001068 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <MX_TIM4_Init+0x114>)
 800109a:	4a39      	ldr	r2, [pc, #228]	; (8001180 <MX_TIM4_Init+0x118>)
 800109c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1440-1;
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <MX_TIM4_Init+0x114>)
 80010a0:	f240 529f 	movw	r2, #1439	; 0x59f
 80010a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b35      	ldr	r3, [pc, #212]	; (800117c <MX_TIM4_Init+0x114>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80010ac:	4b33      	ldr	r3, [pc, #204]	; (800117c <MX_TIM4_Init+0x114>)
 80010ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b31      	ldr	r3, [pc, #196]	; (800117c <MX_TIM4_Init+0x114>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <MX_TIM4_Init+0x114>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c0:	482e      	ldr	r0, [pc, #184]	; (800117c <MX_TIM4_Init+0x114>)
 80010c2:	f001 fe5b 	bl	8002d7c <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80010cc:	f7ff fbe9 	bl	80008a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010da:	4619      	mov	r1, r3
 80010dc:	4827      	ldr	r0, [pc, #156]	; (800117c <MX_TIM4_Init+0x114>)
 80010de:	f002 fb97 	bl	8003810 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010e8:	f7ff fbdb 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ec:	4823      	ldr	r0, [pc, #140]	; (800117c <MX_TIM4_Init+0x114>)
 80010ee:	f001 fef5 	bl	8002edc <HAL_TIM_PWM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80010f8:	f7ff fbd3 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4619      	mov	r1, r3
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <MX_TIM4_Init+0x114>)
 800110c:	f002 ff42 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001116:	f7ff fbc4 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	2360      	movs	r3, #96	; 0x60
 800111c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <MX_TIM4_Init+0x114>)
 8001132:	f002 faab 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800113c:	f7ff fbb1 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2204      	movs	r2, #4
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM4_Init+0x114>)
 8001148:	f002 faa0 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001152:	f7ff fba6 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM4_Init+0x114>)
 800115e:	f002 fa95 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8001168:	f7ff fb9b 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM4_Init+0x114>)
 800116e:	f000 f9bd 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8001172:	bf00      	nop
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000168 	.word	0x20000168
 8001180:	40000800 	.word	0x40000800

08001184 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <MX_TIM5_Init+0xe8>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 720-1;
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011bc:	f240 22cf 	movw	r2, #719	; 0x2cf
 80011c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011ca:	2263      	movs	r2, #99	; 0x63
 80011cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011da:	4823      	ldr	r0, [pc, #140]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011dc:	f001 fdce 	bl	8002d7c <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80011e6:	f7ff fb5c 	bl	80008a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f4:	4619      	mov	r1, r3
 80011f6:	481c      	ldr	r0, [pc, #112]	; (8001268 <MX_TIM5_Init+0xe4>)
 80011f8:	f002 fb0a 	bl	8003810 <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001202:	f7ff fb4e 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM5_Init+0xe4>)
 8001208:	f001 fe68 	bl	8002edc <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001212:	f7ff fb46 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4619      	mov	r1, r3
 8001224:	4810      	ldr	r0, [pc, #64]	; (8001268 <MX_TIM5_Init+0xe4>)
 8001226:	f002 feb5 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001230:	f7ff fb37 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM5_Init+0xe4>)
 800124c:	f002 fa1e 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001256:	f7ff fb24 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM5_Init+0xe4>)
 800125c:	f000 f946 	bl	80014ec <HAL_TIM_MspPostInit>

}
 8001260:	bf00      	nop
 8001262:	3738      	adds	r7, #56	; 0x38
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200001b0 	.word	0x200001b0
 800126c:	40000c00 	.word	0x40000c00

08001270 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b092      	sub	sp, #72	; 0x48
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fde2 	bl	8004e64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012a2:	4a46      	ldr	r2, [pc, #280]	; (80013bc <MX_TIM8_Init+0x14c>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 80012a6:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012a8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80012ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012b6:	2263      	movs	r2, #99	; 0x63
 80012b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012c0:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012cc:	483a      	ldr	r0, [pc, #232]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012ce:	f001 fe05 	bl	8002edc <HAL_TIM_PWM_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80012d8:	f7ff fae3 	bl	80008a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e8:	4619      	mov	r1, r3
 80012ea:	4833      	ldr	r0, [pc, #204]	; (80013b8 <MX_TIM8_Init+0x148>)
 80012ec:	f002 fe52 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80012f6:	f7ff fad4 	bl	80008a2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fa:	2360      	movs	r3, #96	; 0x60
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <MX_TIM8_Init+0x148>)
 8001320:	f002 f9b4 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800132a:	f7ff faba 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	2204      	movs	r2, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4820      	ldr	r0, [pc, #128]	; (80013b8 <MX_TIM8_Init+0x148>)
 8001338:	f002 f9a8 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8001342:	f7ff faae 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	2208      	movs	r2, #8
 800134c:	4619      	mov	r1, r3
 800134e:	481a      	ldr	r0, [pc, #104]	; (80013b8 <MX_TIM8_Init+0x148>)
 8001350:	f002 f99c 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800135a:	f7ff faa2 	bl	80008a2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	220c      	movs	r2, #12
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_TIM8_Init+0x148>)
 8001368:	f002 f990 	bl	800368c <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001372:	f7ff fa96 	bl	80008a2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM8_Init+0x148>)
 800139a:	f002 fe67 	bl	800406c <HAL_TIMEx_ConfigBreakDeadTime>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80013a4:	f7ff fa7d 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM8_Init+0x148>)
 80013aa:	f000 f89f 	bl	80014ec <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3748      	adds	r7, #72	; 0x48
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001f8 	.word	0x200001f8
 80013bc:	40013400 	.word	0x40013400

080013c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d114      	bne.n	80013fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201c      	movs	r0, #28
 80013f0:	f000 fd5f 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f4:	201c      	movs	r0, #28
 80013f6:	f000 fd78 	bl	8001eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80013fa:	e032      	b.n	8001462 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_TIM_Base_MspInit+0xb0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d114      	bne.n	8001430 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	201e      	movs	r0, #30
 8001424:	f000 fd45 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001428:	201e      	movs	r0, #30
 800142a:	f000 fd5e 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 800142e:	e018      	b.n	8001462 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_TIM_Base_MspInit+0xb4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d113      	bne.n	8001462 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2032      	movs	r0, #50	; 0x32
 8001458:	f000 fd2b 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800145c:	2032      	movs	r0, #50	; 0x32
 800145e:	f000 fd44 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000
 8001470:	40000800 	.word	0x40000800
 8001474:	40000c00 	.word	0x40000c00

08001478 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_TIM_PWM_MspInit+0x68>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d114      	bne.n	80014b4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a15      	ldr	r2, [pc, #84]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	201d      	movs	r0, #29
 80014a8:	f000 fd03 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014ac:	201d      	movs	r0, #29
 80014ae:	f000 fd1c 	bl	8001eea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80014b2:	e010      	b.n	80014d6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(tim_pwmHandle->Instance==TIM8)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_TIM_PWM_MspInit+0x70>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10b      	bne.n	80014d6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40013400 	.word	0x40013400

080014ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_TIM_MspPostInit+0x134>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d12a      	bne.n	8001562 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001524:	2310      	movs	r3, #16
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2302      	movs	r3, #2
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	483c      	ldr	r0, [pc, #240]	; (8001628 <HAL_TIM_MspPostInit+0x13c>)
 8001538:	f000 fe34 	bl	80021a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_TIM_MspPostInit+0x140>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001544:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_TIM_MspPostInit+0x140>)
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001560:	e05a      	b.n	8001618 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a32      	ldr	r2, [pc, #200]	; (8001630 <HAL_TIM_MspPostInit+0x144>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d119      	bne.n	80015a0 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001584:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <HAL_TIM_MspPostInit+0x13c>)
 800159a:	f000 fe03 	bl	80021a4 <HAL_GPIO_Init>
}
 800159e:	e03b      	b.n	8001618 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM5)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a23      	ldr	r2, [pc, #140]	; (8001634 <HAL_TIM_MspPostInit+0x148>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d118      	bne.n	80015dc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a1d      	ldr	r2, [pc, #116]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	4818      	ldr	r0, [pc, #96]	; (8001638 <HAL_TIM_MspPostInit+0x14c>)
 80015d6:	f000 fde5 	bl	80021a4 <HAL_GPIO_Init>
}
 80015da:	e01d      	b.n	8001618 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM8)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_TIM_MspPostInit+0x150>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d118      	bne.n	8001618 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6193      	str	r3, [r2, #24]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_TIM_MspPostInit+0x138>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015fe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2302      	movs	r3, #2
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	; (8001640 <HAL_TIM_MspPostInit+0x154>)
 8001614:	f000 fdc6 	bl	80021a4 <HAL_GPIO_Init>
}
 8001618:	bf00      	nop
 800161a:	3730      	adds	r7, #48	; 0x30
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40000400 	.word	0x40000400
 8001624:	40021000 	.word	0x40021000
 8001628:	40010c00 	.word	0x40010c00
 800162c:	40010000 	.word	0x40010000
 8001630:	40000800 	.word	0x40000800
 8001634:	40000c00 	.word	0x40000c00
 8001638:	40010800 	.word	0x40010800
 800163c:	40013400 	.word	0x40013400
 8001640:	40011000 	.word	0x40011000

08001644 <uart_init>:
uint8_t sm_state = SM_INACTIVE;

int servo_degree = 0;
int sm_height = 0;

void uart_init() {
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer1, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	490b      	ldr	r1, [pc, #44]	; (8001678 <uart_init+0x34>)
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <uart_init+0x38>)
 800164e:	f002 fe43 	bl	80042d8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	4908      	ldr	r1, [pc, #32]	; (8001678 <uart_init+0x34>)
 8001656:	480a      	ldr	r0, [pc, #40]	; (8001680 <uart_init+0x3c>)
 8001658:	f002 fe3e 	bl	80042d8 <HAL_UART_Receive_IT>
	move_state = STOP;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <uart_init+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
	servo_state = SERVO_INACTIVE;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <uart_init+0x44>)
 8001664:	2202      	movs	r2, #2
 8001666:	701a      	strb	r2, [r3, #0]
	sm_state = SM_INACTIVE;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <uart_init+0x48>)
 800166a:	2202      	movs	r2, #2
 800166c:	701a      	strb	r2, [r3, #0]
	uart_state = WAITING;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <uart_init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000240 	.word	0x20000240
 800167c:	200002a0 	.word	0x200002a0
 8001680:	20000258 	.word	0x20000258
 8001684:	2000024d 	.word	0x2000024d
 8001688:	20000038 	.word	0x20000038
 800168c:	20000039 	.word	0x20000039
 8001690:	2000024e 	.word	0x2000024e

08001694 <clear_buffer>:

void clear_buffer() {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 8; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	e006      	b.n	80016ae <clear_buffer+0x1a>
		buffer[i] = 0x00;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <clear_buffer+0x30>)
 80016a4:	2100      	movs	r1, #0
 80016a6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++) {
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3301      	adds	r3, #1
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	d9f5      	bls.n	80016a0 <clear_buffer+0xc>
	}
	idx = 0;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <clear_buffer+0x34>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000244 	.word	0x20000244
 80016c8:	2000024c 	.word	0x2000024c

080016cc <check_function>:

void check_function(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	if (buffer[1] == 0x00) {
 80016d0:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <check_function+0xe4>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <check_function+0x20>
		move_state = STOP;
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <check_function+0xe8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
		servo_state = SERVO_INACTIVE;
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <check_function+0xec>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
		sm_state = SM_INACTIVE;
 80016e4:	4b35      	ldr	r3, [pc, #212]	; (80017bc <check_function+0xf0>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
		}
		else {
			check_buffer_state_1();
		}
	}
}
 80016ea:	e05f      	b.n	80017ac <check_function+0xe0>
	else if (buffer[2] == DIGITAL_MODE){
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <check_function+0xe4>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d102      	bne.n	80016fa <check_function+0x2e>
		check_buffer_state();
 80016f4:	f7fe fece 	bl	8000494 <check_buffer_state>
}
 80016f8:	e058      	b.n	80017ac <check_function+0xe0>
	else if (buffer[2] == JOYSTICK_MODE || buffer[2] == ACCELE_MODE){
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <check_function+0xe4>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d003      	beq.n	800170a <check_function+0x3e>
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <check_function+0xe4>)
 8001704:	789b      	ldrb	r3, [r3, #2]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d150      	bne.n	80017ac <check_function+0xe0>
		if(buffer[5] == 0x00 && buffer[6] == STOP_DATA){
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <check_function+0xe4>)
 800170c:	795b      	ldrb	r3, [r3, #5]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <check_function+0x62>
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <check_function+0xe4>)
 8001714:	799b      	ldrb	r3, [r3, #6]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <check_function+0x62>
				move_state = STOP;
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <check_function+0xe8>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
				servo_state = SERVO_INACTIVE;
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <check_function+0xec>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
				sm_state = SM_INACTIVE;
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <check_function+0xf0>)
 8001728:	2202      	movs	r2, #2
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e03e      	b.n	80017ac <check_function+0xe0>
		else if(buffer[5] == 0x04 && buffer[6] == 0x00){ // TRIANGLE
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <check_function+0xe4>)
 8001730:	795b      	ldrb	r3, [r3, #5]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d107      	bne.n	8001746 <check_function+0x7a>
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <check_function+0xe4>)
 8001738:	799b      	ldrb	r3, [r3, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <check_function+0x7a>
			sm_state = UP_SM;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <check_function+0xf0>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e032      	b.n	80017ac <check_function+0xe0>
		else if(buffer[5] == 0x10 && buffer[6] == 0x00){ // X
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <check_function+0xe4>)
 8001748:	795b      	ldrb	r3, [r3, #5]
 800174a:	2b10      	cmp	r3, #16
 800174c:	d107      	bne.n	800175e <check_function+0x92>
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <check_function+0xe4>)
 8001750:	799b      	ldrb	r3, [r3, #6]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <check_function+0x92>
			sm_state = DOWN_SM;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <check_function+0xf0>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e026      	b.n	80017ac <check_function+0xe0>
		else if(buffer[5] == 0x08 && buffer[6] == 0x00){ // CIRCLE
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <check_function+0xe4>)
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d107      	bne.n	8001776 <check_function+0xaa>
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <check_function+0xe4>)
 8001768:	799b      	ldrb	r3, [r3, #6]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <check_function+0xaa>
			servo_state = SERVO_CLOSE;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <check_function+0xec>)
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e01a      	b.n	80017ac <check_function+0xe0>
		else if(buffer[5] == 0x20 && buffer[6] == 0x00){ // SQUARE
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <check_function+0xe4>)
 8001778:	795b      	ldrb	r3, [r3, #5]
 800177a:	2b20      	cmp	r3, #32
 800177c:	d107      	bne.n	800178e <check_function+0xc2>
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <check_function+0xe4>)
 8001780:	799b      	ldrb	r3, [r3, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <check_function+0xc2>
			servo_state = SERVO_OPEN;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <check_function+0xec>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e00e      	b.n	80017ac <check_function+0xe0>
		else if(buffer[5] == BZ_DATA && buffer[6] == 0x00) {
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <check_function+0xe4>)
 8001790:	795b      	ldrb	r3, [r3, #5]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <check_function+0xda>
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <check_function+0xe4>)
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <check_function+0xda>
			move_state = BUZZER;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <check_function+0xe8>)
 80017a0:	2205      	movs	r2, #5
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e002      	b.n	80017ac <check_function+0xe0>
			check_buffer_state_1();
 80017a6:	f7fe ff01 	bl	80005ac <check_buffer_state_1>
}
 80017aa:	e7ff      	b.n	80017ac <check_function+0xe0>
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000244 	.word	0x20000244
 80017b4:	2000024d 	.word	0x2000024d
 80017b8:	20000038 	.word	0x20000038
 80017bc:	20000039 	.word	0x20000039

080017c0 <uart_process>:

void uart_process(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	switch (uart_state) {
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <uart_process+0xb8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d041      	beq.n	8001850 <uart_process+0x90>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	dc4c      	bgt.n	800186a <uart_process+0xaa>
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <uart_process+0x1a>
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d01f      	beq.n	8001818 <uart_process+0x58>
			clear_buffer();
			uart_state = WAITING;
			break;
		}
		default: {
			break;
 80017d8:	e047      	b.n	800186a <uart_process+0xaa>
			if(receive_buffer1 == 0xFF) {
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <uart_process+0xbc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d145      	bne.n	800186e <uart_process+0xae>
				idx = 0;
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <uart_process+0xc0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
				buffer[idx] = receive_buffer1;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <uart_process+0xc0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <uart_process+0xbc>)
 80017f0:	7819      	ldrb	r1, [r3, #0]
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <uart_process+0xc4>)
 80017f4:	5499      	strb	r1, [r3, r2]
				idx = (idx + 1) % 8;
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <uart_process+0xc0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	425a      	negs	r2, r3
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	f002 0207 	and.w	r2, r2, #7
 8001806:	bf58      	it	pl
 8001808:	4253      	negpl	r3, r2
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <uart_process+0xc0>)
 800180e:	701a      	strb	r2, [r3, #0]
				uart_state = RECEIVE;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <uart_process+0xb8>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
			break;
 8001816:	e02a      	b.n	800186e <uart_process+0xae>
			buffer[idx] = receive_buffer1;
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <uart_process+0xc0>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <uart_process+0xbc>)
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <uart_process+0xc4>)
 8001824:	5499      	strb	r1, [r3, r2]
			idx = (idx + 1) % 8;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <uart_process+0xc0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	425a      	negs	r2, r3
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	f002 0207 	and.w	r2, r2, #7
 8001836:	bf58      	it	pl
 8001838:	4253      	negpl	r3, r2
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <uart_process+0xc0>)
 800183e:	701a      	strb	r2, [r3, #0]
			if(idx == 7)
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <uart_process+0xc0>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d114      	bne.n	8001872 <uart_process+0xb2>
				uart_state = CHECK;
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <uart_process+0xb8>)
 800184a:	2202      	movs	r2, #2
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e010      	b.n	8001872 <uart_process+0xb2>
			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <uart_process+0xc8>)
 8001856:	f000 fe68 	bl	800252a <HAL_GPIO_TogglePin>
			check_function();
 800185a:	f7ff ff37 	bl	80016cc <check_function>
			clear_buffer();
 800185e:	f7ff ff19 	bl	8001694 <clear_buffer>
			uart_state = WAITING;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <uart_process+0xb8>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
			break;
 8001868:	e004      	b.n	8001874 <uart_process+0xb4>
			break;
 800186a:	bf00      	nop
 800186c:	e002      	b.n	8001874 <uart_process+0xb4>
			break;
 800186e:	bf00      	nop
 8001870:	e000      	b.n	8001874 <uart_process+0xb4>
			break;
 8001872:	bf00      	nop
		}
	}
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000024e 	.word	0x2000024e
 800187c:	20000240 	.word	0x20000240
 8001880:	2000024c 	.word	0x2000024c
 8001884:	20000244 	.word	0x20000244
 8001888:	40011000 	.word	0x40011000

0800188c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_UART_RxCpltCallback+0x28>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d106      	bne.n	80018ac <HAL_UART_RxCpltCallback+0x20>
//		if(buffer[0] == 0xFF)
//			HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
		uart_process();
 800189e:	f7ff ff8f 	bl	80017c0 <uart_process>
//		HAL_UART_Transmit(&huart2, buffer, 8, 10);
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80018a2:	2201      	movs	r2, #1
 80018a4:	4904      	ldr	r1, [pc, #16]	; (80018b8 <HAL_UART_RxCpltCallback+0x2c>)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_UART_RxCpltCallback+0x30>)
 80018a8:	f002 fd16 	bl	80042d8 <HAL_UART_Receive_IT>
	}
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013800 	.word	0x40013800
 80018b8:	20000240 	.word	0x20000240
 80018bc:	20000258 	.word	0x20000258

080018c0 <move_process>:

void move_process() {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	switch (move_state) {
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <move_process+0x70>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d82e      	bhi.n	800192a <move_process+0x6a>
 80018cc:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <move_process+0x14>)
 80018ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d2:	bf00      	nop
 80018d4:	080018f1 	.word	0x080018f1
 80018d8:	08001903 	.word	0x08001903
 80018dc:	0800190b 	.word	0x0800190b
 80018e0:	08001913 	.word	0x08001913
 80018e4:	0800191b 	.word	0x0800191b
 80018e8:	08001923 	.word	0x08001923
 80018ec:	0800192b 	.word	0x0800192b
		case STOP: {
			stop();
 80018f0:	f7ff f8d8 	bl	8000aa4 <stop>
			buzzer_set_duty_cycle(0);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7fe fc9f 	bl	8000238 <buzzer_set_duty_cycle>
			move_state = IDLE;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <move_process+0x70>)
 80018fc:	2206      	movs	r2, #6
 80018fe:	701a      	strb	r2, [r3, #0]
			break;
 8001900:	e014      	b.n	800192c <move_process+0x6c>
		}
		case FORWARD: {
			forward(MIN_SPEED);
 8001902:	201e      	movs	r0, #30
 8001904:	f7ff f8de 	bl	8000ac4 <forward>
			break;
 8001908:	e010      	b.n	800192c <move_process+0x6c>
		}
		case BACKWARD: {
			backwards(MIN_SPEED);
 800190a:	201e      	movs	r0, #30
 800190c:	f7ff f8ee 	bl	8000aec <backwards>
			break;
 8001910:	e00c      	b.n	800192c <move_process+0x6c>
		}
		case LEFT: {
			rotateLeft(MIN_SPEED);
 8001912:	201e      	movs	r0, #30
 8001914:	f7ff f906 	bl	8000b24 <rotateLeft>
			break;
 8001918:	e008      	b.n	800192c <move_process+0x6c>
		}
		case RIGHT: {
			rotateRight(MIN_SPEED);
 800191a:	201e      	movs	r0, #30
 800191c:	f7ff f91a 	bl	8000b54 <rotateRight>
			break;
 8001920:	e004      	b.n	800192c <move_process+0x6c>
		}
		case BUZZER:
			buzzer_set_duty_cycle(50);
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f7fe fc88 	bl	8000238 <buzzer_set_duty_cycle>
			break;
 8001928:	e000      	b.n	800192c <move_process+0x6c>
		case IDLE:
			//do nothing
			break;
		default: {
			break;
 800192a:	bf00      	nop
		}
	}
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2000024d 	.word	0x2000024d

08001934 <servo_process>:

void servo_process(){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	switch (servo_state) {
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <servo_process+0x74>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d02e      	beq.n	800199e <servo_process+0x6a>
 8001940:	2b02      	cmp	r3, #2
 8001942:	dc2e      	bgt.n	80019a2 <servo_process+0x6e>
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <servo_process+0x1a>
 8001948:	2b01      	cmp	r3, #1
 800194a:	d014      	beq.n	8001976 <servo_process+0x42>
			break;
		case SERVO_INACTIVE:
			//do nothing
			break;
		default:
			break;
 800194c:	e029      	b.n	80019a2 <servo_process+0x6e>
			servo_degree += 5;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <servo_process+0x78>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3305      	adds	r3, #5
 8001954:	4a15      	ldr	r2, [pc, #84]	; (80019ac <servo_process+0x78>)
 8001956:	6013      	str	r3, [r2, #0]
			if(servo_degree >= 60)
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <servo_process+0x78>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b3b      	cmp	r3, #59	; 0x3b
 800195e:	dd02      	ble.n	8001966 <servo_process+0x32>
				servo_degree = 60;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <servo_process+0x78>)
 8001962:	223c      	movs	r2, #60	; 0x3c
 8001964:	601a      	str	r2, [r3, #0]
			servo_set_angle(3, servo_degree);
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <servo_process+0x78>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff f91e 	bl	8000bb0 <servo_set_angle>
			break;
 8001974:	e016      	b.n	80019a4 <servo_process+0x70>
			servo_degree -= 5;
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <servo_process+0x78>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3b05      	subs	r3, #5
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <servo_process+0x78>)
 800197e:	6013      	str	r3, [r2, #0]
			if(servo_degree <= 0)
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <servo_process+0x78>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc02      	bgt.n	800198e <servo_process+0x5a>
				servo_degree = 0;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <servo_process+0x78>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
			servo_set_angle(3, servo_degree);
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <servo_process+0x78>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4619      	mov	r1, r3
 8001996:	2003      	movs	r0, #3
 8001998:	f7ff f90a 	bl	8000bb0 <servo_set_angle>
			break;
 800199c:	e002      	b.n	80019a4 <servo_process+0x70>
			break;
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <servo_process+0x70>
			break;
 80019a2:	bf00      	nop
	}
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000038 	.word	0x20000038
 80019ac:	20000250 	.word	0x20000250

080019b0 <sm_process>:

void sm_process(){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	switch (sm_state) {
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <sm_process+0x6c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d02a      	beq.n	8001a12 <sm_process+0x62>
 80019bc:	2b02      	cmp	r3, #2
 80019be:	dc2a      	bgt.n	8001a16 <sm_process+0x66>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <sm_process+0x1a>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d012      	beq.n	80019ee <sm_process+0x3e>
			break;
		case SM_INACTIVE:
			//do nothing
			break;
		default:
			break;
 80019c8:	e025      	b.n	8001a16 <sm_process+0x66>
			sm_height += 1;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <sm_process+0x70>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <sm_process+0x70>)
 80019d2:	6013      	str	r3, [r2, #0]
			if(sm_height >= 35)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <sm_process+0x70>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b22      	cmp	r3, #34	; 0x22
 80019da:	dd03      	ble.n	80019e4 <sm_process+0x34>
				sm_height = 35;
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <sm_process+0x70>)
 80019de:	2223      	movs	r2, #35	; 0x23
 80019e0:	601a      	str	r2, [r3, #0]
			break;
 80019e2:	e019      	b.n	8001a18 <sm_process+0x68>
				move_step_motor(1, 1);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff f97e 	bl	8000ce8 <move_step_motor>
			break;
 80019ec:	e014      	b.n	8001a18 <sm_process+0x68>
			sm_height -= 1;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <sm_process+0x70>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <sm_process+0x70>)
 80019f6:	6013      	str	r3, [r2, #0]
			if(sm_height <= 0)
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <sm_process+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dc03      	bgt.n	8001a08 <sm_process+0x58>
				sm_height = 0;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <sm_process+0x70>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
			break;
 8001a06:	e007      	b.n	8001a18 <sm_process+0x68>
				move_step_motor(0, 1);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff f96c 	bl	8000ce8 <move_step_motor>
			break;
 8001a10:	e002      	b.n	8001a18 <sm_process+0x68>
			break;
 8001a12:	bf00      	nop
 8001a14:	e000      	b.n	8001a18 <sm_process+0x68>
			break;
 8001a16:	bf00      	nop
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000039 	.word	0x20000039
 8001a20:	20000254 	.word	0x20000254

08001a24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_USART1_UART_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	f002 fb69 	bl	8004132 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a66:	f7fe ff1c 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000258 	.word	0x20000258
 8001a74:	40013800 	.word	0x40013800

08001a78 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f002 fb3f 	bl	8004132 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f7fe fef2 	bl	80008a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002a0 	.word	0x200002a0
 8001ac8:	40004400 	.word	0x40004400

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <HAL_UART_MspInit+0x118>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13a      	bne.n	8001b62 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a3d      	ldr	r2, [pc, #244]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a37      	ldr	r2, [pc, #220]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482e      	ldr	r0, [pc, #184]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001b32:	f000 fb37 	bl	80021a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4828      	ldr	r0, [pc, #160]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001b4c:	f000 fb2a 	bl	80021a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2025      	movs	r0, #37	; 0x25
 8001b56:	f000 f9ac 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5a:	2025      	movs	r0, #37	; 0x25
 8001b5c:	f000 f9c5 	bl	8001eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b60:	e03c      	b.n	8001bdc <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_UART_MspInit+0x124>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d137      	bne.n	8001bdc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b76:	61d3      	str	r3, [r2, #28]
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4619      	mov	r1, r3
 8001bae:	480f      	ldr	r0, [pc, #60]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001bb0:	f000 faf8 	bl	80021a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001bc8:	f000 faec 	bl	80021a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f000 f96e 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd6:	2026      	movs	r0, #38	; 0x26
 8001bd8:	f000 f987 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf4:	f7ff f98c 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bfa:	490c      	ldr	r1, [pc, #48]	; (8001c2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c10:	4c09      	ldr	r4, [pc, #36]	; (8001c38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1e:	f003 f92f 	bl	8004e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7fe fd05 	bl	8000630 <main>
  bx lr
 8001c26:	4770      	bx	lr
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c30:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 8001c34:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001c38:	20000434 	.word	0x20000434

08001c3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_2_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_Init+0x28>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_Init+0x28>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f923 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f808 	bl	8001c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c5c:	f7ff f88c 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x54>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_InitTick+0x58>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f93b 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00e      	b.n	8001cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b0f      	cmp	r3, #15
 8001c9e:	d80a      	bhi.n	8001cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f000 f903 	bl	8001eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cac:	4a06      	ldr	r2, [pc, #24]	; (8001cc8 <HAL_InitTick+0x5c>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000034 	.word	0x20000034
 8001cc4:	20000040 	.word	0x20000040
 8001cc8:	2000003c 	.word	0x2000003c

08001ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_IncTick+0x1c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x20>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	4a03      	ldr	r2, [pc, #12]	; (8001cec <HAL_IncTick+0x20>)
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000040 	.word	0x20000040
 8001cec:	200002e8 	.word	0x200002e8

08001cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <HAL_GetTick+0x10>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	200002e8 	.word	0x200002e8

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4906      	ldr	r1, [pc, #24]	; (8001d9c <__NVIC_EnableIRQ+0x34>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	; (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	; (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff90 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff2d 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff42 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff35 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2204      	movs	r2, #4
 8001f3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e020      	b.n	8001f8a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 020e 	bic.w	r2, r2, #14
 8001f56:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d005      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e0d6      	b.n	8002166 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020e 	bic.w	r2, r2, #14
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_DMA_Abort_IT+0x1dc>)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d958      	bls.n	8002096 <HAL_DMA_Abort_IT+0x102>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a62      	ldr	r2, [pc, #392]	; (8002174 <HAL_DMA_Abort_IT+0x1e0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04f      	beq.n	800208e <HAL_DMA_Abort_IT+0xfa>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a61      	ldr	r2, [pc, #388]	; (8002178 <HAL_DMA_Abort_IT+0x1e4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d048      	beq.n	800208a <HAL_DMA_Abort_IT+0xf6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a5f      	ldr	r2, [pc, #380]	; (800217c <HAL_DMA_Abort_IT+0x1e8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Abort_IT+0xf0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a5e      	ldr	r2, [pc, #376]	; (8002180 <HAL_DMA_Abort_IT+0x1ec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d038      	beq.n	800207e <HAL_DMA_Abort_IT+0xea>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_DMA_Abort_IT+0x1f0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d030      	beq.n	8002078 <HAL_DMA_Abort_IT+0xe4>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_DMA_Abort_IT+0x1f4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d028      	beq.n	8002072 <HAL_DMA_Abort_IT+0xde>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_DMA_Abort_IT+0x1dc>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d020      	beq.n	800206c <HAL_DMA_Abort_IT+0xd8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_DMA_Abort_IT+0x1f8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d019      	beq.n	8002068 <HAL_DMA_Abort_IT+0xd4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a55      	ldr	r2, [pc, #340]	; (8002190 <HAL_DMA_Abort_IT+0x1fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d012      	beq.n	8002064 <HAL_DMA_Abort_IT+0xd0>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a54      	ldr	r2, [pc, #336]	; (8002194 <HAL_DMA_Abort_IT+0x200>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00a      	beq.n	800205e <HAL_DMA_Abort_IT+0xca>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_DMA_Abort_IT+0x204>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d102      	bne.n	8002058 <HAL_DMA_Abort_IT+0xc4>
 8002052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002056:	e01b      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800205c:	e018      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 800205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002062:	e015      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002064:	2310      	movs	r3, #16
 8002066:	e013      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002068:	2301      	movs	r3, #1
 800206a:	e011      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 800206c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002070:	e00e      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002072:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002076:	e00b      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800207c:	e008      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 800207e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002082:	e005      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 8002084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002088:	e002      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 800208a:	2310      	movs	r3, #16
 800208c:	e000      	b.n	8002090 <HAL_DMA_Abort_IT+0xfc>
 800208e:	2301      	movs	r3, #1
 8002090:	4a42      	ldr	r2, [pc, #264]	; (800219c <HAL_DMA_Abort_IT+0x208>)
 8002092:	6053      	str	r3, [r2, #4]
 8002094:	e057      	b.n	8002146 <HAL_DMA_Abort_IT+0x1b2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a36      	ldr	r2, [pc, #216]	; (8002174 <HAL_DMA_Abort_IT+0x1e0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d04f      	beq.n	8002140 <HAL_DMA_Abort_IT+0x1ac>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_DMA_Abort_IT+0x1e4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d048      	beq.n	800213c <HAL_DMA_Abort_IT+0x1a8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_DMA_Abort_IT+0x1e8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d040      	beq.n	8002136 <HAL_DMA_Abort_IT+0x1a2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_DMA_Abort_IT+0x1ec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d038      	beq.n	8002130 <HAL_DMA_Abort_IT+0x19c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_DMA_Abort_IT+0x1f0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d030      	beq.n	800212a <HAL_DMA_Abort_IT+0x196>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	; (8002188 <HAL_DMA_Abort_IT+0x1f4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d028      	beq.n	8002124 <HAL_DMA_Abort_IT+0x190>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_DMA_Abort_IT+0x1dc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d020      	beq.n	800211e <HAL_DMA_Abort_IT+0x18a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a2a      	ldr	r2, [pc, #168]	; (800218c <HAL_DMA_Abort_IT+0x1f8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_DMA_Abort_IT+0x186>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a29      	ldr	r2, [pc, #164]	; (8002190 <HAL_DMA_Abort_IT+0x1fc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d012      	beq.n	8002116 <HAL_DMA_Abort_IT+0x182>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a27      	ldr	r2, [pc, #156]	; (8002194 <HAL_DMA_Abort_IT+0x200>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00a      	beq.n	8002110 <HAL_DMA_Abort_IT+0x17c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_DMA_Abort_IT+0x204>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d102      	bne.n	800210a <HAL_DMA_Abort_IT+0x176>
 8002104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002108:	e01b      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 800210a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800210e:	e018      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002114:	e015      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002116:	2310      	movs	r3, #16
 8002118:	e013      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 800211a:	2301      	movs	r3, #1
 800211c:	e011      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 800211e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002122:	e00e      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002124:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002128:	e00b      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 800212a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212e:	e008      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002134:	e005      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213a:	e002      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 800213c:	2310      	movs	r3, #16
 800213e:	e000      	b.n	8002142 <HAL_DMA_Abort_IT+0x1ae>
 8002140:	2301      	movs	r3, #1
 8002142:	4a17      	ldr	r2, [pc, #92]	; (80021a0 <HAL_DMA_Abort_IT+0x20c>)
 8002144:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
    } 
  }
  return status;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020080 	.word	0x40020080
 8002174:	40020008 	.word	0x40020008
 8002178:	4002001c 	.word	0x4002001c
 800217c:	40020030 	.word	0x40020030
 8002180:	40020044 	.word	0x40020044
 8002184:	40020058 	.word	0x40020058
 8002188:	4002006c 	.word	0x4002006c
 800218c:	40020408 	.word	0x40020408
 8002190:	4002041c 	.word	0x4002041c
 8002194:	40020430 	.word	0x40020430
 8002198:	40020444 	.word	0x40020444
 800219c:	40020400 	.word	0x40020400
 80021a0:	40020000 	.word	0x40020000

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b08b      	sub	sp, #44	; 0x2c
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e179      	b.n	80024ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021b8:	2201      	movs	r2, #1
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f040 8168 	bne.w	80024a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a96      	ldr	r2, [pc, #600]	; (8002434 <HAL_GPIO_Init+0x290>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d05e      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021e0:	4a94      	ldr	r2, [pc, #592]	; (8002434 <HAL_GPIO_Init+0x290>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d875      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021e6:	4a94      	ldr	r2, [pc, #592]	; (8002438 <HAL_GPIO_Init+0x294>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d058      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021ec:	4a92      	ldr	r2, [pc, #584]	; (8002438 <HAL_GPIO_Init+0x294>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d86f      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021f2:	4a92      	ldr	r2, [pc, #584]	; (800243c <HAL_GPIO_Init+0x298>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d052      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 80021f8:	4a90      	ldr	r2, [pc, #576]	; (800243c <HAL_GPIO_Init+0x298>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d869      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 80021fe:	4a90      	ldr	r2, [pc, #576]	; (8002440 <HAL_GPIO_Init+0x29c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d04c      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002204:	4a8e      	ldr	r2, [pc, #568]	; (8002440 <HAL_GPIO_Init+0x29c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d863      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800220a:	4a8e      	ldr	r2, [pc, #568]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d046      	beq.n	800229e <HAL_GPIO_Init+0xfa>
 8002210:	4a8c      	ldr	r2, [pc, #560]	; (8002444 <HAL_GPIO_Init+0x2a0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d85d      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 8002216:	2b12      	cmp	r3, #18
 8002218:	d82a      	bhi.n	8002270 <HAL_GPIO_Init+0xcc>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d859      	bhi.n	80022d2 <HAL_GPIO_Init+0x12e>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <HAL_GPIO_Init+0x80>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	0800229f 	.word	0x0800229f
 8002228:	08002279 	.word	0x08002279
 800222c:	0800228b 	.word	0x0800228b
 8002230:	080022cd 	.word	0x080022cd
 8002234:	080022d3 	.word	0x080022d3
 8002238:	080022d3 	.word	0x080022d3
 800223c:	080022d3 	.word	0x080022d3
 8002240:	080022d3 	.word	0x080022d3
 8002244:	080022d3 	.word	0x080022d3
 8002248:	080022d3 	.word	0x080022d3
 800224c:	080022d3 	.word	0x080022d3
 8002250:	080022d3 	.word	0x080022d3
 8002254:	080022d3 	.word	0x080022d3
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022d3 	.word	0x080022d3
 8002260:	080022d3 	.word	0x080022d3
 8002264:	080022d3 	.word	0x080022d3
 8002268:	08002281 	.word	0x08002281
 800226c:	08002295 	.word	0x08002295
 8002270:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_GPIO_Init+0x2a4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002276:	e02c      	b.n	80022d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e029      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e024      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	3308      	adds	r3, #8
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e01f      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	330c      	adds	r3, #12
 800229a:	623b      	str	r3, [r7, #32]
          break;
 800229c:	e01a      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022a6:	2304      	movs	r3, #4
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e013      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d105      	bne.n	80022c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b4:	2308      	movs	r3, #8
 80022b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	611a      	str	r2, [r3, #16]
          break;
 80022be:	e009      	b.n	80022d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c0:	2308      	movs	r3, #8
 80022c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	615a      	str	r2, [r3, #20]
          break;
 80022ca:	e003      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e000      	b.n	80022d4 <HAL_GPIO_Init+0x130>
          break;
 80022d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	d801      	bhi.n	80022de <HAL_GPIO_Init+0x13a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_Init+0x13e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2bff      	cmp	r3, #255	; 0xff
 80022e8:	d802      	bhi.n	80022f0 <HAL_GPIO_Init+0x14c>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_Init+0x152>
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	3b08      	subs	r3, #8
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	210f      	movs	r1, #15
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80c1 	beq.w	80024a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002324:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_GPIO_Init+0x2a8>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_GPIO_Init+0x2a8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_GPIO_Init+0x2a8>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800233c:	4a44      	ldr	r2, [pc, #272]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <HAL_GPIO_Init+0x2b0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d01f      	beq.n	80023a8 <HAL_GPIO_Init+0x204>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_GPIO_Init+0x2b4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d019      	beq.n	80023a4 <HAL_GPIO_Init+0x200>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_GPIO_Init+0x2b8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_GPIO_Init+0x1fc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a39      	ldr	r2, [pc, #228]	; (8002460 <HAL_GPIO_Init+0x2bc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00d      	beq.n	800239c <HAL_GPIO_Init+0x1f8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_GPIO_Init+0x2c0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <HAL_GPIO_Init+0x1f4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a37      	ldr	r2, [pc, #220]	; (8002468 <HAL_GPIO_Init+0x2c4>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_GPIO_Init+0x1f0>
 8002390:	2305      	movs	r3, #5
 8002392:	e00a      	b.n	80023aa <HAL_GPIO_Init+0x206>
 8002394:	2306      	movs	r3, #6
 8002396:	e008      	b.n	80023aa <HAL_GPIO_Init+0x206>
 8002398:	2304      	movs	r3, #4
 800239a:	e006      	b.n	80023aa <HAL_GPIO_Init+0x206>
 800239c:	2303      	movs	r3, #3
 800239e:	e004      	b.n	80023aa <HAL_GPIO_Init+0x206>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e002      	b.n	80023aa <HAL_GPIO_Init+0x206>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <HAL_GPIO_Init+0x206>
 80023a8:	2300      	movs	r3, #0
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	f002 0203 	and.w	r2, r2, #3
 80023b0:	0092      	lsls	r2, r2, #2
 80023b2:	4093      	lsls	r3, r2
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ba:	4925      	ldr	r1, [pc, #148]	; (8002450 <HAL_GPIO_Init+0x2ac>)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3302      	adds	r3, #2
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_GPIO_Init+0x2c8>)
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	4924      	ldr	r1, [pc, #144]	; (800246c <HAL_GPIO_Init+0x2c8>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
 80023e0:	e006      	b.n	80023f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_GPIO_Init+0x2c8>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	4920      	ldr	r1, [pc, #128]	; (800246c <HAL_GPIO_Init+0x2c8>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d006      	beq.n	800240a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_GPIO_Init+0x2c8>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	491a      	ldr	r1, [pc, #104]	; (800246c <HAL_GPIO_Init+0x2c8>)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
 8002408:	e006      	b.n	8002418 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_GPIO_Init+0x2c8>)
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	43db      	mvns	r3, r3
 8002412:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_GPIO_Init+0x2c8>)
 8002414:	4013      	ands	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d025      	beq.n	8002470 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_GPIO_Init+0x2c8>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4910      	ldr	r1, [pc, #64]	; (800246c <HAL_GPIO_Init+0x2c8>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
 8002430:	e025      	b.n	800247e <HAL_GPIO_Init+0x2da>
 8002432:	bf00      	nop
 8002434:	10320000 	.word	0x10320000
 8002438:	10310000 	.word	0x10310000
 800243c:	10220000 	.word	0x10220000
 8002440:	10210000 	.word	0x10210000
 8002444:	10120000 	.word	0x10120000
 8002448:	10110000 	.word	0x10110000
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	40010800 	.word	0x40010800
 8002458:	40010c00 	.word	0x40010c00
 800245c:	40011000 	.word	0x40011000
 8002460:	40011400 	.word	0x40011400
 8002464:	40011800 	.word	0x40011800
 8002468:	40011c00 	.word	0x40011c00
 800246c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_GPIO_Init+0x324>)
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	43db      	mvns	r3, r3
 8002478:	4913      	ldr	r1, [pc, #76]	; (80024c8 <HAL_GPIO_Init+0x324>)
 800247a:	4013      	ands	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d006      	beq.n	8002498 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x324>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x324>)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
 8002496:	e006      	b.n	80024a6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_GPIO_Init+0x324>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	43db      	mvns	r3, r3
 80024a0:	4909      	ldr	r1, [pc, #36]	; (80024c8 <HAL_GPIO_Init+0x324>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3301      	adds	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f47f ae7e 	bne.w	80021b8 <HAL_GPIO_Init+0x14>
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	372c      	adds	r7, #44	; 0x2c
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40010400 	.word	0x40010400

080024cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	e001      	b.n	80024ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]
 8002506:	4613      	mov	r3, r2
 8002508:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250a:	787b      	ldrb	r3, [r7, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002510:	887a      	ldrh	r2, [r7, #2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002516:	e003      	b.n	8002520 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	041a      	lsls	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	611a      	str	r2, [r3, #16]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43d9      	mvns	r1, r3
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	400b      	ands	r3, r1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e272      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8087 	beq.w	800268a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002588:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d112      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
 8002594:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06c      	beq.n	8002688 <HAL_RCC_OscConfig+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d168      	bne.n	8002688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e24c      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x76>
 80025c4:	4b80      	ldr	r3, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e02e      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0xbc>
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 8002618:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff fb5a 	bl	8001cf0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7ff fb56 	bl	8001cf0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e200      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xe4>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fb46 	bl	8001cf0 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff fb42 	bl	8001cf0 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1ec      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x10c>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4939      	ldr	r1, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7ff fafb 	bl	8001cf0 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7ff faf7 	bl	8001cf0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff fada 	bl	8001cf0 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7ff fad6 	bl	8001cf0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e180      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7ff faba 	bl	8001cf0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7ff fab6 	bl	8001cf0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e160      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 face 	bl	8002d40 <RCC_Delay>
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7ff faa0 	bl	8001cf0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff fa9c 	bl	8001cf0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d908      	bls.n	80027d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e146      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	42420000 	.word	0x42420000
 80027d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e9      	bne.n	80027b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a6 	beq.w	800293a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7ff fa5d 	bl	8001cf0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7ff fa59 	bl	8001cf0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e103      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x312>
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e02d      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x334>
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	e01c      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x356>
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7ff fa0d 	bl	8001cf0 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7ff fa09 	bl	8001cf0 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0b1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ee      	beq.n	80028da <HAL_RCC_OscConfig+0x37e>
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7ff f9f7 	bl	8001cf0 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7ff f9f3 	bl	8001cf0 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ee      	bne.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d061      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d146      	bne.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7ff f9c7 	bl	8001cf0 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff f9c3 	bl	8001cf0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a19      	ldr	r1, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	430b      	orrs	r3, r1
 80029b2:	491b      	ldr	r1, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7ff f997 	bl	8001cf0 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7ff f993 	bl	8001cf0 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e03d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46a>
 80029e4:	e035      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff f980 	bl	8001cf0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff f97c 	bl	8001cf0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e026      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x498>
 8002a12:	e01e      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e019      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x500>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7ff f8ce 	bl	8001cf0 <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7ff f8ca 	bl	8001cf0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f82c 	bl	8001c6c <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	080057a4 	.word	0x080057a4
 8002c2c:	20000034 	.word	0x20000034
 8002c30:	2000003c 	.word	0x2000003c

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e027      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	e027      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	0c9b      	lsrs	r3, r3, #18
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0c5b      	lsrs	r3, r3, #17
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e004      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca8:	fb02 f303 	mul.w	r3, r2, r3
 8002cac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	613b      	str	r3, [r7, #16]
      break;
 8002cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cba:	693b      	ldr	r3, [r7, #16]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	007a1200 	.word	0x007a1200
 8002cd0:	080057bc 	.word	0x080057bc
 8002cd4:	080057cc 	.word	0x080057cc
 8002cd8:	003d0900 	.word	0x003d0900

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	20000034 	.word	0x20000034

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff2 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	080057b4 	.word	0x080057b4

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffde 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	080057b4 	.word	0x080057b4

08002d40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <RCC_Delay+0x34>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <RCC_Delay+0x38>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0a5b      	lsrs	r3, r3, #9
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d5c:	bf00      	nop
  }
  while (Delay --);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	60fa      	str	r2, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f9      	bne.n	8002d5c <RCC_Delay+0x1c>
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	20000034 	.word	0x20000034
 8002d78:	10624dd3 	.word	0x10624dd3

08002d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e041      	b.n	8002e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fb0c 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 fe0a 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d001      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e044      	b.n	8002ebe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_TIM_Base_Start_IT+0xac>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d018      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x6c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_TIM_Base_Start_IT+0xb0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x6c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e68:	d00e      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x6c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d009      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x6c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x6c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d010      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	e007      	b.n	8002ebc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40013400 	.word	0x40013400
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40000c00 	.word	0x40000c00

08002edc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e041      	b.n	8002f72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe fab8 	bl	8001478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 fd5a 	bl	80039d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_TIM_PWM_Start+0x24>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e022      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d109      	bne.n	8002fba <HAL_TIM_PWM_Start+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e015      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d109      	bne.n	8002fd4 <HAL_TIM_PWM_Start+0x58>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e008      	b.n	8002fe6 <HAL_TIM_PWM_Start+0x6a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e072      	b.n	80030d4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x82>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d104      	bne.n	800300e <HAL_TIM_PWM_Start+0x92>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800300c:	e00b      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d104      	bne.n	800301e <HAL_TIM_PWM_Start+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800301c:	e003      	b.n	8003026 <HAL_TIM_PWM_Start+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2201      	movs	r2, #1
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ff8c 	bl	8003f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_TIM_PWM_Start+0x160>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_TIM_PWM_Start+0xcc>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <HAL_TIM_PWM_Start+0x164>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_TIM_PWM_Start+0xd0>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_TIM_PWM_Start+0xd2>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_TIM_PWM_Start+0x160>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d018      	beq.n	800309e <HAL_TIM_PWM_Start+0x122>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_TIM_PWM_Start+0x164>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_TIM_PWM_Start+0x122>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d00e      	beq.n	800309e <HAL_TIM_PWM_Start+0x122>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_TIM_PWM_Start+0x168>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_TIM_PWM_Start+0x122>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <HAL_TIM_PWM_Start+0x16c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d004      	beq.n	800309e <HAL_TIM_PWM_Start+0x122>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a14      	ldr	r2, [pc, #80]	; (80030ec <HAL_TIM_PWM_Start+0x170>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d111      	bne.n	80030c2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d010      	beq.n	80030d2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	e007      	b.n	80030d2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40012c00 	.word	0x40012c00
 80030e0:	40013400 	.word	0x40013400
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00

080030f0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_TIM_PWM_Start_IT+0x28>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b01      	cmp	r3, #1
 800310e:	bf14      	ite	ne
 8003110:	2301      	movne	r3, #1
 8003112:	2300      	moveq	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e022      	b.n	800315e <HAL_TIM_PWM_Start_IT+0x6e>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	d109      	bne.n	8003132 <HAL_TIM_PWM_Start_IT+0x42>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	bf14      	ite	ne
 800312a:	2301      	movne	r3, #1
 800312c:	2300      	moveq	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e015      	b.n	800315e <HAL_TIM_PWM_Start_IT+0x6e>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d109      	bne.n	800314c <HAL_TIM_PWM_Start_IT+0x5c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e008      	b.n	800315e <HAL_TIM_PWM_Start_IT+0x6e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0bd      	b.n	80032e2 <HAL_TIM_PWM_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Start_IT+0x86>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	e013      	b.n	800319e <HAL_TIM_PWM_Start_IT+0xae>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d104      	bne.n	8003186 <HAL_TIM_PWM_Start_IT+0x96>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003184:	e00b      	b.n	800319e <HAL_TIM_PWM_Start_IT+0xae>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d104      	bne.n	8003196 <HAL_TIM_PWM_Start_IT+0xa6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003194:	e003      	b.n	800319e <HAL_TIM_PWM_Start_IT+0xae>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d841      	bhi.n	8003228 <HAL_TIM_PWM_Start_IT+0x138>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_TIM_PWM_Start_IT+0xbc>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031e1 	.word	0x080031e1
 80031b0:	08003229 	.word	0x08003229
 80031b4:	08003229 	.word	0x08003229
 80031b8:	08003229 	.word	0x08003229
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	08003229 	.word	0x08003229
 80031c4:	08003229 	.word	0x08003229
 80031c8:	08003229 	.word	0x08003229
 80031cc:	08003205 	.word	0x08003205
 80031d0:	08003229 	.word	0x08003229
 80031d4:	08003229 	.word	0x08003229
 80031d8:	08003229 	.word	0x08003229
 80031dc:	08003217 	.word	0x08003217
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0202 	orr.w	r2, r2, #2
 80031ee:	60da      	str	r2, [r3, #12]
      break;
 80031f0:	e01d      	b.n	800322e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0204 	orr.w	r2, r2, #4
 8003200:	60da      	str	r2, [r3, #12]
      break;
 8003202:	e014      	b.n	800322e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	60da      	str	r2, [r3, #12]
      break;
 8003214:	e00b      	b.n	800322e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0210 	orr.w	r2, r2, #16
 8003224:	60da      	str	r2, [r3, #12]
      break;
 8003226:	e002      	b.n	800322e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	bf00      	nop
  }

  if (status == HAL_OK)
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d155      	bne.n	80032e0 <HAL_TIM_PWM_Start_IT+0x1f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fe85 	bl	8003f4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a29      	ldr	r2, [pc, #164]	; (80032ec <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIM_PWM_Start_IT+0x166>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_TIM_PWM_Start_IT+0x200>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_TIM_PWM_Start_IT+0x16a>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_TIM_PWM_Start_IT+0x16c>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_TIM_PWM_Start_IT+0x1fc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <HAL_TIM_PWM_Start_IT+0x1bc>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_PWM_Start_IT+0x200>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <HAL_TIM_PWM_Start_IT+0x1bc>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d00e      	beq.n	80032ac <HAL_TIM_PWM_Start_IT+0x1bc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIM_PWM_Start_IT+0x204>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <HAL_TIM_PWM_Start_IT+0x1bc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_TIM_PWM_Start_IT+0x208>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <HAL_TIM_PWM_Start_IT+0x1bc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a15      	ldr	r2, [pc, #84]	; (80032fc <HAL_TIM_PWM_Start_IT+0x20c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d111      	bne.n	80032d0 <HAL_TIM_PWM_Start_IT+0x1e0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d010      	beq.n	80032e0 <HAL_TIM_PWM_Start_IT+0x1f0>
      {
        __HAL_TIM_ENABLE(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ce:	e007      	b.n	80032e0 <HAL_TIM_PWM_Start_IT+0x1f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40013400 	.word	0x40013400
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00

08003300 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d841      	bhi.n	8003398 <HAL_TIM_PWM_Stop_IT+0x98>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	08003351 	.word	0x08003351
 8003320:	08003399 	.word	0x08003399
 8003324:	08003399 	.word	0x08003399
 8003328:	08003399 	.word	0x08003399
 800332c:	08003363 	.word	0x08003363
 8003330:	08003399 	.word	0x08003399
 8003334:	08003399 	.word	0x08003399
 8003338:	08003399 	.word	0x08003399
 800333c:	08003375 	.word	0x08003375
 8003340:	08003399 	.word	0x08003399
 8003344:	08003399 	.word	0x08003399
 8003348:	08003399 	.word	0x08003399
 800334c:	08003387 	.word	0x08003387
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0202 	bic.w	r2, r2, #2
 800335e:	60da      	str	r2, [r3, #12]
      break;
 8003360:	e01d      	b.n	800339e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0204 	bic.w	r2, r2, #4
 8003370:	60da      	str	r2, [r3, #12]
      break;
 8003372:	e014      	b.n	800339e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0208 	bic.w	r2, r2, #8
 8003382:	60da      	str	r2, [r3, #12]
      break;
 8003384:	e00b      	b.n	800339e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	60da      	str	r2, [r3, #12]
      break;
 8003396:	e002      	b.n	800339e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	bf00      	nop
  }

  if (status == HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d161      	bne.n	8003468 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2200      	movs	r2, #0
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fdcd 	bl	8003f4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <HAL_TIM_PWM_Stop_IT+0x174>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIM_PWM_Stop_IT+0xc6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <HAL_TIM_PWM_Stop_IT+0x178>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_Stop_IT+0xca>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_TIM_PWM_Stop_IT+0xcc>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_TIM_PWM_Stop_IT+0x100>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a1a      	ldr	r2, [r3, #32]
 80033e6:	f240 4344 	movw	r3, #1092	; 0x444
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <HAL_TIM_PWM_Stop_IT+0x100>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	f241 1311 	movw	r3, #4369	; 0x1111
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10f      	bne.n	8003430 <HAL_TIM_PWM_Stop_IT+0x130>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	f240 4344 	movw	r3, #1092	; 0x444
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <HAL_TIM_PWM_Stop_IT+0x130>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <HAL_TIM_PWM_Stop_IT+0x140>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343e:	e013      	b.n	8003468 <HAL_TIM_PWM_Stop_IT+0x168>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b04      	cmp	r3, #4
 8003444:	d104      	bne.n	8003450 <HAL_TIM_PWM_Stop_IT+0x150>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344e:	e00b      	b.n	8003468 <HAL_TIM_PWM_Stop_IT+0x168>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b08      	cmp	r3, #8
 8003454:	d104      	bne.n	8003460 <HAL_TIM_PWM_Stop_IT+0x160>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800345e:	e003      	b.n	8003468 <HAL_TIM_PWM_Stop_IT+0x168>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40013400 	.word	0x40013400

0800347c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d122      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d11b      	bne.n	80034d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0202 	mvn.w	r2, #2
 80034a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa76 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fa69 	bl	800399e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fc33 	bl	8000d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d122      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d11b      	bne.n	800352c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f06f 0204 	mvn.w	r2, #4
 80034fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa4c 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 8003518:	e005      	b.n	8003526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa3f 	bl	800399e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7fd fc09 	bl	8000d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d122      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d11b      	bne.n	8003580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0208 	mvn.w	r2, #8
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa22 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fa15 	bl	800399e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd fbdf 	bl	8000d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b10      	cmp	r3, #16
 800358c:	d122      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	d11b      	bne.n	80035d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2208      	movs	r2, #8
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9f8 	bl	80039b0 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f9eb 	bl	800399e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd fbb5 	bl	8000d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d10e      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d107      	bne.n	8003600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0201 	mvn.w	r2, #1
 80035f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fb4a 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fd7a 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d107      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f9b5 	bl	80039c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0220 	mvn.w	r2, #32
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fd45 	bl	800410e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e0ae      	b.n	8003808 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	f200 809f 	bhi.w	80037f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036f5 	.word	0x080036f5
 80036c4:	080037f9 	.word	0x080037f9
 80036c8:	080037f9 	.word	0x080037f9
 80036cc:	080037f9 	.word	0x080037f9
 80036d0:	08003735 	.word	0x08003735
 80036d4:	080037f9 	.word	0x080037f9
 80036d8:	080037f9 	.word	0x080037f9
 80036dc:	080037f9 	.word	0x080037f9
 80036e0:	08003777 	.word	0x08003777
 80036e4:	080037f9 	.word	0x080037f9
 80036e8:	080037f9 	.word	0x080037f9
 80036ec:	080037f9 	.word	0x080037f9
 80036f0:	080037b7 	.word	0x080037b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f9e4 	bl	8003ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0208 	orr.w	r2, r2, #8
 800370e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6999      	ldr	r1, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	619a      	str	r2, [r3, #24]
      break;
 8003732:	e064      	b.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fa34 	bl	8003ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6999      	ldr	r1, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]
      break;
 8003774:	e043      	b.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa87 	bl	8003c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0208 	orr.w	r2, r2, #8
 8003790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0204 	bic.w	r2, r2, #4
 80037a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	61da      	str	r2, [r3, #28]
      break;
 80037b4:	e023      	b.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fadb 	bl	8003d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69d9      	ldr	r1, [r3, #28]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	021a      	lsls	r2, r3, #8
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	61da      	str	r2, [r3, #28]
      break;
 80037f6:	e002      	b.n	80037fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	75fb      	strb	r3, [r7, #23]
      break;
 80037fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003806:	7dfb      	ldrb	r3, [r7, #23]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIM_ConfigClockSource+0x1c>
 8003828:	2302      	movs	r3, #2
 800382a:	e0b4      	b.n	8003996 <HAL_TIM_ConfigClockSource+0x186>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003852:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d03e      	beq.n	80038e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	f200 8087 	bhi.w	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	f000 8086 	beq.w	8003982 <HAL_TIM_ConfigClockSource+0x172>
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	d87f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800387c:	2b70      	cmp	r3, #112	; 0x70
 800387e:	d01a      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003880:	2b70      	cmp	r3, #112	; 0x70
 8003882:	d87b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d050      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x11a>
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d877      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b50      	cmp	r3, #80	; 0x50
 800388e:	d03c      	beq.n	800390a <HAL_TIM_ConfigClockSource+0xfa>
 8003890:	2b50      	cmp	r3, #80	; 0x50
 8003892:	d873      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d058      	beq.n	800394a <HAL_TIM_ConfigClockSource+0x13a>
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d86f      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b30      	cmp	r3, #48	; 0x30
 800389e:	d064      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038a0:	2b30      	cmp	r3, #48	; 0x30
 80038a2:	d86b      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d060      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d867      	bhi.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d05a      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	e062      	b.n	800397c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038c6:	f000 fb22 	bl	8003f0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
      break;
 80038e2:	e04f      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f4:	f000 fb0b 	bl	8003f0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003906:	609a      	str	r2, [r3, #8]
      break;
 8003908:	e03c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003916:	461a      	mov	r2, r3
 8003918:	f000 fa82 	bl	8003e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2150      	movs	r1, #80	; 0x50
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fad9 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003928:	e02c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003936:	461a      	mov	r2, r3
 8003938:	f000 faa0 	bl	8003e7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2160      	movs	r1, #96	; 0x60
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fac9 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003948:	e01c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fa62 	bl	8003e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fab9 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 8003968:	e00c      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 fab0 	bl	8003eda <TIM_ITRx_SetConfig>
      break;
 800397a:	e003      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
      break;
 8003980:	e000      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a33      	ldr	r2, [pc, #204]	; (8003ab4 <TIM_Base_SetConfig+0xe0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <TIM_Base_SetConfig+0x40>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00f      	beq.n	8003a14 <TIM_Base_SetConfig+0x40>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fa:	d00b      	beq.n	8003a14 <TIM_Base_SetConfig+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2f      	ldr	r2, [pc, #188]	; (8003abc <TIM_Base_SetConfig+0xe8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a2e      	ldr	r2, [pc, #184]	; (8003ac0 <TIM_Base_SetConfig+0xec>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <TIM_Base_SetConfig+0xf0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d108      	bne.n	8003a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <TIM_Base_SetConfig+0xe0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <TIM_Base_SetConfig+0x82>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a21      	ldr	r2, [pc, #132]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00f      	beq.n	8003a56 <TIM_Base_SetConfig+0x82>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d00b      	beq.n	8003a56 <TIM_Base_SetConfig+0x82>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <TIM_Base_SetConfig+0xe8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <TIM_Base_SetConfig+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <TIM_Base_SetConfig+0xec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d003      	beq.n	8003a56 <TIM_Base_SetConfig+0x82>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1c      	ldr	r2, [pc, #112]	; (8003ac4 <TIM_Base_SetConfig+0xf0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d108      	bne.n	8003a68 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <TIM_Base_SetConfig+0xe0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_Base_SetConfig+0xc8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <TIM_Base_SetConfig+0xe4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40013400 	.word	0x40013400
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00

08003ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 0201 	bic.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0303 	bic.w	r3, r3, #3
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 0302 	bic.w	r3, r3, #2
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <TIM_OC1_SetConfig+0xd8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC1_SetConfig+0x64>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <TIM_OC1_SetConfig+0xdc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10c      	bne.n	8003b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0308 	bic.w	r3, r3, #8
 8003b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <TIM_OC1_SetConfig+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_OC1_SetConfig+0x8e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <TIM_OC1_SetConfig+0xdc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d111      	bne.n	8003b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400

08003ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 0210 	bic.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f023 0320 	bic.w	r3, r3, #32
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <TIM_OC2_SetConfig+0xe0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC2_SetConfig+0x68>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <TIM_OC2_SetConfig+0xe4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <TIM_OC2_SetConfig+0xe0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC2_SetConfig+0x94>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <TIM_OC2_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d113      	bne.n	8003c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40013400 	.word	0x40013400

08003c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <TIM_OC3_SetConfig+0xe0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC3_SetConfig+0x66>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <TIM_OC3_SetConfig+0xe4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10d      	bne.n	8003d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <TIM_OC3_SetConfig+0xe0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d003      	beq.n	8003d22 <TIM_OC3_SetConfig+0x92>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <TIM_OC3_SetConfig+0xe4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d113      	bne.n	8003d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40013400 	.word	0x40013400

08003d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	031b      	lsls	r3, r3, #12
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <TIM_OC4_SetConfig+0xa0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC4_SetConfig+0x68>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a10      	ldr	r2, [pc, #64]	; (8003e1c <TIM_OC4_SetConfig+0xa4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d109      	bne.n	8003df4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	019b      	lsls	r3, r3, #6
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	621a      	str	r2, [r3, #32]
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40013400 	.word	0x40013400

08003e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0201 	bic.w	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 030a 	bic.w	r3, r3, #10
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	bf00      	nop
 8003e74:	371c      	adds	r7, #28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0210 	bic.w	r2, r3, #16
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	031b      	lsls	r3, r3, #12
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f043 0307 	orr.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b087      	sub	sp, #28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2201      	movs	r2, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	401a      	ands	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e050      	b.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d018      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a19      	ldr	r2, [pc, #100]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d00e      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a14      	ldr	r2, [pc, #80]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a12      	ldr	r2, [pc, #72]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10c      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40013400 	.word	0x40013400
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40000c00 	.word	0x40000c00

0800406c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e03d      	b.n	8004104 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e042      	b.n	80041ca <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fd fcb7 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2224      	movs	r2, #36	; 0x24
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004174:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fdc6 	bl	8004d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800418a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695a      	ldr	r2, [r3, #20]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800419a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b08a      	sub	sp, #40	; 0x28
 80041d6:	af02      	add	r7, sp, #8
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d16d      	bne.n	80042ce <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_UART_Transmit+0x2c>
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e066      	b.n	80042d0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2221      	movs	r2, #33	; 0x21
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004210:	f7fd fd6e 	bl	8001cf0 <HAL_GetTick>
 8004214:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	88fa      	ldrh	r2, [r7, #6]
 8004220:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d108      	bne.n	800423e <HAL_UART_Transmit+0x6c>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d104      	bne.n	800423e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e003      	b.n	8004246 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004246:	e02a      	b.n	800429e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2180      	movs	r1, #128	; 0x80
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fb15 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e036      	b.n	80042d0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004276:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	3302      	adds	r3, #2
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e007      	b.n	8004290 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3301      	adds	r3, #1
 800428e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1cf      	bne.n	8004248 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2140      	movs	r1, #64	; 0x40
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fae5 	bl	8004882 <UART_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e006      	b.n	80042d0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d112      	bne.n	8004318 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_UART_Receive_IT+0x26>
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e00b      	b.n	800431a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	461a      	mov	r2, r3
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 fb25 	bl	800495e <UART_Start_Receive_IT>
 8004314:	4603      	mov	r3, r0
 8004316:	e000      	b.n	800431a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
  }
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b0ba      	sub	sp, #232	; 0xe8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0320 	and.w	r3, r3, #32
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_UART_IRQHandler+0x66>
 8004376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fc01 	bl	8004b8a <UART_Receive_IT>
      return;
 8004388:	e25b      	b.n	8004842 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 80de 	beq.w	8004550 <HAL_UART_IRQHandler+0x22c>
 8004394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80d1 	beq.w	8004550 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_UART_IRQHandler+0xae>
 80043ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f043 0201 	orr.w	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_UART_IRQHandler+0xd2>
 80043de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f043 0202 	orr.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_UART_IRQHandler+0xf6>
 8004402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f043 0204 	orr.w	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <HAL_UART_IRQHandler+0x126>
 8004426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d105      	bne.n	800443e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0208 	orr.w	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 81f2 	beq.w	8004838 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_UART_IRQHandler+0x14e>
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb8c 	bl	8004b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf14      	ite	ne
 8004480:	2301      	movne	r3, #1
 8004482:	2300      	moveq	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d103      	bne.n	800449e <HAL_UART_IRQHandler+0x17a>
 8004496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d04f      	beq.n	800453e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa96 	bl	80049d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d041      	beq.n	8004536 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80044c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80044de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d9      	bne.n	80044b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d013      	beq.n	800452e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	4a7e      	ldr	r2, [pc, #504]	; (8004704 <HAL_UART_IRQHandler+0x3e0>)
 800450c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd fd3e 	bl	8001f94 <HAL_DMA_Abort_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004528:	4610      	mov	r0, r2
 800452a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	e00e      	b.n	800454c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f993 	bl	800485a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004534:	e00a      	b.n	800454c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f98f 	bl	800485a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	e006      	b.n	800454c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f98b 	bl	800485a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800454a:	e175      	b.n	8004838 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	bf00      	nop
    return;
 800454e:	e173      	b.n	8004838 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	2b01      	cmp	r3, #1
 8004556:	f040 814f 	bne.w	80047f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8148 	beq.w	80047f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8141 	beq.w	80047f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 80b6 	beq.w	8004708 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8145 	beq.w	800483c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045ba:	429a      	cmp	r2, r3
 80045bc:	f080 813e 	bcs.w	800483c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80045c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	f000 8088 	beq.w	80046e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	330c      	adds	r3, #12
 80045fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004600:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004604:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800460c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1d9      	bne.n	80045d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004644:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004648:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800464c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e1      	bne.n	8004620 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800466c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004680:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004682:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004686:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800468e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80046b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80046c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80046c8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80046d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fc1d 	bl	8001f1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8b6 	bl	800486c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004700:	e09c      	b.n	800483c <HAL_UART_IRQHandler+0x518>
 8004702:	bf00      	nop
 8004704:	08004a95 	.word	0x08004a95
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004710:	b29b      	uxth	r3, r3
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 808e 	beq.w	8004840 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8089 	beq.w	8004840 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004744:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004752:	647a      	str	r2, [r7, #68]	; 0x44
 8004754:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e3      	bne.n	800472e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3314      	adds	r3, #20
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	623b      	str	r3, [r7, #32]
   return(result);
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800478a:	633a      	str	r2, [r7, #48]	; 0x30
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e3      	bne.n	8004766 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0310 	bic.w	r3, r3, #16
 80047c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	330c      	adds	r3, #12
 80047cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80047d0:	61fa      	str	r2, [r7, #28]
 80047d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69b9      	ldr	r1, [r7, #24]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	617b      	str	r3, [r7, #20]
   return(result);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e3      	bne.n	80047ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f83b 	bl	800486c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047f6:	e023      	b.n	8004840 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_UART_IRQHandler+0x4f4>
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f953 	bl	8004abc <UART_Transmit_IT>
    return;
 8004816:	e014      	b.n	8004842 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <HAL_UART_IRQHandler+0x51e>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f992 	bl	8004b5a <UART_EndTransmit_IT>
    return;
 8004836:	e004      	b.n	8004842 <HAL_UART_IRQHandler+0x51e>
    return;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <HAL_UART_IRQHandler+0x51e>
      return;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <HAL_UART_IRQHandler+0x51e>
      return;
 8004840:	bf00      	nop
  }
}
 8004842:	37e8      	adds	r7, #232	; 0xe8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b090      	sub	sp, #64	; 0x40
 8004886:	af00      	add	r7, sp, #0
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004892:	e050      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d04c      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800489c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d007      	beq.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80048a2:	f7fd fa25 	bl	8001cf0 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d241      	bcs.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048d2:	637a      	str	r2, [r7, #52]	; 0x34
 80048d4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	613b      	str	r3, [r7, #16]
   return(result);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004906:	623a      	str	r2, [r7, #32]
 8004908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	69f9      	ldr	r1, [r7, #28]
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	61bb      	str	r3, [r7, #24]
   return(result);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e00f      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	429a      	cmp	r2, r3
 8004944:	bf0c      	ite	eq
 8004946:	2301      	moveq	r3, #1
 8004948:	2300      	movne	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	429a      	cmp	r2, r3
 8004952:	d09f      	beq.n	8004894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3740      	adds	r7, #64	; 0x40
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2222      	movs	r2, #34	; 0x22
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0220 	orr.w	r2, r2, #32
 80049c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr

080049d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b095      	sub	sp, #84	; 0x54
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049f8:	643a      	str	r2, [r7, #64]	; 0x40
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3314      	adds	r3, #20
 8004a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e5      	bne.n	8004a0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d119      	bne.n	8004a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a68:	61ba      	str	r2, [r7, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6979      	ldr	r1, [r7, #20]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	613b      	str	r3, [r7, #16]
   return(result);
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a8a:	bf00      	nop
 8004a8c:	3754      	adds	r7, #84	; 0x54
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f7ff fed3 	bl	800485a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b21      	cmp	r3, #33	; 0x21
 8004ace:	d13e      	bne.n	8004b4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d114      	bne.n	8004b04 <UART_Transmit_IT+0x48>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d110      	bne.n	8004b04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004af6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	621a      	str	r2, [r3, #32]
 8004b02:	e008      	b.n	8004b16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	1c59      	adds	r1, r3, #1
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6211      	str	r1, [r2, #32]
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4619      	mov	r1, r3
 8004b24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b4e:	2302      	movs	r3, #2
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fe64 	bl	8004848 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b08c      	sub	sp, #48	; 0x30
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b22      	cmp	r3, #34	; 0x22
 8004b9c:	f040 80ae 	bne.w	8004cfc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d117      	bne.n	8004bda <UART_Receive_IT+0x50>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	1c9a      	adds	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd8:	e026      	b.n	8004c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d007      	beq.n	8004bfe <UART_Receive_IT+0x74>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <UART_Receive_IT+0x82>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	701a      	strb	r2, [r3, #0]
 8004c0a:	e008      	b.n	8004c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4619      	mov	r1, r3
 8004c36:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d15d      	bne.n	8004cf8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0220 	bic.w	r2, r2, #32
 8004c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d135      	bne.n	8004cee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	613b      	str	r3, [r7, #16]
   return(result);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	623a      	str	r2, [r7, #32]
 8004caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d10a      	bne.n	8004ce0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fdc0 	bl	800486c <HAL_UARTEx_RxEventCallback>
 8004cec:	e002      	b.n	8004cf4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fdcc 	bl	800188c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e002      	b.n	8004cfe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3730      	adds	r7, #48	; 0x30
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d42:	f023 030c 	bic.w	r3, r3, #12
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2c      	ldr	r2, [pc, #176]	; (8004e1c <UART_SetConfig+0x114>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d103      	bne.n	8004d78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fd ffd2 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	e002      	b.n	8004d7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7fd ffba 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	009a      	lsls	r2, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <UART_SetConfig+0x118>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	0119      	lsls	r1, r3, #4
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009a      	lsls	r2, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <UART_SetConfig+0x118>)
 8004db6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2064      	movs	r0, #100	; 0x64
 8004dbe:	fb00 f303 	mul.w	r3, r0, r3
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	3332      	adds	r3, #50	; 0x32
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <UART_SetConfig+0x118>)
 8004dca:	fba2 2303 	umull	r2, r3, r2, r3
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd4:	4419      	add	r1, r3
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dec:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <UART_SetConfig+0x118>)
 8004dee:	fba3 0302 	umull	r0, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2064      	movs	r0, #100	; 0x64
 8004df6:	fb00 f303 	mul.w	r3, r0, r3
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	3332      	adds	r3, #50	; 0x32
 8004e00:	4a07      	ldr	r2, [pc, #28]	; (8004e20 <UART_SetConfig+0x118>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f003 020f 	and.w	r2, r3, #15
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	440a      	add	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	51eb851f 	.word	0x51eb851f

08004e24 <siprintf>:
 8004e24:	b40e      	push	{r1, r2, r3}
 8004e26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e2a:	b500      	push	{lr}
 8004e2c:	b09c      	sub	sp, #112	; 0x70
 8004e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e30:	9002      	str	r0, [sp, #8]
 8004e32:	9006      	str	r0, [sp, #24]
 8004e34:	9107      	str	r1, [sp, #28]
 8004e36:	9104      	str	r1, [sp, #16]
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <siprintf+0x38>)
 8004e3a:	4909      	ldr	r1, [pc, #36]	; (8004e60 <siprintf+0x3c>)
 8004e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e40:	9105      	str	r1, [sp, #20]
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	a902      	add	r1, sp, #8
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	f000 f98e 	bl	8005168 <_svfiprintf_r>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	9b02      	ldr	r3, [sp, #8]
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	b01c      	add	sp, #112	; 0x70
 8004e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e58:	b003      	add	sp, #12
 8004e5a:	4770      	bx	lr
 8004e5c:	20000090 	.word	0x20000090
 8004e60:	ffff0208 	.word	0xffff0208

08004e64 <memset>:
 8004e64:	4603      	mov	r3, r0
 8004e66:	4402      	add	r2, r0
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <memset+0xa>
 8004e6c:	4770      	bx	lr
 8004e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e72:	e7f9      	b.n	8004e68 <memset+0x4>

08004e74 <__errno>:
 8004e74:	4b01      	ldr	r3, [pc, #4]	; (8004e7c <__errno+0x8>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20000090 	.word	0x20000090

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	2600      	movs	r6, #0
 8004e84:	4d0c      	ldr	r5, [pc, #48]	; (8004eb8 <__libc_init_array+0x38>)
 8004e86:	4c0d      	ldr	r4, [pc, #52]	; (8004ebc <__libc_init_array+0x3c>)
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	f000 fc7a 	bl	8005788 <_init>
 8004e94:	2600      	movs	r6, #0
 8004e96:	4d0a      	ldr	r5, [pc, #40]	; (8004ec0 <__libc_init_array+0x40>)
 8004e98:	4c0a      	ldr	r4, [pc, #40]	; (8004ec4 <__libc_init_array+0x44>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	08005804 	.word	0x08005804
 8004ebc:	08005804 	.word	0x08005804
 8004ec0:	08005804 	.word	0x08005804
 8004ec4:	08005808 	.word	0x08005808

08004ec8 <__retarget_lock_acquire_recursive>:
 8004ec8:	4770      	bx	lr

08004eca <__retarget_lock_release_recursive>:
 8004eca:	4770      	bx	lr

08004ecc <_free_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4605      	mov	r5, r0
 8004ed0:	2900      	cmp	r1, #0
 8004ed2:	d040      	beq.n	8004f56 <_free_r+0x8a>
 8004ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed8:	1f0c      	subs	r4, r1, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bfb8      	it	lt
 8004ede:	18e4      	addlt	r4, r4, r3
 8004ee0:	f000 f8dc 	bl	800509c <__malloc_lock>
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <_free_r+0x8c>)
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	b933      	cbnz	r3, 8004ef8 <_free_r+0x2c>
 8004eea:	6063      	str	r3, [r4, #4]
 8004eec:	6014      	str	r4, [r2, #0]
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef4:	f000 b8d8 	b.w	80050a8 <__malloc_unlock>
 8004ef8:	42a3      	cmp	r3, r4
 8004efa:	d908      	bls.n	8004f0e <_free_r+0x42>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	1821      	adds	r1, r4, r0
 8004f00:	428b      	cmp	r3, r1
 8004f02:	bf01      	itttt	eq
 8004f04:	6819      	ldreq	r1, [r3, #0]
 8004f06:	685b      	ldreq	r3, [r3, #4]
 8004f08:	1809      	addeq	r1, r1, r0
 8004f0a:	6021      	streq	r1, [r4, #0]
 8004f0c:	e7ed      	b.n	8004eea <_free_r+0x1e>
 8004f0e:	461a      	mov	r2, r3
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b10b      	cbz	r3, 8004f18 <_free_r+0x4c>
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	d9fa      	bls.n	8004f0e <_free_r+0x42>
 8004f18:	6811      	ldr	r1, [r2, #0]
 8004f1a:	1850      	adds	r0, r2, r1
 8004f1c:	42a0      	cmp	r0, r4
 8004f1e:	d10b      	bne.n	8004f38 <_free_r+0x6c>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	4401      	add	r1, r0
 8004f24:	1850      	adds	r0, r2, r1
 8004f26:	4283      	cmp	r3, r0
 8004f28:	6011      	str	r1, [r2, #0]
 8004f2a:	d1e0      	bne.n	8004eee <_free_r+0x22>
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4408      	add	r0, r1
 8004f32:	6010      	str	r0, [r2, #0]
 8004f34:	6053      	str	r3, [r2, #4]
 8004f36:	e7da      	b.n	8004eee <_free_r+0x22>
 8004f38:	d902      	bls.n	8004f40 <_free_r+0x74>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	602b      	str	r3, [r5, #0]
 8004f3e:	e7d6      	b.n	8004eee <_free_r+0x22>
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	1821      	adds	r1, r4, r0
 8004f44:	428b      	cmp	r3, r1
 8004f46:	bf01      	itttt	eq
 8004f48:	6819      	ldreq	r1, [r3, #0]
 8004f4a:	685b      	ldreq	r3, [r3, #4]
 8004f4c:	1809      	addeq	r1, r1, r0
 8004f4e:	6021      	streq	r1, [r4, #0]
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	6054      	str	r4, [r2, #4]
 8004f54:	e7cb      	b.n	8004eee <_free_r+0x22>
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	2000042c 	.word	0x2000042c

08004f5c <sbrk_aligned>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	4e0e      	ldr	r6, [pc, #56]	; (8004f98 <sbrk_aligned+0x3c>)
 8004f60:	460c      	mov	r4, r1
 8004f62:	6831      	ldr	r1, [r6, #0]
 8004f64:	4605      	mov	r5, r0
 8004f66:	b911      	cbnz	r1, 8004f6e <sbrk_aligned+0x12>
 8004f68:	f000 fbaa 	bl	80056c0 <_sbrk_r>
 8004f6c:	6030      	str	r0, [r6, #0]
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 fba5 	bl	80056c0 <_sbrk_r>
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	d00a      	beq.n	8004f90 <sbrk_aligned+0x34>
 8004f7a:	1cc4      	adds	r4, r0, #3
 8004f7c:	f024 0403 	bic.w	r4, r4, #3
 8004f80:	42a0      	cmp	r0, r4
 8004f82:	d007      	beq.n	8004f94 <sbrk_aligned+0x38>
 8004f84:	1a21      	subs	r1, r4, r0
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fb9a 	bl	80056c0 <_sbrk_r>
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d101      	bne.n	8004f94 <sbrk_aligned+0x38>
 8004f90:	f04f 34ff 	mov.w	r4, #4294967295
 8004f94:	4620      	mov	r0, r4
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	20000430 	.word	0x20000430

08004f9c <_malloc_r>:
 8004f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	1ccd      	adds	r5, r1, #3
 8004fa2:	f025 0503 	bic.w	r5, r5, #3
 8004fa6:	3508      	adds	r5, #8
 8004fa8:	2d0c      	cmp	r5, #12
 8004faa:	bf38      	it	cc
 8004fac:	250c      	movcc	r5, #12
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	4607      	mov	r7, r0
 8004fb2:	db01      	blt.n	8004fb8 <_malloc_r+0x1c>
 8004fb4:	42a9      	cmp	r1, r5
 8004fb6:	d905      	bls.n	8004fc4 <_malloc_r+0x28>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	2600      	movs	r6, #0
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005098 <_malloc_r+0xfc>
 8004fc8:	f000 f868 	bl	800509c <__malloc_lock>
 8004fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	bb5c      	cbnz	r4, 800502c <_malloc_r+0x90>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ffc0 	bl	8004f5c <sbrk_aligned>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	4604      	mov	r4, r0
 8004fe0:	d155      	bne.n	800508e <_malloc_r+0xf2>
 8004fe2:	f8d8 4000 	ldr.w	r4, [r8]
 8004fe6:	4626      	mov	r6, r4
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	d145      	bne.n	8005078 <_malloc_r+0xdc>
 8004fec:	2c00      	cmp	r4, #0
 8004fee:	d048      	beq.n	8005082 <_malloc_r+0xe6>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	eb04 0903 	add.w	r9, r4, r3
 8004ffa:	f000 fb61 	bl	80056c0 <_sbrk_r>
 8004ffe:	4581      	cmp	r9, r0
 8005000:	d13f      	bne.n	8005082 <_malloc_r+0xe6>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	4638      	mov	r0, r7
 8005006:	1a6d      	subs	r5, r5, r1
 8005008:	4629      	mov	r1, r5
 800500a:	f7ff ffa7 	bl	8004f5c <sbrk_aligned>
 800500e:	3001      	adds	r0, #1
 8005010:	d037      	beq.n	8005082 <_malloc_r+0xe6>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	442b      	add	r3, r5
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	f8d8 3000 	ldr.w	r3, [r8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d038      	beq.n	8005092 <_malloc_r+0xf6>
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	42a2      	cmp	r2, r4
 8005024:	d12b      	bne.n	800507e <_malloc_r+0xe2>
 8005026:	2200      	movs	r2, #0
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	e00f      	b.n	800504c <_malloc_r+0xb0>
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	1b52      	subs	r2, r2, r5
 8005030:	d41f      	bmi.n	8005072 <_malloc_r+0xd6>
 8005032:	2a0b      	cmp	r2, #11
 8005034:	d917      	bls.n	8005066 <_malloc_r+0xca>
 8005036:	1961      	adds	r1, r4, r5
 8005038:	42a3      	cmp	r3, r4
 800503a:	6025      	str	r5, [r4, #0]
 800503c:	bf18      	it	ne
 800503e:	6059      	strne	r1, [r3, #4]
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	bf08      	it	eq
 8005044:	f8c8 1000 	streq.w	r1, [r8]
 8005048:	5162      	str	r2, [r4, r5]
 800504a:	604b      	str	r3, [r1, #4]
 800504c:	4638      	mov	r0, r7
 800504e:	f104 060b 	add.w	r6, r4, #11
 8005052:	f000 f829 	bl	80050a8 <__malloc_unlock>
 8005056:	f026 0607 	bic.w	r6, r6, #7
 800505a:	1d23      	adds	r3, r4, #4
 800505c:	1af2      	subs	r2, r6, r3
 800505e:	d0ae      	beq.n	8004fbe <_malloc_r+0x22>
 8005060:	1b9b      	subs	r3, r3, r6
 8005062:	50a3      	str	r3, [r4, r2]
 8005064:	e7ab      	b.n	8004fbe <_malloc_r+0x22>
 8005066:	42a3      	cmp	r3, r4
 8005068:	6862      	ldr	r2, [r4, #4]
 800506a:	d1dd      	bne.n	8005028 <_malloc_r+0x8c>
 800506c:	f8c8 2000 	str.w	r2, [r8]
 8005070:	e7ec      	b.n	800504c <_malloc_r+0xb0>
 8005072:	4623      	mov	r3, r4
 8005074:	6864      	ldr	r4, [r4, #4]
 8005076:	e7ac      	b.n	8004fd2 <_malloc_r+0x36>
 8005078:	4634      	mov	r4, r6
 800507a:	6876      	ldr	r6, [r6, #4]
 800507c:	e7b4      	b.n	8004fe8 <_malloc_r+0x4c>
 800507e:	4613      	mov	r3, r2
 8005080:	e7cc      	b.n	800501c <_malloc_r+0x80>
 8005082:	230c      	movs	r3, #12
 8005084:	4638      	mov	r0, r7
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	f000 f80e 	bl	80050a8 <__malloc_unlock>
 800508c:	e797      	b.n	8004fbe <_malloc_r+0x22>
 800508e:	6025      	str	r5, [r4, #0]
 8005090:	e7dc      	b.n	800504c <_malloc_r+0xb0>
 8005092:	605b      	str	r3, [r3, #4]
 8005094:	deff      	udf	#255	; 0xff
 8005096:	bf00      	nop
 8005098:	2000042c 	.word	0x2000042c

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__malloc_lock+0x8>)
 800509e:	f7ff bf13 	b.w	8004ec8 <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	20000428 	.word	0x20000428

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f7ff bf0e 	b.w	8004eca <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	20000428 	.word	0x20000428

080050b4 <__ssputs_r>:
 80050b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	461f      	mov	r7, r3
 80050ba:	688e      	ldr	r6, [r1, #8]
 80050bc:	4682      	mov	sl, r0
 80050be:	42be      	cmp	r6, r7
 80050c0:	460c      	mov	r4, r1
 80050c2:	4690      	mov	r8, r2
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	d82c      	bhi.n	8005122 <__ssputs_r+0x6e>
 80050c8:	898a      	ldrh	r2, [r1, #12]
 80050ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050ce:	d026      	beq.n	800511e <__ssputs_r+0x6a>
 80050d0:	6965      	ldr	r5, [r4, #20]
 80050d2:	6909      	ldr	r1, [r1, #16]
 80050d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050d8:	eba3 0901 	sub.w	r9, r3, r1
 80050dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050e0:	1c7b      	adds	r3, r7, #1
 80050e2:	444b      	add	r3, r9
 80050e4:	106d      	asrs	r5, r5, #1
 80050e6:	429d      	cmp	r5, r3
 80050e8:	bf38      	it	cc
 80050ea:	461d      	movcc	r5, r3
 80050ec:	0553      	lsls	r3, r2, #21
 80050ee:	d527      	bpl.n	8005140 <__ssputs_r+0x8c>
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7ff ff53 	bl	8004f9c <_malloc_r>
 80050f6:	4606      	mov	r6, r0
 80050f8:	b360      	cbz	r0, 8005154 <__ssputs_r+0xa0>
 80050fa:	464a      	mov	r2, r9
 80050fc:	6921      	ldr	r1, [r4, #16]
 80050fe:	f000 fafd 	bl	80056fc <memcpy>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	6126      	str	r6, [r4, #16]
 8005110:	444e      	add	r6, r9
 8005112:	6026      	str	r6, [r4, #0]
 8005114:	463e      	mov	r6, r7
 8005116:	6165      	str	r5, [r4, #20]
 8005118:	eba5 0509 	sub.w	r5, r5, r9
 800511c:	60a5      	str	r5, [r4, #8]
 800511e:	42be      	cmp	r6, r7
 8005120:	d900      	bls.n	8005124 <__ssputs_r+0x70>
 8005122:	463e      	mov	r6, r7
 8005124:	4632      	mov	r2, r6
 8005126:	4641      	mov	r1, r8
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	f000 faaf 	bl	800568c <memmove>
 800512e:	2000      	movs	r0, #0
 8005130:	68a3      	ldr	r3, [r4, #8]
 8005132:	1b9b      	subs	r3, r3, r6
 8005134:	60a3      	str	r3, [r4, #8]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	4433      	add	r3, r6
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	462a      	mov	r2, r5
 8005142:	f000 fae9 	bl	8005718 <_realloc_r>
 8005146:	4606      	mov	r6, r0
 8005148:	2800      	cmp	r0, #0
 800514a:	d1e0      	bne.n	800510e <__ssputs_r+0x5a>
 800514c:	4650      	mov	r0, sl
 800514e:	6921      	ldr	r1, [r4, #16]
 8005150:	f7ff febc 	bl	8004ecc <_free_r>
 8005154:	230c      	movs	r3, #12
 8005156:	f8ca 3000 	str.w	r3, [sl]
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	e7e9      	b.n	800513c <__ssputs_r+0x88>

08005168 <_svfiprintf_r>:
 8005168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516c:	4698      	mov	r8, r3
 800516e:	898b      	ldrh	r3, [r1, #12]
 8005170:	4607      	mov	r7, r0
 8005172:	061b      	lsls	r3, r3, #24
 8005174:	460d      	mov	r5, r1
 8005176:	4614      	mov	r4, r2
 8005178:	b09d      	sub	sp, #116	; 0x74
 800517a:	d50e      	bpl.n	800519a <_svfiprintf_r+0x32>
 800517c:	690b      	ldr	r3, [r1, #16]
 800517e:	b963      	cbnz	r3, 800519a <_svfiprintf_r+0x32>
 8005180:	2140      	movs	r1, #64	; 0x40
 8005182:	f7ff ff0b 	bl	8004f9c <_malloc_r>
 8005186:	6028      	str	r0, [r5, #0]
 8005188:	6128      	str	r0, [r5, #16]
 800518a:	b920      	cbnz	r0, 8005196 <_svfiprintf_r+0x2e>
 800518c:	230c      	movs	r3, #12
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	e0d0      	b.n	8005338 <_svfiprintf_r+0x1d0>
 8005196:	2340      	movs	r3, #64	; 0x40
 8005198:	616b      	str	r3, [r5, #20]
 800519a:	2300      	movs	r3, #0
 800519c:	9309      	str	r3, [sp, #36]	; 0x24
 800519e:	2320      	movs	r3, #32
 80051a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051a4:	2330      	movs	r3, #48	; 0x30
 80051a6:	f04f 0901 	mov.w	r9, #1
 80051aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005350 <_svfiprintf_r+0x1e8>
 80051b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051b6:	4623      	mov	r3, r4
 80051b8:	469a      	mov	sl, r3
 80051ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051be:	b10a      	cbz	r2, 80051c4 <_svfiprintf_r+0x5c>
 80051c0:	2a25      	cmp	r2, #37	; 0x25
 80051c2:	d1f9      	bne.n	80051b8 <_svfiprintf_r+0x50>
 80051c4:	ebba 0b04 	subs.w	fp, sl, r4
 80051c8:	d00b      	beq.n	80051e2 <_svfiprintf_r+0x7a>
 80051ca:	465b      	mov	r3, fp
 80051cc:	4622      	mov	r2, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ff6f 	bl	80050b4 <__ssputs_r>
 80051d6:	3001      	adds	r0, #1
 80051d8:	f000 80a9 	beq.w	800532e <_svfiprintf_r+0x1c6>
 80051dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051de:	445a      	add	r2, fp
 80051e0:	9209      	str	r2, [sp, #36]	; 0x24
 80051e2:	f89a 3000 	ldrb.w	r3, [sl]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 80a1 	beq.w	800532e <_svfiprintf_r+0x1c6>
 80051ec:	2300      	movs	r3, #0
 80051ee:	f04f 32ff 	mov.w	r2, #4294967295
 80051f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f6:	f10a 0a01 	add.w	sl, sl, #1
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	9307      	str	r3, [sp, #28]
 80051fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005202:	931a      	str	r3, [sp, #104]	; 0x68
 8005204:	4654      	mov	r4, sl
 8005206:	2205      	movs	r2, #5
 8005208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520c:	4850      	ldr	r0, [pc, #320]	; (8005350 <_svfiprintf_r+0x1e8>)
 800520e:	f000 fa67 	bl	80056e0 <memchr>
 8005212:	9a04      	ldr	r2, [sp, #16]
 8005214:	b9d8      	cbnz	r0, 800524e <_svfiprintf_r+0xe6>
 8005216:	06d0      	lsls	r0, r2, #27
 8005218:	bf44      	itt	mi
 800521a:	2320      	movmi	r3, #32
 800521c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005220:	0711      	lsls	r1, r2, #28
 8005222:	bf44      	itt	mi
 8005224:	232b      	movmi	r3, #43	; 0x2b
 8005226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522a:	f89a 3000 	ldrb.w	r3, [sl]
 800522e:	2b2a      	cmp	r3, #42	; 0x2a
 8005230:	d015      	beq.n	800525e <_svfiprintf_r+0xf6>
 8005232:	4654      	mov	r4, sl
 8005234:	2000      	movs	r0, #0
 8005236:	f04f 0c0a 	mov.w	ip, #10
 800523a:	9a07      	ldr	r2, [sp, #28]
 800523c:	4621      	mov	r1, r4
 800523e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005242:	3b30      	subs	r3, #48	; 0x30
 8005244:	2b09      	cmp	r3, #9
 8005246:	d94d      	bls.n	80052e4 <_svfiprintf_r+0x17c>
 8005248:	b1b0      	cbz	r0, 8005278 <_svfiprintf_r+0x110>
 800524a:	9207      	str	r2, [sp, #28]
 800524c:	e014      	b.n	8005278 <_svfiprintf_r+0x110>
 800524e:	eba0 0308 	sub.w	r3, r0, r8
 8005252:	fa09 f303 	lsl.w	r3, r9, r3
 8005256:	4313      	orrs	r3, r2
 8005258:	46a2      	mov	sl, r4
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	e7d2      	b.n	8005204 <_svfiprintf_r+0x9c>
 800525e:	9b03      	ldr	r3, [sp, #12]
 8005260:	1d19      	adds	r1, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9103      	str	r1, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfbb      	ittet	lt
 800526a:	425b      	neglt	r3, r3
 800526c:	f042 0202 	orrlt.w	r2, r2, #2
 8005270:	9307      	strge	r3, [sp, #28]
 8005272:	9307      	strlt	r3, [sp, #28]
 8005274:	bfb8      	it	lt
 8005276:	9204      	strlt	r2, [sp, #16]
 8005278:	7823      	ldrb	r3, [r4, #0]
 800527a:	2b2e      	cmp	r3, #46	; 0x2e
 800527c:	d10c      	bne.n	8005298 <_svfiprintf_r+0x130>
 800527e:	7863      	ldrb	r3, [r4, #1]
 8005280:	2b2a      	cmp	r3, #42	; 0x2a
 8005282:	d134      	bne.n	80052ee <_svfiprintf_r+0x186>
 8005284:	9b03      	ldr	r3, [sp, #12]
 8005286:	3402      	adds	r4, #2
 8005288:	1d1a      	adds	r2, r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	9203      	str	r2, [sp, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfb8      	it	lt
 8005292:	f04f 33ff 	movlt.w	r3, #4294967295
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005354 <_svfiprintf_r+0x1ec>
 800529c:	2203      	movs	r2, #3
 800529e:	4650      	mov	r0, sl
 80052a0:	7821      	ldrb	r1, [r4, #0]
 80052a2:	f000 fa1d 	bl	80056e0 <memchr>
 80052a6:	b138      	cbz	r0, 80052b8 <_svfiprintf_r+0x150>
 80052a8:	2240      	movs	r2, #64	; 0x40
 80052aa:	9b04      	ldr	r3, [sp, #16]
 80052ac:	eba0 000a 	sub.w	r0, r0, sl
 80052b0:	4082      	lsls	r2, r0
 80052b2:	4313      	orrs	r3, r2
 80052b4:	3401      	adds	r4, #1
 80052b6:	9304      	str	r3, [sp, #16]
 80052b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052bc:	2206      	movs	r2, #6
 80052be:	4826      	ldr	r0, [pc, #152]	; (8005358 <_svfiprintf_r+0x1f0>)
 80052c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052c4:	f000 fa0c 	bl	80056e0 <memchr>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d038      	beq.n	800533e <_svfiprintf_r+0x1d6>
 80052cc:	4b23      	ldr	r3, [pc, #140]	; (800535c <_svfiprintf_r+0x1f4>)
 80052ce:	bb1b      	cbnz	r3, 8005318 <_svfiprintf_r+0x1b0>
 80052d0:	9b03      	ldr	r3, [sp, #12]
 80052d2:	3307      	adds	r3, #7
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	3308      	adds	r3, #8
 80052da:	9303      	str	r3, [sp, #12]
 80052dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052de:	4433      	add	r3, r6
 80052e0:	9309      	str	r3, [sp, #36]	; 0x24
 80052e2:	e768      	b.n	80051b6 <_svfiprintf_r+0x4e>
 80052e4:	460c      	mov	r4, r1
 80052e6:	2001      	movs	r0, #1
 80052e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ec:	e7a6      	b.n	800523c <_svfiprintf_r+0xd4>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4619      	mov	r1, r3
 80052f6:	3401      	adds	r4, #1
 80052f8:	9305      	str	r3, [sp, #20]
 80052fa:	4620      	mov	r0, r4
 80052fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005300:	3a30      	subs	r2, #48	; 0x30
 8005302:	2a09      	cmp	r2, #9
 8005304:	d903      	bls.n	800530e <_svfiprintf_r+0x1a6>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c6      	beq.n	8005298 <_svfiprintf_r+0x130>
 800530a:	9105      	str	r1, [sp, #20]
 800530c:	e7c4      	b.n	8005298 <_svfiprintf_r+0x130>
 800530e:	4604      	mov	r4, r0
 8005310:	2301      	movs	r3, #1
 8005312:	fb0c 2101 	mla	r1, ip, r1, r2
 8005316:	e7f0      	b.n	80052fa <_svfiprintf_r+0x192>
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	462a      	mov	r2, r5
 800531e:	4638      	mov	r0, r7
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <_svfiprintf_r+0x1f8>)
 8005322:	a904      	add	r1, sp, #16
 8005324:	f3af 8000 	nop.w
 8005328:	1c42      	adds	r2, r0, #1
 800532a:	4606      	mov	r6, r0
 800532c:	d1d6      	bne.n	80052dc <_svfiprintf_r+0x174>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	065b      	lsls	r3, r3, #25
 8005332:	f53f af2d 	bmi.w	8005190 <_svfiprintf_r+0x28>
 8005336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005338:	b01d      	add	sp, #116	; 0x74
 800533a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533e:	ab03      	add	r3, sp, #12
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	462a      	mov	r2, r5
 8005344:	4638      	mov	r0, r7
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <_svfiprintf_r+0x1f8>)
 8005348:	a904      	add	r1, sp, #16
 800534a:	f000 f87d 	bl	8005448 <_printf_i>
 800534e:	e7eb      	b.n	8005328 <_svfiprintf_r+0x1c0>
 8005350:	080057ce 	.word	0x080057ce
 8005354:	080057d4 	.word	0x080057d4
 8005358:	080057d8 	.word	0x080057d8
 800535c:	00000000 	.word	0x00000000
 8005360:	080050b5 	.word	0x080050b5

08005364 <_printf_common>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4616      	mov	r6, r2
 800536a:	4699      	mov	r9, r3
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	4607      	mov	r7, r0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfb8      	it	lt
 8005376:	4613      	movlt	r3, r2
 8005378:	6033      	str	r3, [r6, #0]
 800537a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800537e:	460c      	mov	r4, r1
 8005380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005384:	b10a      	cbz	r2, 800538a <_printf_common+0x26>
 8005386:	3301      	adds	r3, #1
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	6833      	ldrmi	r3, [r6, #0]
 8005392:	3302      	addmi	r3, #2
 8005394:	6033      	strmi	r3, [r6, #0]
 8005396:	6825      	ldr	r5, [r4, #0]
 8005398:	f015 0506 	ands.w	r5, r5, #6
 800539c:	d106      	bne.n	80053ac <_printf_common+0x48>
 800539e:	f104 0a19 	add.w	sl, r4, #25
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	6832      	ldr	r2, [r6, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dc2b      	bgt.n	8005404 <_printf_common+0xa0>
 80053ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b0:	1e13      	subs	r3, r2, #0
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	bf18      	it	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d430      	bmi.n	800541e <_printf_common+0xba>
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d023      	beq.n	8005412 <_printf_common+0xae>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	f003 0306 	and.w	r3, r3, #6
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	bf14      	ite	ne
 80053d6:	2500      	movne	r5, #0
 80053d8:	6833      	ldreq	r3, [r6, #0]
 80053da:	f04f 0600 	mov.w	r6, #0
 80053de:	bf08      	it	eq
 80053e0:	68e5      	ldreq	r5, [r4, #12]
 80053e2:	f104 041a 	add.w	r4, r4, #26
 80053e6:	bf08      	it	eq
 80053e8:	1aed      	subeq	r5, r5, r3
 80053ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053ee:	bf08      	it	eq
 80053f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f4:	4293      	cmp	r3, r2
 80053f6:	bfc4      	itt	gt
 80053f8:	1a9b      	subgt	r3, r3, r2
 80053fa:	18ed      	addgt	r5, r5, r3
 80053fc:	42b5      	cmp	r5, r6
 80053fe:	d11a      	bne.n	8005436 <_printf_common+0xd2>
 8005400:	2000      	movs	r0, #0
 8005402:	e008      	b.n	8005416 <_printf_common+0xb2>
 8005404:	2301      	movs	r3, #1
 8005406:	4652      	mov	r2, sl
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d103      	bne.n	800541a <_printf_common+0xb6>
 8005412:	f04f 30ff 	mov.w	r0, #4294967295
 8005416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541a:	3501      	adds	r5, #1
 800541c:	e7c1      	b.n	80053a2 <_printf_common+0x3e>
 800541e:	2030      	movs	r0, #48	; 0x30
 8005420:	18e1      	adds	r1, r4, r3
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800542c:	4422      	add	r2, r4
 800542e:	3302      	adds	r3, #2
 8005430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005434:	e7c2      	b.n	80053bc <_printf_common+0x58>
 8005436:	2301      	movs	r3, #1
 8005438:	4622      	mov	r2, r4
 800543a:	4649      	mov	r1, r9
 800543c:	4638      	mov	r0, r7
 800543e:	47c0      	blx	r8
 8005440:	3001      	adds	r0, #1
 8005442:	d0e6      	beq.n	8005412 <_printf_common+0xae>
 8005444:	3601      	adds	r6, #1
 8005446:	e7d9      	b.n	80053fc <_printf_common+0x98>

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	7e0f      	ldrb	r7, [r1, #24]
 800544e:	4691      	mov	r9, r2
 8005450:	2f78      	cmp	r7, #120	; 0x78
 8005452:	4680      	mov	r8, r0
 8005454:	460c      	mov	r4, r1
 8005456:	469a      	mov	sl, r3
 8005458:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800545a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	; 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d5 	beq.w	8005614 <_printf_i+0x1cc>
 800546a:	2f58      	cmp	r7, #88	; 0x58
 800546c:	f000 80c1 	beq.w	80055f2 <_printf_i+0x1aa>
 8005470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a101      	add	r1, pc, #4	; (adr r1, 8005488 <_printf_i+0x40>)
 8005484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	080055fb 	.word	0x080055fb
 80054b8:	08005521 	.word	0x08005521
 80054bc:	080055b5 	.word	0x080055b5
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	0800561d 	.word	0x0800561d
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005521 	.word	0x08005521
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055bd 	.word	0x080055bd
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	602a      	str	r2, [r5, #0]
 80054e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0a0      	b.n	8005636 <_printf_i+0x1ee>
 80054f4:	6820      	ldr	r0, [r4, #0]
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	0607      	lsls	r7, r0, #24
 80054fa:	f103 0104 	add.w	r1, r3, #4
 80054fe:	6029      	str	r1, [r5, #0]
 8005500:	d501      	bpl.n	8005506 <_printf_i+0xbe>
 8005502:	681e      	ldr	r6, [r3, #0]
 8005504:	e003      	b.n	800550e <_printf_i+0xc6>
 8005506:	0646      	lsls	r6, r0, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0xba>
 800550a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800550e:	2e00      	cmp	r6, #0
 8005510:	da03      	bge.n	800551a <_printf_i+0xd2>
 8005512:	232d      	movs	r3, #45	; 0x2d
 8005514:	4276      	negs	r6, r6
 8005516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551a:	230a      	movs	r3, #10
 800551c:	4859      	ldr	r0, [pc, #356]	; (8005684 <_printf_i+0x23c>)
 800551e:	e012      	b.n	8005546 <_printf_i+0xfe>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	1d19      	adds	r1, r3, #4
 8005526:	6029      	str	r1, [r5, #0]
 8005528:	0605      	lsls	r5, r0, #24
 800552a:	d501      	bpl.n	8005530 <_printf_i+0xe8>
 800552c:	681e      	ldr	r6, [r3, #0]
 800552e:	e002      	b.n	8005536 <_printf_i+0xee>
 8005530:	0641      	lsls	r1, r0, #25
 8005532:	d5fb      	bpl.n	800552c <_printf_i+0xe4>
 8005534:	881e      	ldrh	r6, [r3, #0]
 8005536:	2f6f      	cmp	r7, #111	; 0x6f
 8005538:	bf0c      	ite	eq
 800553a:	2308      	moveq	r3, #8
 800553c:	230a      	movne	r3, #10
 800553e:	4851      	ldr	r0, [pc, #324]	; (8005684 <_printf_i+0x23c>)
 8005540:	2100      	movs	r1, #0
 8005542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005546:	6865      	ldr	r5, [r4, #4]
 8005548:	2d00      	cmp	r5, #0
 800554a:	bfa8      	it	ge
 800554c:	6821      	ldrge	r1, [r4, #0]
 800554e:	60a5      	str	r5, [r4, #8]
 8005550:	bfa4      	itt	ge
 8005552:	f021 0104 	bicge.w	r1, r1, #4
 8005556:	6021      	strge	r1, [r4, #0]
 8005558:	b90e      	cbnz	r6, 800555e <_printf_i+0x116>
 800555a:	2d00      	cmp	r5, #0
 800555c:	d04b      	beq.n	80055f6 <_printf_i+0x1ae>
 800555e:	4615      	mov	r5, r2
 8005560:	fbb6 f1f3 	udiv	r1, r6, r3
 8005564:	fb03 6711 	mls	r7, r3, r1, r6
 8005568:	5dc7      	ldrb	r7, [r0, r7]
 800556a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800556e:	4637      	mov	r7, r6
 8005570:	42bb      	cmp	r3, r7
 8005572:	460e      	mov	r6, r1
 8005574:	d9f4      	bls.n	8005560 <_printf_i+0x118>
 8005576:	2b08      	cmp	r3, #8
 8005578:	d10b      	bne.n	8005592 <_printf_i+0x14a>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	07de      	lsls	r6, r3, #31
 800557e:	d508      	bpl.n	8005592 <_printf_i+0x14a>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	6861      	ldr	r1, [r4, #4]
 8005584:	4299      	cmp	r1, r3
 8005586:	bfde      	ittt	le
 8005588:	2330      	movle	r3, #48	; 0x30
 800558a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800558e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005592:	1b52      	subs	r2, r2, r5
 8005594:	6122      	str	r2, [r4, #16]
 8005596:	464b      	mov	r3, r9
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f8cd a000 	str.w	sl, [sp]
 80055a0:	aa03      	add	r2, sp, #12
 80055a2:	f7ff fedf 	bl	8005364 <_printf_common>
 80055a6:	3001      	adds	r0, #1
 80055a8:	d14a      	bne.n	8005640 <_printf_i+0x1f8>
 80055aa:	f04f 30ff 	mov.w	r0, #4294967295
 80055ae:	b004      	add	sp, #16
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f043 0320 	orr.w	r3, r3, #32
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2778      	movs	r7, #120	; 0x78
 80055be:	4832      	ldr	r0, [pc, #200]	; (8005688 <_printf_i+0x240>)
 80055c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	6829      	ldr	r1, [r5, #0]
 80055c8:	061f      	lsls	r7, r3, #24
 80055ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80055ce:	d402      	bmi.n	80055d6 <_printf_i+0x18e>
 80055d0:	065f      	lsls	r7, r3, #25
 80055d2:	bf48      	it	mi
 80055d4:	b2b6      	uxthmi	r6, r6
 80055d6:	07df      	lsls	r7, r3, #31
 80055d8:	bf48      	it	mi
 80055da:	f043 0320 	orrmi.w	r3, r3, #32
 80055de:	6029      	str	r1, [r5, #0]
 80055e0:	bf48      	it	mi
 80055e2:	6023      	strmi	r3, [r4, #0]
 80055e4:	b91e      	cbnz	r6, 80055ee <_printf_i+0x1a6>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f023 0320 	bic.w	r3, r3, #32
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	2310      	movs	r3, #16
 80055f0:	e7a6      	b.n	8005540 <_printf_i+0xf8>
 80055f2:	4824      	ldr	r0, [pc, #144]	; (8005684 <_printf_i+0x23c>)
 80055f4:	e7e4      	b.n	80055c0 <_printf_i+0x178>
 80055f6:	4615      	mov	r5, r2
 80055f8:	e7bd      	b.n	8005576 <_printf_i+0x12e>
 80055fa:	682b      	ldr	r3, [r5, #0]
 80055fc:	6826      	ldr	r6, [r4, #0]
 80055fe:	1d18      	adds	r0, r3, #4
 8005600:	6961      	ldr	r1, [r4, #20]
 8005602:	6028      	str	r0, [r5, #0]
 8005604:	0635      	lsls	r5, r6, #24
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	d501      	bpl.n	800560e <_printf_i+0x1c6>
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	e002      	b.n	8005614 <_printf_i+0x1cc>
 800560e:	0670      	lsls	r0, r6, #25
 8005610:	d5fb      	bpl.n	800560a <_printf_i+0x1c2>
 8005612:	8019      	strh	r1, [r3, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	4615      	mov	r5, r2
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	e7bc      	b.n	8005596 <_printf_i+0x14e>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	2100      	movs	r1, #0
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	681d      	ldr	r5, [r3, #0]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	4628      	mov	r0, r5
 800562a:	f000 f859 	bl	80056e0 <memchr>
 800562e:	b108      	cbz	r0, 8005634 <_printf_i+0x1ec>
 8005630:	1b40      	subs	r0, r0, r5
 8005632:	6060      	str	r0, [r4, #4]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6123      	str	r3, [r4, #16]
 8005638:	2300      	movs	r3, #0
 800563a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563e:	e7aa      	b.n	8005596 <_printf_i+0x14e>
 8005640:	462a      	mov	r2, r5
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	47d0      	blx	sl
 800564a:	3001      	adds	r0, #1
 800564c:	d0ad      	beq.n	80055aa <_printf_i+0x162>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	d413      	bmi.n	800567c <_printf_i+0x234>
 8005654:	68e0      	ldr	r0, [r4, #12]
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	4298      	cmp	r0, r3
 800565a:	bfb8      	it	lt
 800565c:	4618      	movlt	r0, r3
 800565e:	e7a6      	b.n	80055ae <_printf_i+0x166>
 8005660:	2301      	movs	r3, #1
 8005662:	4632      	mov	r2, r6
 8005664:	4649      	mov	r1, r9
 8005666:	4640      	mov	r0, r8
 8005668:	47d0      	blx	sl
 800566a:	3001      	adds	r0, #1
 800566c:	d09d      	beq.n	80055aa <_printf_i+0x162>
 800566e:	3501      	adds	r5, #1
 8005670:	68e3      	ldr	r3, [r4, #12]
 8005672:	9903      	ldr	r1, [sp, #12]
 8005674:	1a5b      	subs	r3, r3, r1
 8005676:	42ab      	cmp	r3, r5
 8005678:	dcf2      	bgt.n	8005660 <_printf_i+0x218>
 800567a:	e7eb      	b.n	8005654 <_printf_i+0x20c>
 800567c:	2500      	movs	r5, #0
 800567e:	f104 0619 	add.w	r6, r4, #25
 8005682:	e7f5      	b.n	8005670 <_printf_i+0x228>
 8005684:	080057df 	.word	0x080057df
 8005688:	080057f0 	.word	0x080057f0

0800568c <memmove>:
 800568c:	4288      	cmp	r0, r1
 800568e:	b510      	push	{r4, lr}
 8005690:	eb01 0402 	add.w	r4, r1, r2
 8005694:	d902      	bls.n	800569c <memmove+0x10>
 8005696:	4284      	cmp	r4, r0
 8005698:	4623      	mov	r3, r4
 800569a:	d807      	bhi.n	80056ac <memmove+0x20>
 800569c:	1e43      	subs	r3, r0, #1
 800569e:	42a1      	cmp	r1, r4
 80056a0:	d008      	beq.n	80056b4 <memmove+0x28>
 80056a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056aa:	e7f8      	b.n	800569e <memmove+0x12>
 80056ac:	4601      	mov	r1, r0
 80056ae:	4402      	add	r2, r0
 80056b0:	428a      	cmp	r2, r1
 80056b2:	d100      	bne.n	80056b6 <memmove+0x2a>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056be:	e7f7      	b.n	80056b0 <memmove+0x24>

080056c0 <_sbrk_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	2300      	movs	r3, #0
 80056c4:	4d05      	ldr	r5, [pc, #20]	; (80056dc <_sbrk_r+0x1c>)
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb fbea 	bl	8000ea4 <_sbrk>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_sbrk_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_sbrk_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000424 	.word	0x20000424

080056e0 <memchr>:
 80056e0:	4603      	mov	r3, r0
 80056e2:	b510      	push	{r4, lr}
 80056e4:	b2c9      	uxtb	r1, r1
 80056e6:	4402      	add	r2, r0
 80056e8:	4293      	cmp	r3, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	d101      	bne.n	80056f2 <memchr+0x12>
 80056ee:	2000      	movs	r0, #0
 80056f0:	e003      	b.n	80056fa <memchr+0x1a>
 80056f2:	7804      	ldrb	r4, [r0, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	428c      	cmp	r4, r1
 80056f8:	d1f6      	bne.n	80056e8 <memchr+0x8>
 80056fa:	bd10      	pop	{r4, pc}

080056fc <memcpy>:
 80056fc:	440a      	add	r2, r1
 80056fe:	4291      	cmp	r1, r2
 8005700:	f100 33ff 	add.w	r3, r0, #4294967295
 8005704:	d100      	bne.n	8005708 <memcpy+0xc>
 8005706:	4770      	bx	lr
 8005708:	b510      	push	{r4, lr}
 800570a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570e:	4291      	cmp	r1, r2
 8005710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005714:	d1f9      	bne.n	800570a <memcpy+0xe>
 8005716:	bd10      	pop	{r4, pc}

08005718 <_realloc_r>:
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	4680      	mov	r8, r0
 800571e:	4614      	mov	r4, r2
 8005720:	460e      	mov	r6, r1
 8005722:	b921      	cbnz	r1, 800572e <_realloc_r+0x16>
 8005724:	4611      	mov	r1, r2
 8005726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	f7ff bc37 	b.w	8004f9c <_malloc_r>
 800572e:	b92a      	cbnz	r2, 800573c <_realloc_r+0x24>
 8005730:	f7ff fbcc 	bl	8004ecc <_free_r>
 8005734:	4625      	mov	r5, r4
 8005736:	4628      	mov	r0, r5
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	f000 f81b 	bl	8005776 <_malloc_usable_size_r>
 8005740:	4284      	cmp	r4, r0
 8005742:	4607      	mov	r7, r0
 8005744:	d802      	bhi.n	800574c <_realloc_r+0x34>
 8005746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800574a:	d812      	bhi.n	8005772 <_realloc_r+0x5a>
 800574c:	4621      	mov	r1, r4
 800574e:	4640      	mov	r0, r8
 8005750:	f7ff fc24 	bl	8004f9c <_malloc_r>
 8005754:	4605      	mov	r5, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	d0ed      	beq.n	8005736 <_realloc_r+0x1e>
 800575a:	42bc      	cmp	r4, r7
 800575c:	4622      	mov	r2, r4
 800575e:	4631      	mov	r1, r6
 8005760:	bf28      	it	cs
 8005762:	463a      	movcs	r2, r7
 8005764:	f7ff ffca 	bl	80056fc <memcpy>
 8005768:	4631      	mov	r1, r6
 800576a:	4640      	mov	r0, r8
 800576c:	f7ff fbae 	bl	8004ecc <_free_r>
 8005770:	e7e1      	b.n	8005736 <_realloc_r+0x1e>
 8005772:	4635      	mov	r5, r6
 8005774:	e7df      	b.n	8005736 <_realloc_r+0x1e>

08005776 <_malloc_usable_size_r>:
 8005776:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577a:	1f18      	subs	r0, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	bfbc      	itt	lt
 8005780:	580b      	ldrlt	r3, [r1, r0]
 8005782:	18c0      	addlt	r0, r0, r3
 8005784:	4770      	bx	lr
	...

08005788 <_init>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr

08005794 <_fini>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr
